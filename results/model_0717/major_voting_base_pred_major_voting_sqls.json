[
  "SELECT \n  `Free Meal Count (K-12)` / `Enrollment (K-12)` AS EligibleFreeRate\nFROM \n  frpm\nWHERE \n  `County Name` = 'Alameda'\nORDER BY \n  EligibleFreeRate DESC\nLIMIT 1;",
  "SELECT \n  `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS EligibleFreeRate\nFROM \n  frpm\nWHERE \n  `Educational Option Type` = 'Continuation School'\nORDER BY \n  EligibleFreeRate ASC\nLIMIT 3;",
  "SELECT T2.Zip\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.`CDSCode`\nWHERE T1.`Charter School (Y/N)` = 1\n  AND T1.`District Name` = 'Fresno County Office of Education';",
  "SELECT T1.MailStreet\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nORDER BY T2.`FRPM Count (K-12)` DESC\nLIMIT 1",
  "SELECT T1.Phone\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.`Charter School (Y/N)` = 1\n  AND T1.FundingType = 'Directly funded'\n  AND T1.OpenDate > '2000-01-01'",
  "SELECT COUNT(*)\nFROM schools s\nJOIN satscores sa ON s.CDSCode = sa.cds\nWHERE s.Virtual = 'F' AND sa.AvgScrMath > 400",
  "SELECT T1.School \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode  =  T2.cds \nWHERE T2.NumTstTakr  >  500 \nAND T1.Magnet = 1;",
  "SELECT T2.Phone \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds  =  T2.CDSCode \nORDER BY T1.NumGE1500 DESC \nLIMIT 1;",
  "SELECT T2.NumTstTakr\nFROM frpm AS T1\nJOIN satscores AS T2\nON T1.`CDSCode` = T2.cds\nORDER BY T1.`FRPM Count (K-12)` DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T2.AvgScrMath > 560\nAND T1.FundingType = 'Directly funded'",
  "SELECT T1.`FRPM Count (Ages 5-17)`\nFROM frpm AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nORDER BY T2.AvgScrRead DESC\nLIMIT 1;",
  "SELECT CDSCode \nFROM frpm \nWHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500",
  "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS MaxEligibleFreeRate\nFROM satscores AS T1\nJOIN frpm AS T2\nON T1.cds = T2.CDSCode\nWHERE CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr > 0.3;",
  "SELECT s.Phone\nFROM schools s\nJOIN satscores sa ON s.CDSCode = sa.cds\nORDER BY CAST(sa.NumGE1500 AS REAL) / sa.NumTstTakr DESC\nLIMIT 3",
  "SELECT T1.NCESSchool\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nORDER BY T2.`Enrollment (Ages 5-17)` DESC\nLIMIT 5",
  "SELECT T1.District \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode  =  T2.cds \nWHERE T1.StatusType  =  'Active' \nORDER BY T2.AvgScrRead DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.StatusType = 'Merged'\n  AND schools.County = 'Alameda'\n  AND satscores.NumTstTakr < 100;",
  "SELECT T2.CharterNum\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nWHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL\nORDER BY T1.AvgScrWrite DESC",
  "SELECT COUNT(*)\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.County = 'Fresno'\n  AND schools.FundingType = 'Directly funded'\n  AND satscores.NumTstTakr <= 250;",
  "SELECT T1.Phone \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode  =  T2.cds \nORDER BY T2.AvgScrMath DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nWHERE schools.County = 'Amador'\n  AND frpm.`Low Grade` = '9'\n  AND frpm.`High Grade` = '12';",
  "SELECT COUNT(*)\nFROM frpm\nWHERE `County Name` = 'Los Angeles'\n  AND `Free Meal Count (K-12)` > 500\n  AND `FRPM Count (K-12)` < 700;",
  "SELECT sname\nFROM satscores\nWHERE cname = 'Contra Costa'\nORDER BY NumTstTakr DESC\nLIMIT 1;",
  "SELECT T1.School, T1.Street\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
  "SELECT T1.`School Name`\nFROM frpm AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1\n  AND T2.NumGE1500 > 0;",
  "SELECT T1.School, T1.FundingType\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T2.cname = 'Riverside' AND T2.AvgScrMath > 400",
  "SELECT T1.School, T1.Street, T1.City, T1.State, T1.Zip\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.County = 'Monterey'\n  AND T2.`School Type` = 'High Schools (Public)'\n  AND T2.`FRPM Count (Ages 5-17)` > 800",
  "SELECT T1.AvgScrWrite, T1.sname, T2.Phone\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nWHERE T2.OpenDate > '1991-01-01' OR T2.ClosedDate < '2000-01-01'",
  "SELECT \n    s.School, \n    s.DOCType \nFROM \n    frpm f\nJOIN \n    schools s \nON \n    f.`CDSCode` = s.CDSCode\nWHERE \n    (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > (\n        SELECT \n            AVG(f2.`Enrollment (K-12)` - f2.`Enrollment (Ages 5-17)`) \n        FROM \n            frpm f2\n        JOIN \n            schools s2 \n        ON \n            f2.`CDSCode` = s2.CDSCode\n        WHERE \n            s2.FundingType = 'Locally funded'\n    )\n    AND s.FundingType = 'Locally funded';",
  "SELECT T1.OpenDate \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode  =  T2.CDSCode \nWHERE T1.GSoffered  =  'K-12' \nORDER BY T2.`Enrollment (K-12)` DESC \nLIMIT 1",
  "SELECT T1.City\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nORDER BY T2.`Enrollment (K-12)` ASC\nLIMIT 5",
  "SELECT \n  `Free Meal Count (K-12)` / `Enrollment (K-12)` AS EligibleFreeRate\nFROM \n  frpm\nORDER BY \n  `Enrollment (K-12)` DESC\nLIMIT 9, 2;",
  "SELECT CAST(f.\"FRPM Count (K-12)\" AS REAL) / f.\"Enrollment (K-12)\" AS EligibleFreeOrReducedPriceMealRate\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.SOC = '66'\nORDER BY f.\"FRPM Count (K-12)\" DESC\nLIMIT 5;",
  "SELECT T1.Website, T1.School \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode  =  T2.CDSCode \nWHERE T2.`FRPM Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
  "SELECT CAST(f.`Free Meal Count (Ages 5-17)` AS REAL) / f.`Enrollment (Ages 5-17)` AS FreeRate\nFROM frpm f\nJOIN schools s ON f.`CDSCode` = s.CDSCode\nWHERE s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson';",
  "SELECT T2.AdmEmail1\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.CDSCode\nWHERE T1.`Charter School (Y/N)` = 1\nORDER BY T1.`Enrollment (K-12)` ASC\nLIMIT 1",
  "SELECT T1.AdmFName1, T1.AdmLName1\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nORDER BY T2.NumGE1500 DESC\nLIMIT 1",
  "SELECT T2.Street, T2.City, T2.Zip, T2.State\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr\nLIMIT 1",
  "SELECT T1.Website\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T2.cname = 'Los Angeles'\n  AND T2.NumTstTakr BETWEEN 2000 AND 3000;",
  "SELECT AVG(T1.NumTstTakr) \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T2.County = 'Fresno' \n  AND STRFTIME('%Y', T2.OpenDate) = '1980'",
  "SELECT T2.Phone \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T1.dname = \"Fresno Unified\" \nORDER BY T1.AvgScrRead ASC \nLIMIT 1;",
  "WITH RankedSchools AS (\n    SELECT \n        s.School,\n        s.County,\n        ss.AvgScrRead,\n        ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank\n    FROM \n        schools s\n    JOIN \n        satscores ss ON s.CDSCode = ss.cds\n    WHERE \n        s.Virtual = 'F'\n)\nSELECT \n    School\nFROM \n    RankedSchools\nWHERE \n    rank <= 5;",
  "SELECT T2.EdOpsName\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY T1.AvgScrMath DESC\nLIMIT 1",
  "SELECT T1.AvgScrMath, T2.County\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite\nLIMIT 1",
  "SELECT T1.AvgScrWrite, T2.City\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY T1.NumGE1500 DESC\nLIMIT 1",
  "SELECT T1.School, T2.AvgScrWrite\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich'",
  "SELECT T1.School \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode  =  T2.CDSCode \nWHERE T1.DOC = '31' \nORDER BY T2.`Enrollment (K-12)` DESC \nLIMIT 1;",
  "SELECT CAST(COUNT(*) AS REAL) / 12 \nFROM schools \nWHERE County = 'Alameda' \n  AND DOC = '52' \n  AND strftime('%Y', OpenDate) = '1980'",
  "SELECT CAST(\n  SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS REAL\n) /\nSUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS ratio\nFROM schools\nWHERE StatusType = 'Merged'\n  AND County = 'Orange';",
  "SELECT County, School, ClosedDate\nFROM schools\nWHERE StatusType = 'Closed'\nAND County = (\n    SELECT County\n    FROM schools\n    WHERE StatusType = 'Closed'\n    GROUP BY County\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
  "SELECT T1.Street, T2.sname\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nORDER BY T2.AvgScrMath DESC\nLIMIT 6, 1",
  "SELECT T1.MailStreet, T1.School \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T2.AvgScrRead \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nWHERE (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500\n  AND T2.MailCity = 'Lakeport';",
  "SELECT SUM(T1.NumTstTakr) \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T2.MailCity = 'Fresno';",
  "SELECT School, MailZip\nFROM schools\nWHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
  "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) /\n       SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) AS Ratio\nFROM schools\nWHERE MailState = 'CA';",
  "SELECT COUNT(*)\nFROM schools\nWHERE MailState = 'CA' AND StatusType = 'Active' AND City = 'San Joaquin'",
  "SELECT T1.Phone, T1.Ext\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nORDER BY T2.AvgScrWrite DESC\nLIMIT 1 OFFSET 332",
  "SELECT Phone, Ext, School \nFROM schools \nWHERE Zip = '95203-3704'",
  "SELECT Website\nFROM schools\nWHERE (AdmFName1 = \"Mike\" AND AdmLName1 = \"Larson\")\n   OR (AdmFName1 = \"Dante\" AND AdmLName1 = \"Alvarez\")",
  "SELECT Website \nFROM schools \nWHERE County = 'San Joaquin' \n  AND Charter = 1 \n  AND Virtual = 'P'",
  "SELECT COUNT(*) \nFROM schools \nWHERE City = 'Hickman' \n  AND Charter = 1 \n  AND DOC = 52;",
  "SELECT COUNT(*)\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.Charter = 0\n  AND T2.`County Name` = 'Los Angeles'\n  AND (T2.`Free Meal Count (K-12)` * 100.0 / T2.`Enrollment (K-12)`) < 0.18;",
  "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3, School, City \nFROM schools \nWHERE Charter = 1 AND CharterNum = '00D2'",
  "SELECT COUNT(*) \nFROM schools \nWHERE MailCity = 'Hickman' \n  AND CharterNum = '00D4'",
  "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM schools \nWHERE County = 'Santa Clara';",
  "SELECT COUNT(*) \nFROM schools \nWHERE FundingType = 'Directly funded' \n  AND County = 'Stanislaus' \n  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';",
  "SELECT COUNT(*)\nFROM schools\nWHERE ClosedDate LIKE '1989-%'\n  AND City = 'San Francisco'\n  AND DOCType = 'Community College District';",
  "SELECT County \nFROM schools \nWHERE SOC = 11 \n  AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' \nGROUP BY County \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT NCESDist \nFROM schools \nWHERE SOC = 31",
  "SELECT COUNT(*)\nFROM schools\nWHERE StatusType IN ('Active', 'Closed')\n  AND SOCType = 'District Community Day Schools'\n  AND County = 'Alpine';",
  "SELECT DOC \nFROM schools \nWHERE City = 'Fresno' \n  AND Magnet = 0",
  "SELECT T1.`Enrollment (Ages 5-17)`\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.`Academic Year` = '2014-2015'\n  AND T2.City = 'Fremont'\n  AND T2.EdOpsCode = 'SSS';",
  "SELECT T1.`FRPM Count (Ages 5-17)`\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.EdOpsName = 'Youth Authority School'\n  AND T2.MailStrAbr = 'PO Box 1040';",
  "SELECT T1.`Low Grade`\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.EdOpsCode = 'SPECON' AND T2.NCESDist = '0613360'",
  "SELECT T2.EILName, T1.`School Name`\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.CDSCode\nWHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' \n  AND T1.`County Code` = '37';",
  "SELECT T1.City \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode  =  T2.CDSCode \nWHERE T2.`NSLP Provision Status` = 'Lunch Provision 2' \n  AND T2.`Low Grade` = '9' \n  AND T2.`High Grade` = '12' \n  AND T1.County = 'Merced' \n  AND T1.EILCode = 'HS';",
  "SELECT \n    s.School, \n    CAST(f.`FRPM Count (Ages 5-17)` AS REAL) * 100 / f.`Enrollment (Ages 5-17)` AS Percent_Eligible_FRPM\nFROM \n    schools s\nJOIN \n    frpm f \nON \n    s.CDSCode = f.CDSCode\nWHERE \n    s.County = 'Los Angeles' \n    AND s.GSserved = 'K-9';",
  "SELECT GSserved\nFROM schools\nWHERE City = 'Adelanto'\nGROUP BY GSserved\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT County, COUNT(*) as SchoolCount\nFROM schools\nWHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F'\nGROUP BY County\nORDER BY SchoolCount DESC\nLIMIT 1;",
  "SELECT T2.`School Type`, T1.School, T1.Latitude\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nORDER BY T1.Latitude DESC\nLIMIT 1",
  "SELECT T1.City, T2.`Low Grade`, T2.`School Name`\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.State = 'CA'\nORDER BY T1.Latitude ASC\nLIMIT 1;",
  "SELECT GSoffered \nFROM schools \nORDER BY ABS(Longitude) DESC \nLIMIT 1",
  "SELECT s.City, COUNT(*)\nFROM schools s\nJOIN frpm f\nON s.CDSCode = f.CDSCode\nWHERE s.GSserved = 'K-8'\n  AND f.`NSLP Provision Status` = 'Multiple Provision Types'\n  AND s.Magnet = 1\nGROUP BY s.City",
  "SELECT AdmFName1, District\nFROM schools\nWHERE AdmFName1 IS NOT NULL\nGROUP BY AdmFName1\nORDER BY COUNT(AdmFName1) DESC\nLIMIT 2;",
  "SELECT \n    T1.`Percent (%) Eligible Free (K-12)`, \n    T1.`District Code` \nFROM \n    frpm AS T1 \nJOIN \n    schools AS T2 \nON \n    T1.CDSCode = T2.CDSCode \nWHERE \n    T2.AdmFName1 = 'Alusine'",
  "SELECT AdmLName1, District, County, School \nFROM schools \nWHERE CharterNum = '40';",
  "SELECT AdmEmail1, AdmEmail2, AdmEmail3 \nFROM schools \nWHERE County = 'San Bernardino' \n  AND District = 'San Bernardino City Unified' \n  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' \n  AND SOC = '62' \n  AND DOC = '54';",
  "SELECT T2.AdmEmail1, T2.School \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nORDER BY T1.NumGE1500 DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east Bohemia'",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A3 = 'Prague'",
  "SELECT \n  CASE \n    WHEN AVG(A12) > AVG(A13) THEN 'A12'\n    ELSE 'A13'\n  END AS higher_unemployment_rate\nFROM \n  district;",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'F'\nAND T2.A11 > 6000\nAND T2.A11 < 10000;",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M'\nAND T2.A3 = 'north Bohemia'\nAND T2.A11 > 8000;",
  "SELECT \n  T2.account_id, \n  (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district AS T3 \n                                      INNER JOIN client AS T4 \n                                      ON T3.district_id = T4.district_id \n                                      WHERE T4.gender = 'F') AS gap\nFROM \n  district AS T1 \n  INNER JOIN account AS T2 \n  ON T1.district_id = T2.district_id \n  INNER JOIN client AS T5 \n  ON T1.district_id = T5.district_id \nWHERE \n  T5.gender = 'F' \nORDER BY \n  T5.birth_date ASC, T1.A11 ASC \nLIMIT 1;",
  "SELECT T3.account_id\nFROM client AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nJOIN disp AS T3 ON T1.client_id = T3.client_id\nORDER BY T1.birth_date DESC, T2.A11 DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN disp AS T2\nON T1.account_id = T2.account_id\nWHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER';",
  "SELECT T2.client_id\nFROM account AS T1\nJOIN disp AS T2\nON T1.account_id = T2.account_id\nWHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
  "SELECT a.account_id\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.status = 'A'\n  AND l.date LIKE '1997-%'\n  AND a.frequency = 'POPLATEK TYDNE'\nORDER BY l.amount ASC\nLIMIT 1",
  "SELECT T1.account_id\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id  =  T2.account_id\nWHERE T1.duration  >  12\nAND T2.date LIKE '1993%'\nORDER BY T1.amount DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'F'\nAND T1.birth_date < '1950-01-01'\nAND T2.A2 = 'Sokolov';",
  "SELECT account_id \nFROM trans \nWHERE date BETWEEN '1995-01-01' AND '1995-12-31' \nORDER BY date ASC \nLIMIT 1",
  "SELECT DISTINCT T1.account_id\nFROM account AS T1\nJOIN trans AS T2\nON T1.account_id = T2.account_id\nWHERE T1.date < '1997-01-01' AND T2.amount > 3000",
  "SELECT T1.client_id \nFROM client AS T1 \nJOIN disp AS T2 ON T1.client_id = T2.client_id \nJOIN card AS T3 ON T2.disp_id = T3.disp_id \nWHERE T3.issued = '1994-03-03'",
  "SELECT T1.date\nFROM account AS T1\nJOIN trans AS T2\nON T1.account_id  =  T2.account_id\nWHERE T2.amount = 840 AND T2.date = '1998-10-14'",
  "SELECT T2.district_id\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T1.date = '1994-08-25'",
  "SELECT MAX(t.amount)\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE c.issued = '1996-10-21'",
  "SELECT c.gender\nFROM client c\nJOIN account a ON c.district_id = a.district_id\nJOIN district d ON c.district_id = d.district_id\nORDER BY d.A11 DESC, c.birth_date ASC\nLIMIT 1",
  "SELECT t.amount\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nJOIN trans t ON a.account_id = t.account_id\nORDER BY l.amount DESC, t.date ASC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Jesenik' AND T1.gender = 'F'",
  "SELECT T1.disp_id \nFROM disp AS T1 \nJOIN trans AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.amount = 5100 \nAND T2.date = '1998-09-02'",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Litomerice'\nAND T1.date LIKE '1996%'",
  "SELECT T2.A2 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id  =  T2.district_id \nWHERE T1.gender  =  'F' \nAND T1.birth_date  =  '1976-01-29'",
  "SELECT T1.birth_date \nFROM client AS T1 \nJOIN disp AS T2 ON T1.client_id = T2.client_id \nJOIN account AS T3 ON T2.account_id = T3.account_id \nJOIN loan AS T4 ON T3.account_id = T4.account_id \nWHERE T4.amount = 98832 AND T4.date = '1996-01-03'",
  "SELECT T1.account_id \nFROM account AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T2.A3 = 'Prague' \nORDER BY T1.date \nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE d.A3 = 'south Bohemia'\nORDER BY d.A4 DESC\nLIMIT 1",
  "SELECT \n  CAST((t2.balance - t1.balance) AS REAL) * 100 / t1.balance AS increase_rate\nFROM \n  trans t1\nJOIN \n  trans t2 ON t1.account_id = t2.account_id\nJOIN \n  loan l ON t1.account_id = l.account_id\nWHERE \n  l.date = '1993-07-05'\n  AND t1.date = '1993-03-22'\n  AND t2.date = '1998-12-27';",
  "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) \nFROM loan",
  "SELECT \n  CAST(SUM(CASE WHEN status = 'C' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) \nFROM \n  loan \nWHERE \n  amount < 100000;",
  "SELECT T1.account_id, T2.A2, T2.A3\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.frequency = 'POPLATEK PO OBRATU' AND T1.date LIKE '1993%'",
  "SELECT T1.account_id, T1.frequency\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A3 = 'east Bohemia'\nAND T1.date BETWEEN '1995-01-01' AND '2000-12-31'",
  "SELECT account.account_id, account.date\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Prachatice'",
  "SELECT T2.A2, T2.A3 \nFROM loan AS T1 \nJOIN account AS T3 ON T1.account_id = T3.account_id \nJOIN district AS T2 ON T3.district_id = T2.district_id \nWHERE T1.loan_id = 4990;",
  "SELECT T1.account_id, T3.A2, T3.A3\nFROM loan AS T1\nJOIN account AS T2 ON T1.account_id = T2.account_id\nJOIN district AS T3 ON T2.district_id = T3.district_id\nWHERE T1.amount > 300000",
  "SELECT \n    l.loan_id, \n    d.A3, \n    d.A11 \nFROM \n    loan l \nJOIN \n    account a \nON \n    l.account_id = a.account_id \nJOIN \n    district d \nON \n    a.district_id = d.district_id \nWHERE \n    l.duration = 60;",
  "SELECT \n    d.A2, \n    CAST((d.A13 - d.A12) AS REAL) * 100 / d.A12 AS unemployment_increment_rate\nFROM \n    district d\nJOIN \n    account a ON d.district_id = a.district_id\nJOIN \n    loan l ON a.account_id = l.account_id\nWHERE \n    l.status = 'D';",
  "SELECT CAST(SUM(CASE WHEN d.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE STRFTIME('%Y', a.date) = '1993'",
  "SELECT account_id \nFROM account \nWHERE frequency = 'POPLATEK MESICNE'",
  "SELECT T2.A2 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.gender = 'F' \nGROUP BY T2.A2 \nORDER BY COUNT(T1.client_id) DESC \nLIMIT 9;",
  "SELECT T2.A2\nFROM trans AS T1\nJOIN account AS T3 ON T1.account_id = T3.account_id\nJOIN district AS T2 ON T3.district_id = T2.district_id\nWHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%'\nORDER BY T1.amount DESC\nLIMIT 10;",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nJOIN disp AS T3 ON T1.account_id = T3.account_id\nLEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id\nWHERE T2.A3 = 'south Bohemia' AND T4.card_id IS NULL",
  "SELECT T2.A3 \nFROM loan AS T1 \nJOIN account AS T3 ON T1.account_id  =  T3.account_id \nJOIN district AS T2 ON T3.district_id  =  T2.district_id \nWHERE T1.status  =  'C' OR T1.status  =  'D' \nGROUP BY T2.A3 \nORDER BY COUNT(*) DESC \nLIMIT 1",
  "SELECT AVG(loan.amount) \nFROM loan \nJOIN account ON loan.account_id = account.account_id \nJOIN disp ON account.account_id = disp.account_id \nJOIN client ON disp.client_id = client.client_id \nWHERE client.gender = 'M'",
  "SELECT district_id, A2 \nFROM district \nORDER BY A13 DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A16 = (\n    SELECT MAX(A16)\n    FROM district\n)",
  "SELECT COUNT(*) \nFROM trans AS T1 \nJOIN account AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.balance < 0 \n  AND T1.operation = 'VYBER KARTOU' \n  AND T2.frequency = 'POPLATEK MESICNE';",
  "SELECT COUNT(*)\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.amount >= 250000\n  AND a.frequency = 'POPLATEK MESICNE'\n  AND l.status = 'A'\n  AND l.date BETWEEN '1995-01-01' AND '1997-12-31';",
  "SELECT COUNT(*)\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T2.district_id = 1\nAND (T1.status = 'C' OR T1.status = 'D')",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M'\nAND T2.district_id = (\n  SELECT district_id\n  FROM district\n  ORDER BY A15 DESC\n  LIMIT 1 OFFSET 1\n)",
  "SELECT COUNT(*)\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';",
  "SELECT COUNT(*)\nFROM district\nJOIN account ON district.district_id = account.district_id\nWHERE district.A2 = 'Pisek'",
  "SELECT DISTINCT d.A2\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE t.amount > 10000\nAND t.date LIKE '1997%'",
  "SELECT T1.account_id \nFROM `order` AS T1 \nJOIN account AS T2 \nON T1.account_id = T2.account_id \nJOIN district AS T3 \nON T2.district_id = T3.district_id \nWHERE T1.k_symbol = 'SIPO' \nAND T3.A2 = 'Pisek'",
  "SELECT T2.account_id\nFROM card AS T1\nJOIN disp AS T2\nON T1.disp_id = T2.disp_id\nWHERE T1.type = 'gold'",
  "SELECT AVG(amount) \nFROM trans \nWHERE operation = 'VYBER KARTOU' \n  AND date BETWEEN '2021-01-01' AND '2021-12-31';",
  "SELECT DISTINCT account_id\nFROM trans\nWHERE operation = 'VYBER KARTOU'\n  AND date LIKE '1998%'\n  AND amount < (\n    SELECT AVG(amount)\n    FROM trans\n    WHERE date LIKE '1998%'\n  )",
  "SELECT DISTINCT client.client_id\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN card ON disp.disp_id = card.disp_id\nJOIN loan ON disp.account_id = loan.account_id\nWHERE client.gender = 'F' AND disp.type = 'OWNER';",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
  "SELECT T1.account_id\nFROM account AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nJOIN disp AS T3 ON T1.account_id = T3.account_id\nWHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'",
  "SELECT disp.type\nFROM disp\nJOIN account ON disp.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE disp.type <> 'OWNER'\n  AND district.A11 > 8000\n  AND district.A11 <= 9000;",
  "SELECT COUNT(*)\nFROM district AS T1\nJOIN account AS T2 ON T1.district_id = T2.district_id\nJOIN trans AS T3 ON T2.account_id = T3.account_id\nWHERE T1.A3 = 'north Bohemia' AND T3.bank = 'AB'",
  "SELECT DISTINCT T1.A2\nFROM district AS T1\nJOIN account AS T2 ON T1.district_id = T2.district_id\nJOIN trans AS T3 ON T2.account_id = T3.account_id\nWHERE T3.type = 'VYDAJ'",
  "SELECT AVG(d.A15) \nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE d.A15 > 4000 AND a.date >= '1997-01-01'",
  "SELECT COUNT(*)\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'classic' AND disp.type = 'OWNER'",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
  "SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM card;",
  "SELECT T2.client_id\nFROM loan AS T1\nJOIN account AS T3 ON T1.account_id = T3.account_id\nJOIN disp AS T2 ON T3.account_id = T2.account_id\nWHERE T2.type = 'OWNER'\nORDER BY T1.amount DESC\nLIMIT 1",
  "SELECT T2.A15 \nFROM account AS T1 \nJOIN district AS T2 \nON T1.district_id  =  T2.district_id \nWHERE T1.account_id = 532",
  "SELECT T1.district_id \nFROM account AS T1 \nJOIN `order` AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.order_id = 33333;",
  "SELECT T1.amount \nFROM trans AS T1 \nJOIN disp AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.client_id = 3356 \nAND T1.operation = 'VYBER'",
  "SELECT COUNT(*)\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
  "SELECT T2.type \nFROM disp AS T1 \nJOIN card AS T2 \nON T1.disp_id  =  T2.disp_id \nWHERE T1.client_id = 13539;",
  "SELECT T2.A3 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id  =  T2.district_id \nWHERE T1.client_id = 3541;",
  "SELECT T1.A2\nFROM district AS T1\nJOIN account AS T2 ON T1.district_id = T2.district_id\nJOIN loan AS T3 ON T2.account_id = T3.account_id\nWHERE T3.status = 'A'\nGROUP BY T1.A2\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT T3.client_id\nFROM `order` AS T1\nJOIN disp AS T3 ON T1.account_id = T3.account_id\nWHERE T1.order_id = 32423;",
  "SELECT T1.*\nFROM trans AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T2.district_id = 5",
  "SELECT COUNT(*)\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Jesenik'",
  "SELECT T2.client_id\nFROM card AS T1\nJOIN disp AS T2 ON T1.disp_id = T2.disp_id\nWHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
  "SELECT CAST(SUM(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client \nJOIN district \nON client.district_id = district.district_id \nWHERE district.A11 > 10000;",
  "SELECT \n    CAST(SUM(CASE WHEN l.date LIKE '1997%' THEN l.amount ELSE 0 END) - \n         SUM(CASE WHEN l.date LIKE '1996%' THEN l.amount ELSE 0 END) AS REAL) * 100 / \n    SUM(CASE WHEN l.date LIKE '1996%' THEN l.amount ELSE 0 END) AS growth_rate\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    disp d ON a.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nWHERE \n    c.gender = 'M';",
  "SELECT COUNT(*) \nFROM trans \nWHERE date > '1995-12-31' AND operation = 'VYBER KARTOU'",
  "SELECT \n  SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - \n  SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END) AS crime_difference\nFROM \n  district;",
  "SELECT count(*)\nFROM disp\nWHERE account_id BETWEEN 1 AND 10\nAND (type = 'OWNER' OR type = 'DISPONENT')",
  "SELECT k_symbol \nFROM `order` \nWHERE account_id = 3 \n  AND amount = 3539;",
  "SELECT STRFTIME('%Y', client.birth_date) \nFROM client \nJOIN disp \nON client.client_id = disp.client_id \nWHERE disp.account_id = 130 \nAND disp.type = 'OWNER';",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN disp AS T2\nON T1.account_id = T2.account_id\nWHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
  "SELECT loan.amount, loan.status \nFROM loan \nJOIN account ON loan.account_id = account.account_id \nJOIN disp ON account.account_id = disp.account_id \nJOIN client ON disp.client_id = client.client_id \nWHERE client.client_id = 992;",
  "SELECT t.balance, c.gender\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.client_id = 4 AND t.trans_id = 851",
  "SELECT T2.type \nFROM disp AS T1 \nJOIN card AS T2 \nON T1.disp_id  =  T2.disp_id \nWHERE T1.client_id = 9",
  "SELECT SUM(t.amount)\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE c.client_id = 617\n  AND STRFTIME('%Y', t.date) = '1998';",
  "SELECT client.client_id \nFROM client \nJOIN district \nON client.district_id = district.district_id \nWHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' \nAND district.A3 = 'east Bohemia';",
  "SELECT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.gender = 'F'\nORDER BY l.amount DESC\nLIMIT 3",
  "SELECT COUNT(*)\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN trans ON disp.account_id = trans.account_id\nWHERE client.gender = 'M'\n  AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31'\n  AND trans.k_symbol = 'SIPO'\n  AND trans.amount > 4000;",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'",
  "SELECT COUNT(*)\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN card ON disp.disp_id = card.disp_id\nWHERE client.gender = 'F' AND card.type = 'junior'",
  "SELECT CAST(SUM(CASE WHEN c.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE d.A3 = 'Prague';",
  "SELECT CAST(SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE a.frequency = 'POPLATEK TYDNE';",
  "SELECT COUNT(*)\nFROM account\nJOIN disp ON account.account_id = disp.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
  "SELECT T1.account_id \nFROM loan AS T1 \nJOIN account AS T2 \nON T1.account_id  =  T2.account_id \nWHERE T1.duration  >  24 \nAND T2.date  <  '1997-01-01' \nORDER BY T1.amount \nLIMIT 1",
  "SELECT T3.account_id\nFROM client AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nJOIN account AS T3 ON T2.district_id = T3.district_id\nWHERE T1.gender = 'F'\nORDER BY T1.birth_date ASC, T2.A11 ASC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.birth_date LIKE '1920%' AND T2.A3 = 'east Bohemia'",
  "SELECT COUNT(*)\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T1.duration = 24\nAND T2.frequency = 'POPLATEK TYDNE'",
  "SELECT AVG(loan.amount) \nFROM loan \nJOIN account \nON loan.account_id = account.account_id \nWHERE loan.status = 'C' \nAND account.frequency = 'POPLATEK PO OBRATU';",
  "SELECT T1.client_id, T1.district_id \nFROM client AS T1 \nJOIN disp AS T2 \nON T1.client_id = T2.client_id \nWHERE T2.type = 'OWNER'",
  "SELECT \n  client.client_id, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', client.birth_date) AS age\nFROM \n  client\nJOIN \n  disp ON client.client_id = disp.client_id\nJOIN \n  card ON disp.disp_id = card.disp_id\nWHERE \n  card.type = 'gold' \n  AND disp.type = 'OWNER'",
  "SELECT bond_type\nFROM bond\nGROUP BY bond_type\nORDER BY COUNT(bond_type) DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM molecule AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.label = '-' AND T2.element = 'cl'",
  "SELECT CAST(SUM(CASE WHEN a.element = 'o' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT a.molecule_id) AS average_oxygen_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE b.bond_type = '-';",
  "SELECT CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) \nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+'",
  "SELECT COUNT(*)\nFROM molecule AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.element = 'na' AND T1.label = '-';",
  "SELECT molecule.molecule_id\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = '#' AND molecule.label = '+'",
  "SELECT CAST(SUM(IIF(T1.element = 'c', 1, 0)) AS REAL) * 100 / COUNT(*) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.bond_type = '='",
  "SELECT COUNT(*) \nFROM bond \nWHERE bond_type = '#'",
  "SELECT COUNT(*) \nFROM atom \nWHERE element != 'br'",
  "SELECT COUNT(*)\nFROM molecule\nWHERE molecule_id BETWEEN 'TR000' AND 'TR099'\nAND label = '+'",
  "SELECT molecule_id \nFROM atom \nWHERE element = 'c'",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T2.bond_id  =  'TR004_8_9'",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nJOIN bond AS T3 \nON T2.bond_id  =  T3.bond_id \nWHERE T3.bond_type  =  '='",
  "SELECT T2.label\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.element = 'h'\nGROUP BY T2.label\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT DISTINCT T3.bond_type \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nJOIN bond AS T3 \nON T2.bond_id  =  T3.bond_id \nWHERE T1.element  =  'cl'",
  "SELECT T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.bond_type = '-';",
  "SELECT T1.atom_id, T1.atom_id2\nFROM connected AS T1\nJOIN atom AS T2 ON T1.atom_id = T2.atom_id\nJOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id\nWHERE T3.label = '-';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T2.label  =  '-' \nGROUP BY T1.element \nORDER BY COUNT(T1.element) ASC \nLIMIT 1;",
  "SELECT T2.bond_type \nFROM connected AS T1 \nJOIN bond AS T2 \nON T1.bond_id  =  T2.bond_id \nWHERE (T1.atom_id  =  'TR004_8' AND T1.atom_id2  =  'TR004_20') \n   OR (T1.atom_id  =  'TR004_20' AND T1.atom_id2  =  'TR004_8')",
  "SELECT DISTINCT m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element != 'sn'",
  "SELECT COUNT(DISTINCT T1.atom_id)\nFROM atom AS T1\nJOIN bond AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE (T1.element = 'i' OR T1.element = 's')\nAND T2.bond_type = '-';",
  "SELECT T1.atom_id, T1.atom_id2\nFROM connected AS T1\nJOIN bond AS T2\nON T1.bond_id = T2.bond_id\nWHERE T2.bond_type = '#'",
  "SELECT T2.atom_id2 \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T1.molecule_id  =  'TR181'",
  "SELECT CAST(SUM(CASE WHEN a.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT a.molecule_id)\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+';",
  "SELECT CAST(SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(b.bond_id) AS percent\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+';",
  "SELECT element\nFROM atom\nWHERE molecule_id = 'TR000'\nORDER BY element ASC\nLIMIT 3",
  "SELECT atom_id, atom_id2\nFROM connected\nWHERE bond_id = 'TR001_2_6';",
  "SELECT \n  SUM(IIF(label = '+', 1, 0)) - SUM(IIF(label = '-', 1, 0)) AS difference\nFROM \n  molecule",
  "SELECT atom_id, atom_id2\nFROM connected\nWHERE bond_id = 'TR000_2_5'",
  "SELECT bond_id \nFROM connected \nWHERE atom_id2 = 'TR000_2'",
  "SELECT molecule_id \nFROM bond \nWHERE bond_type = '=' \nORDER BY molecule_id \nLIMIT 5",
  "SELECT \n  ROUND(CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(bond_id), 5) AS percentage\nFROM \n  bond\nWHERE \n  molecule_id = 'TR008'",
  "SELECT ROUND(CAST(SUM(IIF(label = '+', 1, 0)) AS REAL) * 100 / COUNT(*), 3) AS percent\nFROM molecule;",
  "SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) \nFROM atom \nWHERE molecule_id = 'TR206';",
  "SELECT bond_type \nFROM bond \nWHERE molecule_id = 'TR000'",
  "SELECT atom.element, molecule.label \nFROM atom \nJOIN molecule \nON atom.molecule_id = molecule.molecule_id \nWHERE molecule.molecule_id = 'TR060'",
  "SELECT T1.bond_type, T2.label\nFROM bond AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.molecule_id = 'TR010'\nGROUP BY T1.bond_type\nORDER BY COUNT(T1.bond_type) DESC\nLIMIT 1;",
  "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '-' AND m.label = '-'\nORDER BY m.molecule_id\nLIMIT 3",
  "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2",
  "SELECT COUNT(*)\nFROM connected\nWHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12');",
  "SELECT COUNT(*)\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.label = '+' AND atom.element = 'br'",
  "SELECT T1.bond_type, T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.bond_id = 'TR001_6_9'",
  "SELECT molecule.molecule_id, molecule.label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE atom.atom_id = 'TR001_10'",
  "SELECT COUNT(DISTINCT molecule_id) \nFROM bond \nWHERE bond_type = '#'",
  "SELECT COUNT(*)\nFROM connected\nWHERE atom_id LIKE 'TR%_19'",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR004'",
  "SELECT COUNT(*)\nFROM molecule\nWHERE label = '-';",
  "SELECT DISTINCT T2.molecule_id\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25'\nAND T2.label = '+'",
  "SELECT DISTINCT c.bond_id\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'p' AND a2.element = 'n')\n   OR (a1.element = 'n' AND a2.element = 'p')",
  "SELECT T2.label\nFROM bond AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.bond_type = '='\nGROUP BY T1.molecule_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT CAST(COUNT(c.bond_id) AS REAL) / COUNT(DISTINCT a.atom_id) AS average_bonds\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE a.element = 'i';",
  "SELECT T3.bond_type, T2.bond_id\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2.atom_id\nJOIN bond AS T3 ON T2.bond_id = T3.bond_id\nWHERE SUBSTR(T1.atom_id, 7, 2) = '45'",
  "SELECT element \nFROM atom \nWHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected)",
  "SELECT T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.molecule_id = 'TR041' AND T1.bond_type = '#'",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR144_8_19'\n\nUNION\n\nSELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id2 \nWHERE T2.bond_id = 'TR144_8_19'",
  "SELECT T1.molecule_id\nFROM molecule AS T1\nJOIN bond AS T2\nON T1.molecule_id  =  T2.molecule_id\nWHERE T1.label  =  '+'\nAND T2.bond_type  =  '='\nGROUP BY T1.molecule_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT T1.element\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.label = '+'\nGROUP BY T1.element\nORDER BY COUNT(*) ASC\nLIMIT 1",
  "SELECT T2.atom_id2\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id\nWHERE T1.element = 'pb'",
  "SELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2.atom_id\nJOIN bond AS T3 ON T2.bond_id = T3.bond_id\nWHERE T3.bond_type = '#'",
  "WITH element_pairs AS (\n    SELECT \n        a1.element AS element1,\n        a2.element AS element2,\n        COUNT(*) AS pair_count\n    FROM \n        connected c\n    JOIN \n        atom a1 ON c.atom_id = a1.atom_id\n    JOIN \n        atom a2 ON c.atom_id2 = a2.atom_id\n    GROUP BY \n        a1.element, a2.element\n),\nmost_common_pair AS (\n    SELECT \n        element1, \n        element2\n    FROM \n        element_pairs\n    ORDER BY \n        pair_count DESC\n    LIMIT 1\n),\nbond_counts AS (\n    SELECT \n        COUNT(*) AS total_bonds\n    FROM \n        bond\n),\ncommon_bonds AS (\n    SELECT \n        COUNT(*) AS common_bond_count\n    FROM \n        connected c\n    JOIN \n        atom a1 ON c.atom_id = a1.atom_id\n    JOIN \n        atom a2 ON c.atom_id2 = a2.atom_id\n    JOIN \n        most_common_pair mcp ON a1.element = mcp.element1 AND a2.element = mcp.element2\n)\nSELECT \n    CAST(common_bonds.common_bond_count AS REAL) * 100 / bond_counts.total_bonds AS percentage\nFROM \n    common_bonds, \n    bond_counts;",
  "SELECT CAST(SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = '-';",
  "SELECT COUNT(*) \nFROM atom \nWHERE element IN ('c', 'h')",
  "SELECT T2.atom_id2 \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T1.element  =  's'",
  "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'sn'",
  "SELECT COUNT(T1.element) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T2.bond_type  =  '-';",
  "SELECT COUNT(*)\nFROM atom AS T1\nJOIN bond AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.bond_type = '#' AND T1.element IN ('p', 'br')",
  "SELECT b.bond_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+'",
  "SELECT DISTINCT T1.molecule_id \nFROM molecule AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T2.bond_type  =  '-' \nAND T1.label  =  '-';",
  "SELECT CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '-';",
  "SELECT label\nFROM molecule\nWHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
  "SELECT molecule_id \nFROM molecule \nWHERE label = '-';",
  "SELECT COUNT(*) \nFROM molecule \nWHERE label = '+' \n  AND molecule_id BETWEEN 'TR000' AND 'TR030'",
  "SELECT bond_type \nFROM bond \nWHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
  "SELECT T2.element \nFROM connected AS T1 \nJOIN atom AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.bond_id = 'TR001_10_11'",
  "SELECT COUNT(T2.bond_id) \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T1.element = 'i'",
  "SELECT T2.label\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.element = 'ca'\nGROUP BY T2.label\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT CASE \n         WHEN a1.element = 'cl' AND a2.element = 'c' THEN 'YES' \n         WHEN a1.element = 'c' AND a2.element = 'cl' THEN 'YES' \n         ELSE 'NO' \n       END AS result\nFROM atom a1\nJOIN connected c ON a1.atom_id = c.atom_id\nJOIN atom a2 ON a2.atom_id = c.atom_id2\nWHERE c.bond_id = 'TR001_1_8';",
  "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '-' AND b.bond_type = '#' AND a.element = 'c'\nLIMIT 2;",
  "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.label = '+'",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR001'",
  "SELECT molecule_id \nFROM bond \nWHERE bond_type = '='",
  "SELECT T1.atom_id, T1.atom_id2\nFROM connected AS T1\nJOIN bond AS T2\nON T1.bond_id = T2.bond_id\nWHERE T2.bond_type = '#'",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T2.bond_id  =  'TR000_1_2'",
  "SELECT COUNT(*)\nFROM molecule AS T1\nJOIN bond AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.bond_type = '-' AND T1.label = '-';",
  "SELECT T2.label\nFROM bond AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.bond_id = 'TR001_10_11'",
  "SELECT bond.bond_id, molecule.label\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = '#'",
  "SELECT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+'\nAND substr(a.atom_id, 7, 1) = '4'",
  "SELECT \n  CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) AS ratio, \n  m.label \nFROM \n  atom a \nJOIN \n  molecule m \nON \n  a.molecule_id = m.molecule_id \nWHERE \n  a.molecule_id = 'TR006';",
  "SELECT DISTINCT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element  =  'ca'",
  "SELECT DISTINCT T2.bond_type \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element  =  'c';",
  "SELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id\nWHERE T2.bond_id = 'TR001_10_11'\n\nUNION\n\nSELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id2\nWHERE T2.bond_id = 'TR001_10_11'",
  "SELECT CAST(SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM bond;",
  "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM bond \nWHERE molecule_id = 'TR047';",
  "SELECT T2.label\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id  =  T2.molecule_id\nWHERE T1.atom_id  =  'TR001_1'",
  "SELECT label \nFROM molecule \nWHERE molecule_id = 'TR151'",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR151'",
  "SELECT COUNT(*)\nFROM molecule\nWHERE label = '+'",
  "SELECT atom_id \nFROM atom \nWHERE CAST(SUBSTR(molecule_id, 3, 3) AS INTEGER) BETWEEN 10 AND 50 \n  AND element = 'c'",
  "SELECT COUNT(*)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+';",
  "SELECT T1.bond_id\nFROM bond AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.label = '+' AND T1.bond_type = '='",
  "SELECT COUNT(*)\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'h' AND m.label = '+';",
  "SELECT T1.molecule_id \nFROM bond AS T1 \nJOIN connected AS T2 \nON T1.bond_id = T2.bond_id \nWHERE T2.bond_id = 'TR000_1_2' \nAND T2.atom_id = 'TR000_1';",
  "SELECT T1.atom_id \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element  =  'c' \nAND T2.label  =  '-';",
  "SELECT CAST(SUM(CASE WHEN m.label = '+' AND a.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*)\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id",
  "SELECT label\nFROM molecule\nWHERE molecule_id = 'TR124'",
  "SELECT atom_id \nFROM atom \nWHERE molecule_id = 'TR186'",
  "SELECT bond_type \nFROM bond \nWHERE bond_id = 'TR007_4_19'",
  "SELECT T2.element \nFROM connected AS T1 \nJOIN atom AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.bond_id = 'TR001_2_4'",
  "SELECT COUNT(*), T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '=' \nAND T2.molecule_id = 'TR006';",
  "SELECT molecule.molecule_id, atom.element \nFROM molecule \nJOIN atom \nON molecule.molecule_id = atom.molecule_id \nWHERE molecule.label = '+'",
  "SELECT T1.bond_id, T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.bond_type = '-';",
  "SELECT DISTINCT T1.molecule_id, T2.element\nFROM bond AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.bond_type = '#'",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR000_2_3'\n\nUNION\n\nSELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id2 \nWHERE T2.bond_id = 'TR000_2_3'",
  "SELECT COUNT(*) \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id  =  T2.atom_id \nWHERE T1.element  =  'cl'",
  "SELECT T1.atom_id, COUNT(T2.bond_type) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.molecule_id = 'TR346' \nGROUP BY T1.atom_id",
  "SELECT \n  COUNT(*) AS total_double_bond_molecules, \n  SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS total_carcinogenic_molecules\nFROM \n  bond AS T1\nJOIN \n  molecule AS T2 \nON \n  T1.molecule_id = T2.molecule_id\nWHERE \n  T1.bond_type = '=';",
  "SELECT COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element != 's' \nAND T2.bond_type != '='",
  "SELECT molecule.label\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_id = 'TR001_2_4'",
  "SELECT COUNT(*) \nFROM atom \nWHERE molecule_id = 'TR001'",
  "SELECT COUNT(*) \nFROM bond \nWHERE bond_type = '-';",
  "SELECT DISTINCT m.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'cl' AND m.label = '+'",
  "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'c' AND m.label = '-';",
  "SELECT CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+';",
  "SELECT molecule_id \nFROM bond \nWHERE bond_id = 'TR001_1_7'",
  "SELECT COUNT(*)\nFROM connected AS T1\nJOIN atom AS T2 ON T1.atom_id = T2.atom_id\nJOIN atom AS T3 ON T1.atom_id2 = T3.atom_id\nWHERE T1.bond_id = 'TR001_3_4';",
  "SELECT T2.bond_type \nFROM connected AS T1 \nJOIN bond AS T2 \nON T1.bond_id  =  T2.bond_id \nWHERE T1.atom_id  =  \"TR000_1\" \nAND T1.atom_id2  =  \"TR000_2\";",
  "SELECT T1.molecule_id \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.atom_id = \"TR000_2\" \nAND T2.atom_id2 = \"TR000_4\";",
  "SELECT element \nFROM atom \nWHERE atom_id = 'TR000_1'",
  "SELECT label \nFROM molecule \nWHERE molecule_id = 'TR000'",
  "SELECT CAST(SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) \nFROM bond",
  "SELECT COUNT(*)\nFROM molecule AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.element = 'n' AND T1.label = '+'",
  "SELECT DISTINCT T1.molecule_id \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element  =  's' \nAND T2.bond_type  =  '='",
  "SELECT T1.molecule_id\nFROM molecule AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.label = '-'\nGROUP BY T1.molecule_id\nHAVING COUNT(T2.atom_id) > 5",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id = 'TR024' \nAND T2.bond_type = '='",
  "SELECT T1.molecule_id \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.label  =  '+' \nGROUP BY T1.molecule_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) \nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN bond b ON b.molecule_id = m.molecule_id\nWHERE a.element = 'h' AND b.bond_type = '#'",
  "SELECT COUNT(*) \nFROM molecule \nWHERE label = '+'",
  "SELECT COUNT(*)\nFROM bond\nWHERE molecule_id BETWEEN 'TR004' AND 'TR010'\n  AND bond_type = '-';",
  "SELECT COUNT(*)\nFROM atom\nWHERE element = 'c' AND molecule_id = 'TR008';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.atom_id  =  'TR004_7' \nAND T2.label  =  '-';",
  "SELECT COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T1.element  =  'o' \nAND T2.bond_type  =  '='",
  "SELECT COUNT(*)\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = '#' AND molecule.label = '-';",
  "SELECT atom.element, bond.bond_type\nFROM atom\nJOIN bond\nON atom.molecule_id = bond.molecule_id\nWHERE atom.molecule_id = 'TR002'",
  "SELECT T1.atom_id\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2.atom_id\nJOIN bond AS T3 ON T2.bond_id = T3.bond_id\nWHERE T1.molecule_id = 'TR012' \n  AND T1.element = 'c' \n  AND T3.bond_type = '='",
  "SELECT T1.atom_id \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id  =  T2.molecule_id \nWHERE T2.label  =  '+' \nAND T1.element  =  'o'",
  "SELECT name \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL",
  "SELECT name \nFROM cards \nWHERE borderColor = 'borderless' \n  AND cardKingdomId IS NULL",
  "SELECT name \nFROM cards \nWHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
  "SELECT name \nFROM cards \nWHERE frameVersion = '2015' \n  AND edhrecRank < 100",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.format = 'gladiator' \n  AND T2.status = 'Banned' \n  AND T1.rarity = 'mythic';",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.types = 'Artifact' \n  AND T1.side IS NULL \n  AND T2.format = 'vintage';",
  "SELECT T1.id, T1.artist\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE (T1.power = '*' OR T1.power IS NULL)\nAND T2.format = 'commander'\nAND T2.status = 'Legal';",
  "SELECT T1.id, T2.text, T1.hasContentWarning\nFROM cards AS T1\nJOIN rulings AS T2\nON T1.uuid = T2.uuid\nWHERE T1.artist = 'Stephen Daniele'",
  "SELECT rulings.text \nFROM cards \nJOIN rulings ON cards.uuid = rulings.uuid \nWHERE cards.name = 'Sublime Epiphany' \n  AND cards.number = '74s';",
  "SELECT \n  cards.name, \n  cards.artist, \n  cards.isPromo \nFROM \n  cards \n  JOIN rulings ON cards.uuid = rulings.uuid \nGROUP BY \n  cards.name, \n  cards.artist, \n  cards.isPromo \nORDER BY \n  COUNT(rulings.uuid) DESC \nLIMIT 1;",
  "SELECT T2.language \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Annul' \nAND T1.number = '29';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.language = 'Japanese'",
  "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM foreign_data;",
  "SELECT T1.name, T1.totalSetSize\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Italian'",
  "SELECT COUNT(DISTINCT types) \nFROM cards \nWHERE artist = 'Aaron Boyd';",
  "SELECT keywords \nFROM cards \nWHERE name = 'Angel of Mercy';",
  "SELECT COUNT(*) \nFROM cards \nWHERE power = '*'",
  "SELECT promoTypes \nFROM cards \nWHERE name = 'Duress';",
  "SELECT borderColor \nFROM cards \nWHERE name = 'Ancestor''s Chosen'",
  "SELECT originalType \nFROM cards \nWHERE name = 'Ancestor''s Chosen'",
  "SELECT T2.`language`\nFROM cards AS T1\nJOIN set_translations AS T2\nON T1.setCode = T2.setCode\nWHERE T1.name = 'Angel of Mercy';",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T2.status = 'Restricted' AND T1.isTextless = 0;",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.name = 'Condemn';",
  "SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Restricted'\n  AND cards.isStarter = 1;",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = \"Cloudchaser Eagle\";",
  "SELECT type \nFROM cards \nWHERE name = 'Benalish Knight';",
  "SELECT T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Benalish Knight';",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.language = 'Phyrexian';",
  "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T2.`language` = 'German' AND T1.isReprint = 1",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.borderColor = 'borderless'\n  AND T2.`language` = 'Russian';",
  "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.isStorySpotlight = 1;",
  "SELECT COUNT(*) \nFROM cards \nWHERE toughness = '99';",
  "SELECT name \nFROM cards \nWHERE artist = 'Aaron Boyd'",
  "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'black' \n  AND availability = 'mtgo';",
  "SELECT id \nFROM cards \nWHERE convertedManaCost = 0",
  "SELECT layout \nFROM cards \nWHERE keywords = 'Flying';",
  "SELECT COUNT(*) \nFROM cards \nWHERE originalType = \"Summon - Angel\" \n  AND subtypes != \"Angel\";",
  "SELECT id \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL;",
  "SELECT id \nFROM cards \nWHERE duelDeck = 'a'",
  "SELECT edhrecRank \nFROM cards \nWHERE frameVersion = '2015'",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.language = 'Chinese Simplified'",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.availability = 'paper' \n  AND T2.`language` = 'Japanese'",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T2.status = 'Banned'\n  AND T1.borderColor = 'white';",
  "SELECT T1.uuid, T2.language\nFROM legalities AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.format = 'legacy'",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.name = 'Beacon of Immortality';",
  "SELECT COUNT(*), T2.status\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T1.frameVersion = 'future'\nGROUP BY T2.status;",
  "SELECT name, colors\nFROM cards\nWHERE setCode = 'OGW'",
  "SELECT T1.name, T2.language \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.convertedManaCost = 5 \nAND T1.setCode = '10E';",
  "SELECT T1.name, T2.date \nFROM cards AS T1 \nJOIN rulings AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.originalType = 'Creature - Elf'",
  "SELECT T1.colors, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.id BETWEEN 1 AND 20;",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.originalType = 'Artifact' \n  AND T1.colors = 'B';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN rulings AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.rarity = 'uncommon' \nORDER BY T2.date \nLIMIT 3",
  "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'John Avon' \n  AND cardKingdomFoilId IS NULL;",
  "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'white' \n  AND cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL;",
  "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'UDON' \n  AND availability = 'mtgo' \n  AND hand = '-1';",
  "SELECT COUNT(*) \nFROM cards \nWHERE frameVersion = '1993' \n  AND availability = 'paper' \n  AND hasContentWarning = 1;",
  "SELECT manaCost \nFROM cards \nWHERE layout = 'normal' \n  AND frameVersion = '2003' \n  AND borderColor = 'black' \n  AND availability = 'mtgo,paper';",
  "SELECT SUM(manaCost) \nFROM cards \nWHERE artist = 'Rob Alexander';",
  "SELECT subtypes, supertypes \nFROM cards \nWHERE availability = 'arena'",
  "SELECT setCode\nFROM set_translations\nWHERE language = 'Spanish'",
  "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) \nFROM cards \nWHERE frameEffects = 'legendary';",
  "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards;",
  "SELECT CAST(SUM(IIF(T2.`language` = 'Spanish', 1, 0)) AS REAL) * 100 / COUNT(*) AS percentage, T1.name\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid",
  "SELECT T2.language \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.baseSetSize = 309;",
  "SELECT COUNT(*)\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.block = 'Commander'\n  AND T2.language = 'Portuguese (Brasil)';",
  "SELECT T1.id \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.status = 'Legal' \nAND T1.types = 'Creature';",
  "SELECT T1.type\nFROM foreign_data AS T1\nJOIN cards AS T2\nON T1.uuid = T2.uuid\nWHERE T1.language = 'German'\n  AND T2.subtypes IS NOT NULL\n  AND T2.supertypes IS NOT NULL",
  "SELECT COUNT(*) \nFROM cards \nWHERE (power IS NULL OR power = '*') \n  AND text LIKE '%triggered ability%'",
  "SELECT COUNT(*) \nFROM cards AS T1 \nJOIN rulings AS T2 ON T1.uuid = T2.uuid \nJOIN legalities AS T3 ON T1.uuid = T3.uuid \nWHERE T3.format = 'premodern' \n  AND T2.text = 'This is a triggered mana ability.' \n  AND T1.side IS NULL;",
  "SELECT T1.id \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.artist = 'Erica Yang' \n  AND T2.format = 'pauper' \n  AND T2.status = 'Legal' \n  AND T1.availability = 'paper';",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
  "SELECT T1.name \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.`language` = 'French' \n  AND T2.type = 'Creature' \n  AND T2.layout = 'normal' \n  AND T2.borderColor = 'black' \n  AND T2.artist = 'Matthew D. Wilson';",
  "SELECT COUNT(*)\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.rarity = 'rare'\n  AND rulings.date = '2007-02-01';",
  "SELECT T2.language \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.baseSetSize = 180 \nAND T1.block = 'Ravnica';",
  "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.format = 'commander' AND T2.status = 'legal';",
  "SELECT CAST(SUM(CASE WHEN fd.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.power IS NULL OR c.power = '*';",
  "SELECT CAST(SUM(CASE WHEN T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM set_translations AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T1.language = 'Japanese';",
  "SELECT availability \nFROM cards \nWHERE artist = 'Daren Bader';",
  "SELECT COUNT(*) \nFROM cards \nWHERE edhrecRank > 12000 \n  AND borderColor = 'borderless';",
  "SELECT COUNT(*) \nFROM cards \nWHERE isOversized = 1 \n  AND isReprint = 1 \n  AND isPromo = 1;",
  "SELECT name \nFROM cards \nWHERE (power IS NULL OR power = '*') \n  AND promoTypes = 'arenaleague' \nORDER BY name \nLIMIT 3",
  "SELECT language \nFROM foreign_data \nWHERE multiverseid = 149934",
  "SELECT cardKingdomFoilId, cardKingdomId \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL \nORDER BY cardKingdomFoilId \nLIMIT 3",
  "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards",
  "SELECT number \nFROM cards \nWHERE otherFaceIds IS NULL \n  AND subtypes = 'Angel,Wizard'",
  "SELECT code, name\nFROM sets\nWHERE mtgoCode IS NULL OR mtgoCode = ''\nORDER BY name\nLIMIT 3",
  "SELECT T2.language \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.mcmName = 'Archenemy' \nAND T2.setCode = 'ARC';",
  "SELECT T1.name, T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.id = 5;",
  "SELECT T1.language, T2.type\nFROM set_translations AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T2.id = 206",
  "SELECT T1.name, T1.id \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.language = 'Italian' \n  AND T1.block = 'Shadowmoor' \nORDER BY T1.name \nLIMIT 2;",
  "SELECT T1.name, T1.id\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.isForeignOnly = 0\n  AND T1.isFoilOnly = 1\n  AND T2.language = 'Japanese'",
  "SELECT T1.name\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Russian'\nORDER BY T1.baseSetSize DESC\nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM foreign_data AS T1 \nJOIN sets AS T2 \nON T1.multiverseid = T2.mcmId \nWHERE T1.`language` = 'Chinese Simplified';",
  "SELECT COUNT(*)\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Japanese'\n  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
  "SELECT id \nFROM cards \nWHERE borderColor = 'black';",
  "SELECT id \nFROM cards \nWHERE frameEffects = 'extendedart';",
  "SELECT name \nFROM cards \nWHERE borderColor = 'black' \n  AND isFullArt = 1;",
  "SELECT language \nFROM set_translations \nWHERE id = 174;",
  "SELECT name \nFROM sets \nWHERE code = 'ALL';",
  "SELECT language \nFROM foreign_data \nWHERE name = 'A Pedra Fellwar'",
  "SELECT code \nFROM sets \nWHERE releaseDate = '2007-07-13'",
  "SELECT baseSetSize, code \nFROM sets \nWHERE block = \"Masques\" OR block = \"Mirage\"",
  "SELECT code \nFROM sets \nWHERE type = 'expansion'",
  "SELECT T2.name, T2.type\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.watermark = 'boros'",
  "SELECT T1.language, T1.flavorText, T1.type\nFROM foreign_data AS T1\nJOIN cards AS T2\nON T1.uuid = T2.uuid\nWHERE T2.watermark = 'colorpie'",
  "SELECT CAST(SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards \nWHERE name = 'Abyssal Horror';",
  "SELECT code \nFROM sets \nWHERE type IN ('expansion', 'commander')",
  "SELECT T2.name, T2.type \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.watermark = 'abzan';",
  "SELECT T2.language, T2.type\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.watermark = 'azorius'",
  "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'Aaron Miller' \n  AND cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL;",
  "SELECT COUNT(*) \nFROM cards \nWHERE availability LIKE '%paper%' \n  AND hand = '3';",
  "SELECT name \nFROM cards \nWHERE isTextless = 0",
  "SELECT convertedManaCost \nFROM cards \nWHERE name = 'Ancestor''s Chosen'",
  "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'white' \n  AND (power = '*' OR power IS NULL);",
  "SELECT name \nFROM cards \nWHERE isPromo = 1 \n  AND side IS NOT NULL;",
  "SELECT subtypes, supertypes \nFROM cards \nWHERE name = 'Molimo, Maro-Sorcerer';",
  "SELECT purchaseUrls \nFROM cards \nWHERE promoTypes = 'bundle'",
  "SELECT COUNT(DISTINCT artist) \nFROM cards \nWHERE borderColor = 'black' \n  AND availability LIKE '%arena,mtgo%';",
  "SELECT name \nFROM cards \nWHERE name = 'Serra Angel' OR name = 'Shrine Keeper' \nORDER BY convertedManaCost DESC \nLIMIT 1",
  "SELECT artist \nFROM cards \nWHERE flavorName = 'Battra, Dark Destroyer'",
  "SELECT name\nFROM cards\nWHERE frameVersion = '2003'\nORDER BY convertedManaCost DESC\nLIMIT 3",
  "SELECT T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.name = 'Ancestor''s Chosen' \n  AND T2.language = 'Italian';",
  "SELECT COUNT(*)\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nWHERE cards.name = 'Angel of Mercy';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T2.translation = 'Hauptset Zehnte Edition'",
  "SELECT CASE WHEN T2.language = 'Korean' THEN 'Yes' ELSE 'No' END AS has_korean_version\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.name = 'Ancestor''s Chosen';",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN set_translations AS T2\nON T1.setCode = T2.setCode\nWHERE T2.translation = 'Hauptset Zehnte Edition'\n  AND T1.artist = 'Adam Rex';",
  "SELECT T1.baseSetSize \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.translation = 'Hauptset Zehnte Edition';",
  "SELECT T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Eighth Edition' \n  AND T2.language = 'Chinese Simplified';",
  "SELECT CASE \n         WHEN T2.mtgoCode IS NOT NULL THEN 'YES' \n         ELSE 'NO' \n       END AS result\nFROM cards AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T1.name = 'Angel of Mercy';",
  "SELECT T1.releaseDate \nFROM sets AS T1 \nJOIN cards AS T2 \nON T1.code = T2.setCode \nWHERE T2.name = 'Ancestor''s Chosen'",
  "SELECT T1.type\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.translation = 'Hauptset Zehnte Edition'",
  "SELECT COUNT(*)\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.block = 'Ice Age'\n  AND T2.language = 'Italian'\n  AND T2.translation IS NOT NULL;",
  "SELECT T1.isForeignOnly \nFROM sets AS T1 \nJOIN cards AS T2 \nON T1.code = T2.setCode \nWHERE T2.name = 'Adarkar Valkyrie';",
  "SELECT COUNT(*) \nFROM sets \nJOIN set_translations \nON sets.code = set_translations.setCode \nWHERE set_translations.language = 'Italian' \n  AND sets.baseSetSize < 100;",
  "SELECT COUNT(*)\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nORDER BY T1.convertedManaCost DESC \nLIMIT 1",
  "SELECT DISTINCT T1.artist \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \n  AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nAND T1.number = 4",
  "SELECT COUNT(*) \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \n  AND T1.convertedManaCost > 5 \n  AND (T1.power = '*' OR T1.power IS NULL)",
  "SELECT T2.flavorText \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.language = 'Italian' \nAND T1.name = 'Ancestor''s Chosen';",
  "SELECT T1.language \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.name = 'Ancestor''s Chosen' \nAND T1.flavorText IS NOT NULL;",
  "SELECT T1.type \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.language = 'German' \nAND T2.name = 'Ancestor''s Chosen'",
  "SELECT rulings.text\nFROM rulings\nJOIN cards ON rulings.uuid = cards.uuid\nJOIN sets ON cards.setCode = sets.code\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';",
  "SELECT T2.name\nFROM cards AS T1\nJOIN foreign_data AS T2 ON T1.uuid = T2.uuid\nJOIN sets AS T3 ON T1.setCode = T3.code\nWHERE T3.name = 'Coldsnap' AND T2.language = 'Italian'\nORDER BY T1.convertedManaCost DESC\nLIMIT 1",
  "SELECT rulings.date\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.name = 'Reminisce'",
  "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap';",
  "SELECT CAST(SUM(CASE WHEN c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM sets s\nJOIN cards c ON s.code = c.setCode\nWHERE s.name = 'Coldsnap';",
  "SELECT code \nFROM sets \nWHERE releaseDate = '2017-07-14'",
  "SELECT keyruneCode \nFROM sets \nWHERE code = 'PKHC';",
  "SELECT mcmId \nFROM sets \nWHERE code = 'SS2'",
  "SELECT mcmName \nFROM sets \nWHERE releaseDate = '2017-06-09'",
  "SELECT type \nFROM sets \nWHERE name = 'From the Vault: Lore';",
  "SELECT parentCode \nFROM sets \nWHERE name = 'Commander 2014 Oversized'",
  "SELECT rulings.text, cards.hasContentWarning\nFROM rulings\nJOIN cards ON rulings.uuid = cards.uuid\nWHERE cards.artist = 'Jim Pavelec';",
  "SELECT T2.releaseDate \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.name = 'Evacuation';",
  "SELECT T1.baseSetSize \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.translation = 'Rinascita di Alara'",
  "SELECT T2.type \nFROM set_translations AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.translation = 'Huitième édition';",
  "SELECT T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.name = 'Tendo Ice Bridge' \nAND T2.language = 'French';",
  "SELECT COUNT(*)\nFROM set_translations AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T2.name = 'Tenth Edition'\nAND T1.translation IS NOT NULL;",
  "SELECT T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.name = 'Fellwar Stone' \nAND T2.language = 'Japanese';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Journey into Nyx Hero''s Path' \nORDER BY T1.convertedManaCost DESC \nLIMIT 1",
  "SELECT T1.releaseDate \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.translation = 'Ola de frío';",
  "SELECT T2.type \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.name = 'Samite Pilgrim';",
  "SELECT COUNT(*)\nFROM sets\nJOIN cards ON sets.code = cards.setCode\nWHERE sets.name = 'World Championship Decks 2004'\n  AND cards.convertedManaCost = 3;",
  "SELECT T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Mirrodin' \nAND T2.language = 'Chinese Simplified';",
  "SELECT CAST(SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.language = 'Japanese';",
  "SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.language = 'Portuguese (Brazil)';",
  "SELECT availability \nFROM cards \nWHERE artist = 'Aleksi Briclot' \n  AND isTextless = 1;",
  "SELECT id \nFROM sets \nORDER BY baseSetSize DESC \nLIMIT 1",
  "SELECT artist \nFROM cards \nWHERE side IS NULL \nORDER BY convertedManaCost DESC \nLIMIT 1",
  "SELECT frameEffects \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL \nGROUP BY frameEffects \nORDER BY COUNT(*) DESC \nLIMIT 1",
  "SELECT COUNT(*) \nFROM cards \nWHERE (power IS NULL OR power = '*') \n  AND hasFoil = 0 \n  AND duelDeck = 'a';",
  "SELECT id \nFROM sets \nWHERE type = 'commander' \nORDER BY totalSetSize DESC \nLIMIT 1",
  "SELECT T1.name\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T2.format = 'duel'\nORDER BY T1.convertedManaCost DESC\nLIMIT 10;",
  "SELECT T1.originalReleaseDate, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.rarity = 'mythic' \n  AND T2.status = 'Legal' \nORDER BY T1.originalReleaseDate \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French';",
  "SELECT COUNT(*)\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T1.rarity = 'rare'\n  AND T1.types = 'Enchantment'\n  AND T1.name = 'Abundance'\n  AND T2.status = 'Legal';",
  "SELECT l.format, c.name\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE l.status = 'Banned'\nGROUP BY l.format\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT T2.language \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Battlebond'",
  "SELECT T1.artist, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nGROUP BY T1.artist \nORDER BY COUNT(*) ASC \nLIMIT 1",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.frameVersion = '1997' \n  AND T1.artist = 'D. Alexander Gregory' \n  AND T2.format = 'legacy' \n  AND (T1.hasContentWarning = 1 OR T1.watermark = 'Wizards of the Coast')",
  "SELECT T1.name, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.edhrecRank = 1 \nAND T2.status = 'Banned';",
  "SELECT CAST(COUNT(*) AS REAL) / 4.0 AS annual_average, language\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\nGROUP BY set_translations.language\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT artist \nFROM cards \nWHERE borderColor = 'black' \n  AND availability = 'arena';",
  "SELECT uuid \nFROM legalities \nWHERE format = 'oldschool' \n  AND status IN ('Banned', 'Restricted');",
  "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'Matthew D. Wilson' \n  AND availability = 'paper'",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.artist = 'Kev Walker' \nORDER BY rulings.date DESC;",
  "SELECT T1.name, T3.format \nFROM cards AS T1 \nJOIN sets AS T2 \n  ON T1.setCode = T2.code \nJOIN legalities AS T3 \n  ON T1.uuid = T3.uuid \nWHERE T2.name = 'Hour of Devastation' \n  AND T3.status = 'Legal';",
  "SELECT T1.name\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Korean'",
  "SELECT T1.frameVersion, T1.name, T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.artist = 'Allen Williams';",
  "SELECT DisplayName \nFROM users \nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon') \nORDER BY Reputation DESC \nLIMIT 1;",
  "SELECT DisplayName \nFROM users \nWHERE STRFTIME('%Y', CreationDate) = '2011'",
  "SELECT COUNT(*)\nFROM users\nWHERE LastAccessDate > '2014-09-01'",
  "SELECT DisplayName \nFROM users \nORDER BY Views DESC \nLIMIT 1",
  "SELECT COUNT(*) \nFROM users \nWHERE UpVotes > 100 AND DownVotes > 1;",
  "SELECT COUNT(*)\nFROM users\nWHERE Views > 10\n  AND STRFTIME('%Y', CreationDate) > '2013'",
  "SELECT COUNT(*)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE users.DisplayName = 'csgillespie';",
  "SELECT posts.Title\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'csgillespie'",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = 'Eliciting priors from experts'",
  "SELECT T1.Title\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'csgillespie'\nORDER BY T1.ViewCount DESC\nLIMIT 1",
  "SELECT OwnerDisplayName \nFROM posts \nORDER BY FavoriteCount DESC \nLIMIT 1",
  "SELECT SUM(T1.CommentCount) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie'",
  "SELECT T1.AnswerCount \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie' \nORDER BY T1.AnswerCount DESC \nLIMIT 1",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.LastEditorUserId = T2.Id \nWHERE T1.Title = \"Examples for teaching: Correlation does not mean causation\"",
  "SELECT COUNT(*)\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'csgillespie'\n  AND T1.ParentId IS NULL;",
  "SELECT T1.DisplayName\nFROM users AS T1\nJOIN posts AS T2\nON T1.Id = T2.OwnerUserId\nWHERE T2.ClosedDate IS NOT NULL",
  "SELECT COUNT(*)\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T2.Age > 65 AND T1.Score >= 20",
  "SELECT T2.Location \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = 'Eliciting priors from experts'",
  "SELECT T2.Body\nFROM tags AS T1\nJOIN posts AS T2\nON T1.ExcerptPostId = T2.Id\nWHERE T1.TagName = 'bayesian'",
  "SELECT T1.Body\nFROM posts AS T1\nJOIN tags AS T2\nON T1.Id = T2.ExcerptPostId\nORDER BY T2.Count DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.DisplayName = 'csgillespie';",
  "SELECT badges.Name\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.DisplayName = 'csgillespie'",
  "SELECT COUNT(*)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.DisplayName = 'csgillespie'\n  AND STRFTIME('%Y', badges.Date) = '2011';",
  "SELECT T2.DisplayName\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nGROUP BY T1.UserId\nORDER BY COUNT(T1.Id) DESC\nLIMIT 1",
  "SELECT AVG(T1.Score) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie';",
  "SELECT CAST(COUNT(b.Id) AS REAL) / COUNT(DISTINCT u.Id) \nFROM users u \nJOIN badges b \nON u.Id = b.UserId \nWHERE u.Views > 200;",
  "SELECT CAST(SUM(CASE WHEN users.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE posts.Score > 5",
  "SELECT COUNT(*)\nFROM votes\nWHERE UserId = 58 AND CreationDate = '2010-07-19'",
  "SELECT CreationDate \nFROM votes \nGROUP BY CreationDate \nORDER BY COUNT(Id) DESC \nLIMIT 1",
  "SELECT COUNT(Id) \nFROM badges \nWHERE Name = 'Revival'",
  "SELECT T2.Title\nFROM comments AS T1\nJOIN posts AS T2\nON T1.PostId = T2.Id\nORDER BY T1.Score DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.ViewCount = 1910;",
  "SELECT T2.FavoriteCount \nFROM comments AS T1 \nJOIN posts AS T2 \nON T1.PostId = T2.Id \nWHERE T1.UserId = 3025 \n  AND T1.CreationDate = '2014-04-23 20:29:39.0';",
  "SELECT T1.Text \nFROM comments AS T1 \nJOIN posts AS T2 \nON T1.PostId  =  T2.Id \nWHERE T2.ParentId = 107829 \n  AND T2.CommentCount = 1",
  "SELECT \n  CASE \n    WHEN T2.ClosedDate IS NOT NULL THEN 'Yes' \n    ELSE 'No' \n  END AS IsWellFinished\nFROM \n  comments AS T1\nJOIN \n  posts AS T2\nON \n  T1.PostId = T2.Id\nWHERE \n  T1.UserId = 23853 \n  AND T1.CreationDate = '2013-07-12 09:08:18.0'",
  "SELECT users.Reputation \nFROM users \nJOIN posts \nON users.Id = posts.OwnerUserId \nWHERE posts.Id = 65041;",
  "SELECT COUNT(*)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE users.DisplayName = 'Tiago Pasqualini';",
  "SELECT T2.DisplayName \nFROM votes AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Id = 6347;",
  "SELECT COUNT(*)\nFROM posts\nJOIN votes ON posts.Id = votes.PostId\nWHERE posts.Title LIKE '%data visualization%'",
  "SELECT badges.Name \nFROM badges \nJOIN users \nON badges.UserId = users.Id \nWHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
  "SELECT CAST(COUNT(p.Id) AS REAL) / COUNT(v.Id) \nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.OwnerUserId = 24 AND v.UserId = 24;",
  "SELECT ViewCount \nFROM posts \nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
  "SELECT Text \nFROM comments \nWHERE Score = 17;",
  "SELECT DisplayName \nFROM users \nWHERE WebsiteUrl = 'http://stackoverflow.com'",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = 'SilentGhost'",
  "SELECT T2.DisplayName \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Text = 'thank you user93!'",
  "SELECT T1.Text \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.DisplayName = 'A Lion'",
  "SELECT users.DisplayName, users.Reputation\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE posts.Title = 'Understanding what Dassault iSight is doing?'",
  "SELECT comments.Text\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'How does gentle boosting differ from AdaBoost?'",
  "SELECT T2.DisplayName \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Name = 'Necromancer' \nLIMIT 10",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.LastEditorUserId = T2.Id \nWHERE T2.DisplayName = 'Vebjorn Ljosa'",
  "SELECT SUM(T1.Score), T2.WebsiteUrl\nFROM posts AS T1\nJOIN users AS T2\nON T1.LastEditorUserId = T2.Id\nWHERE T2.DisplayName = 'Yevgeny'",
  "SELECT T2.Text\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
  "SELECT SUM(v.BountyAmount)\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Title LIKE '%data%'",
  "SELECT DISTINCT T1.DisplayName\nFROM users AS T1\nJOIN votes AS T2 ON T1.Id = T2.UserId\nJOIN posts AS T3 ON T2.PostId = T3.Id\nWHERE T2.BountyAmount = 50 AND T3.Title LIKE '%variance%'",
  "SELECT AVG(T1.ViewCount), T1.Title, T2.Text\nFROM posts AS T1\nJOIN postHistory AS T2\nON T1.Id = T2.PostId\nWHERE T1.Tags = '<humor>'",
  "SELECT COUNT(*) \nFROM comments \nWHERE UserId = 13;",
  "SELECT Id\nFROM users\nORDER BY Reputation DESC\nLIMIT 1",
  "SELECT Id \nFROM users \nORDER BY Views ASC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM badges\nWHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011'",
  "SELECT COUNT(*)\nFROM (\n  SELECT UserId\n  FROM badges\n  GROUP BY UserId\n  HAVING COUNT(Name) > 5\n)",
  "SELECT COUNT(*)\nFROM (\n  SELECT T1.Id\n  FROM users AS T1\n  JOIN badges AS T2\n  ON T1.Id = T2.UserId\n  WHERE T1.Location = 'New York' AND T2.Name = 'Teacher'\n  INTERSECT\n  SELECT T1.Id\n  FROM users AS T1\n  JOIN badges AS T2\n  ON T1.Id = T2.UserId\n  WHERE T1.Location = 'New York' AND T2.Name = 'Supporter'\n)",
  "SELECT T2.DisplayName, T2.Reputation\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.Id = 1",
  "SELECT T1.UserId\nFROM postHistory AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T2.Views >= 1000\nGROUP BY T1.UserId, T1.PostId\nHAVING COUNT(T1.Id) = 1;",
  "SELECT T2.Name \nFROM comments AS T1 \nJOIN badges AS T2 \nON T1.UserId = T2.UserId \nGROUP BY T1.UserId \nORDER BY COUNT(T1.Id) DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM users AS T1\nJOIN badges AS T2\nON T1.Id = T2.UserId\nWHERE T1.Location = 'India'\n  AND T2.Name = 'Teacher';",
  "SELECT \n  CAST(SUM(CASE WHEN STRFTIME('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) -\n  CAST(SUM(CASE WHEN STRFTIME('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_difference\nFROM \n  badges\nWHERE \n  Name = 'Student';",
  "SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId)\nFROM postHistory AS T1\nJOIN comments AS T2\nON T1.PostId = T2.PostId\nWHERE T1.PostId = 3720",
  "SELECT T1.RelatedPostId, T2.ViewCount \nFROM postLinks AS T1 \nJOIN posts AS T2 \nON T1.RelatedPostId = T2.Id \nWHERE T1.PostId = 61217;",
  "SELECT T1.Score, T2.LinkTypeId\nFROM posts AS T1\nJOIN postLinks AS T2\nON T1.Id = T2.PostId\nWHERE T2.PostId = 395;",
  "SELECT Id, OwnerUserId\nFROM posts\nWHERE Score > 60",
  "SELECT SUM(FavoriteCount)\nFROM posts\nWHERE OwnerUserId = 686\n  AND STRFTIME('%Y', CreaionDate) = '2011';",
  "SELECT \n    AVG(u.UpVotes) AS AverageUpVotes, \n    AVG(u.Age) AS AverageAge\nFROM \n    users u\nJOIN \n    posts p \nON \n    u.Id = p.OwnerUserId\nGROUP BY \n    u.Id\nHAVING \n    COUNT(p.Id) > 10;",
  "SELECT COUNT(UserId) \nFROM badges \nWHERE Name = 'Announcer'",
  "SELECT Name \nFROM badges \nWHERE Date = '2010-07-19 19:39:08.0'",
  "SELECT COUNT(*) \nFROM comments \nWHERE Score > 60",
  "SELECT Text\nFROM comments\nWHERE CreationDate = '2010-07-19 19:25:47.0'",
  "SELECT COUNT(*) \nFROM posts \nWHERE Score = 10;",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nORDER BY T1.Reputation DESC \nLIMIT 1",
  "SELECT T1.Reputation \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T2.Date = '2010-07-19 19:39:08.0'",
  "SELECT T2.Name\nFROM users AS T1\nJOIN badges AS T2\nON T1.Id = T2.UserId\nWHERE T1.DisplayName = \"Pierre\"",
  "SELECT badges.Date \nFROM badges \nJOIN users \nON badges.UserId = users.Id \nWHERE users.Location = 'Rochester, NY'",
  "SELECT CAST(SUM(CASE WHEN Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(UserId) \nFROM badges;",
  "SELECT CAST(SUM(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Organizer';",
  "SELECT Score \nFROM comments \nWHERE CreationDate = '2010-07-19 19:19:56.0'",
  "SELECT Text \nFROM comments \nWHERE CreationDate = '2010-07-19 19:37:33.0'",
  "SELECT T1.Age \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.Location = 'Vienna, Austria'",
  "SELECT COUNT(*)\nFROM users AS T1\nJOIN badges AS T2\nON T1.Id = T2.UserId\nWHERE T2.Name = 'Supporter'\n  AND T1.Age BETWEEN 19 AND 65;",
  "SELECT T1.Views \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T2.Date = '2010-07-19 19:39:08.0'",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nORDER BY T1.Reputation ASC \nLIMIT 1",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = 'Sharpie'",
  "SELECT COUNT(*)\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T1.Name = 'Supporter' AND T2.Age > 65",
  "SELECT DisplayName \nFROM users \nWHERE Id = 30",
  "SELECT COUNT(*) \nFROM users \nWHERE Location = 'New York';",
  "SELECT COUNT(*) \nFROM votes \nWHERE STRFTIME('%Y', CreationDate) = '2010'",
  "SELECT COUNT(*) \nFROM users \nWHERE Age BETWEEN 19 AND 65;",
  "SELECT DisplayName\nFROM users\nWHERE Views = (SELECT MAX(Views) FROM users)",
  "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) /\n       SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) AS ratio\nFROM votes;",
  "SELECT DISTINCT SUBSTR(T2.Tags, 2, INSTR(T2.Tags, '>') - 2) AS TagName\nFROM users AS T1\nJOIN posts AS T2\nON T1.Id = T2.OwnerUserId\nWHERE T1.DisplayName = 'John Salvatier';",
  "SELECT COUNT(*)\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Daniel Vassallo';",
  "SELECT COUNT(*)\nFROM users\nJOIN votes ON users.Id = votes.UserId\nWHERE users.DisplayName = 'Harlan';",
  "SELECT T1.Id\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'slashnick'\nORDER BY T1.AnswerCount DESC\nLIMIT 1",
  "SELECT T1.DisplayName\nFROM users AS T1\nJOIN posts AS T2\nON T1.Id = T2.OwnerUserId\nWHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder'\nGROUP BY T1.DisplayName\nORDER BY SUM(T2.ViewCount) DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.Score > 4 AND T2.DisplayName = 'Matt Parker'",
  "SELECT COUNT(*)\nFROM comments AS T1\nJOIN posts AS T2 ON T1.PostId = T2.Id\nJOIN users AS T3 ON T2.OwnerUserId = T3.Id\nWHERE T1.Score < 60\n  AND T3.DisplayName = 'Neil McGuigan';",
  "SELECT T1.Tags \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Mark Meckes' \nAND T1.CommentCount = 0;",
  "SELECT T1.DisplayName\nFROM users AS T1\nJOIN badges AS T2\nON T1.Id = T2.UserId\nWHERE T2.Name = 'Organizer'",
  "SELECT CAST(SUM(CASE WHEN p.Tags LIKE '%<r>%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Community';",
  "SELECT \n  SUM(CASE WHEN T2.DisplayName = 'Mornington' THEN T1.ViewCount ELSE 0 END) -\n  SUM(CASE WHEN T2.DisplayName = 'Amos' THEN T1.ViewCount ELSE 0 END) AS view_count_difference\nFROM \n  posts T1\nJOIN \n  users T2 ON T1.OwnerUserId = T2.Id;",
  "SELECT COUNT(*)\nFROM badges\nWHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
  "SELECT COUNT(*) \nFROM posts \nWHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
  "SELECT DisplayName, Age \nFROM users \nORDER BY Views DESC \nLIMIT 1",
  "SELECT LastEditDate, LastEditorUserId\nFROM posts\nWHERE Title = 'Detecting a given face in a database of facial images'",
  "SELECT COUNT(*)\nFROM comments\nWHERE UserId = 13 AND Score < 60",
  "SELECT posts.Title, comments.UserDisplayName\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE comments.Score > 60;",
  "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'North Pole'\n  AND STRFTIME('%Y', b.Date) = '2011'",
  "SELECT T2.DisplayName, T2.WebsiteUrl\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.FavoriteCount > 150;",
  "SELECT \n  COUNT(postHistory.Id) AS PostHistoryCount, \n  posts.LastEditDate \nFROM \n  posts \nJOIN \n  postHistory \nON \n  posts.Id = postHistory.PostId \nWHERE \n  posts.Title = 'What is the best introductory Bayesian statistics textbook?';",
  "SELECT users.LastAccessDate, users.Location\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'outliers'",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN postLinks AS T2 \nON T1.Id = T2.RelatedPostId \nWHERE T2.PostId = (\n    SELECT Id \n    FROM posts \n    WHERE Title = 'How to tell if something happened in a data set which monitors a value over time'\n)",
  "SELECT \n    p.Id, \n    b.Name \nFROM \n    posts p \nJOIN \n    badges b \nON \n    p.OwnerUserId = b.UserId \nWHERE \n    p.OwnerDisplayName = 'Samuel' \n    AND STRFTIME('%Y', p.CreaionDate) = '2013' \n    AND STRFTIME('%Y', b.Date) = '2013';",
  "SELECT OwnerDisplayName\nFROM posts\nORDER BY ViewCount DESC\nLIMIT 1",
  "SELECT T2.DisplayName, T2.Location\nFROM tags AS T1\nJOIN posts AS T3 ON T1.ExcerptPostId = T3.Id\nJOIN users AS T2 ON T3.OwnerUserId = T2.Id\nWHERE T1.TagName = 'hypothesis-testing';",
  "SELECT T1.Title, T2.LinkTypeId\nFROM posts AS T1\nJOIN postLinks AS T2\nON T1.Id = T2.RelatedPostId\nWHERE T2.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')",
  "SELECT OwnerDisplayName \nFROM posts \nWHERE ParentId IS NOT NULL \nORDER BY Score DESC \nLIMIT 1",
  "SELECT T2.DisplayName, T2.WebsiteUrl\nFROM votes AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T1.VoteTypeId = 8\nORDER BY T1.BountyAmount DESC\nLIMIT 1",
  "SELECT Title\nFROM posts\nORDER BY ViewCount DESC\nLIMIT 5",
  "SELECT COUNT(*) \nFROM tags \nWHERE Count BETWEEN 5000 AND 7000",
  "SELECT OwnerUserId \nFROM posts \nORDER BY FavoriteCount DESC \nLIMIT 1",
  "SELECT Age \nFROM users \nORDER BY Reputation DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM votes\nWHERE STRFTIME('%Y', CreationDate) = '2011' \n  AND BountyAmount = 50;",
  "SELECT Id \nFROM users \nORDER BY Age ASC \nLIMIT 1",
  "SELECT SUM(Score) \nFROM posts \nWHERE LasActivityDate LIKE '2010-07-19%'",
  "SELECT CAST(COUNT(*) AS REAL) / 12.0 \nFROM postLinks \nJOIN posts ON postLinks.PostId = posts.Id \nWHERE STRFTIME('%Y', postLinks.CreationDate) = '2010' \n  AND posts.AnswerCount <= 2;",
  "SELECT T1.Id\nFROM posts AS T1\nJOIN votes AS T2\nON T1.Id = T2.PostId\nWHERE T2.UserId = 1465\nORDER BY T1.FavoriteCount DESC\nLIMIT 1",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN postLinks AS T2 \nON T1.Id = T2.PostId \nORDER BY T2.CreationDate \nLIMIT 1",
  "SELECT T2.DisplayName\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nGROUP BY T2.DisplayName\nORDER BY COUNT(T1.Name) DESC\nLIMIT 1",
  "SELECT votes.CreationDate\nFROM users\nJOIN votes ON users.Id = votes.UserId\nWHERE users.DisplayName = 'chl'\nORDER BY votes.CreationDate ASC\nLIMIT 1;",
  "SELECT T2.CreaionDate \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nORDER BY T1.Age ASC, T2.CreaionDate ASC \nLIMIT 1",
  "SELECT T2.DisplayName\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T1.Name = 'Autobiographer'\nORDER BY T1.Date\nLIMIT 1",
  "SELECT COUNT(DISTINCT T1.Id) \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nWHERE T1.Location = 'United Kingdom' \nAND T2.FavoriteCount >= 4;",
  "SELECT AVG(T1.PostId)\nFROM votes AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T2.Age = (SELECT MAX(Age) FROM users);",
  "SELECT DisplayName\nFROM users\nORDER BY Reputation DESC\nLIMIT 1",
  "SELECT COUNT(*) \nFROM users \nWHERE Reputation > 2000 AND Views > 1000",
  "SELECT DisplayName \nFROM users \nWHERE Age BETWEEN 19 AND 65",
  "SELECT COUNT(*)\nFROM users AS T1\nJOIN posts AS T2\nON T1.Id = T2.OwnerUserId\nWHERE T1.DisplayName = 'Jay Stevens'\n  AND STRFTIME('%Y', T2.CreaionDate) = '2010';",
  "SELECT T1.Id, T1.Title\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T2.DisplayName = 'Harvey Motulsky'\nORDER BY T1.ViewCount DESC\nLIMIT 1",
  "SELECT Id, Title\nFROM posts\nORDER BY Score DESC\nLIMIT 1",
  "SELECT AVG(T1.Score) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Stephen Turner'",
  "SELECT OwnerDisplayName \nFROM posts \nWHERE ViewCount > 20000 \n  AND CreaionDate LIKE '2011%'",
  "SELECT Id, OwnerDisplayName\nFROM posts\nWHERE STRFTIME('%Y', CreaionDate) = '2010'\nORDER BY FavoriteCount DESC\nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE STRFTIME('%Y', p.CreaionDate) = '2011'",
  "SELECT CAST(SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM users;",
  "SELECT T1.ViewCount, T2.UserDisplayName\nFROM posts AS T1\nJOIN postHistory AS T2\nON T1.Id = T2.PostId\nWHERE T2.Text = 'Computer Game Datasets';",
  "SELECT COUNT(*)\nFROM posts\nWHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
  "SELECT COUNT(*)\nFROM comments\nWHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
  "SELECT COUNT(*)\nFROM posts\nWHERE ViewCount > 35000 AND CommentCount = 0",
  "SELECT T2.DisplayName, T2.Location\nFROM posts AS T1\nJOIN users AS T2\nON T1.LastEditorUserId = T2.Id\nWHERE T1.Id = 183",
  "SELECT T1.Name\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T2.DisplayName = 'Emmett'\nORDER BY T1.Date DESC\nLIMIT 1",
  "SELECT COUNT(*) \nFROM users \nWHERE Age BETWEEN 19 AND 65 \n  AND UpVotes > 5000",
  "SELECT JULIANDAY(T2.`Date`) - JULIANDAY(T1.CreationDate) AS DaysToBadge\nFROM users AS T1\nJOIN badges AS T2\nON T1.Id = T2.UserId\nWHERE T1.DisplayName = 'Zolomon';",
  "SELECT COUNT(p.Id) AS PostCount, COUNT(c.Id) AS CommentCount\nFROM users u\nLEFT JOIN posts p ON u.Id = p.OwnerUserId\nLEFT JOIN comments c ON u.Id = c.UserId\nWHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);",
  "SELECT T1.Text, T1.UserDisplayName\nFROM comments AS T1\nJOIN posts AS T2\nON T1.PostId = T2.Id\nWHERE T2.Title = 'Analysing wind data with R'\nORDER BY T1.CreationDate DESC\nLIMIT 10;",
  "SELECT COUNT(UserId) \nFROM badges \nWHERE Name = 'Citizen Patrol'",
  "SELECT COUNT(*)\nFROM posts\nWHERE Tags LIKE '%<careers>%'",
  "SELECT Reputation, Views\nFROM users\nWHERE DisplayName = 'Jarrod Dixon'",
  "SELECT COUNT(*)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'Clustering 1D data'",
  "SELECT CreationDate \nFROM users \nWHERE DisplayName = 'IrishStat'",
  "SELECT COUNT(*) \nFROM votes \nWHERE BountyAmount >= 30",
  "SELECT CAST(SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users)",
  "SELECT COUNT(*) \nFROM posts \nWHERE Score < 20",
  "SELECT COUNT(*) \nFROM tags \nWHERE Id < 15 AND Count <= 20",
  "SELECT ExcerptPostId, WikiPostId \nFROM tags \nWHERE TagName = 'sample'",
  "SELECT users.Reputation, users.UpVotes\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE comments.Text = 'fine, you win :)'",
  "SELECT T1.Text\nFROM comments AS T1\nJOIN posts AS T2\nON T1.PostId = T2.Id\nWHERE T2.Title LIKE '%linear regression%'",
  "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nORDER BY c.Score DESC\nLIMIT 1",
  "SELECT CreationDate, Age \nFROM users \nWHERE WebsiteUrl LIKE '%http://%';",
  "SELECT COUNT(*)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE comments.Score = 0 AND posts.ViewCount < 5;",
  "SELECT COUNT(*)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.CommentCount = 1 AND comments.Score = 0",
  "SELECT COUNT(*)\nFROM comments AS c\nJOIN users AS u ON c.UserId = u.Id\nWHERE c.Score = 0 AND u.Age = 40;",
  "SELECT posts.Id, comments.Text\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'Group differences on a five point Likert item'",
  "SELECT T1.UpVotes \nFROM users AS T1 \nJOIN comments AS T2 \nON T1.Id = T2.UserId \nWHERE T2.Text = 'R is also lazy evaluated.'",
  "SELECT T1.Text\nFROM comments AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T2.DisplayName = 'Harvey Motulsky'",
  "SELECT T2.DisplayName \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Score BETWEEN 1 AND 5 \n  AND T2.DownVotes = 0",
  "SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM comments AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T1.Score BETWEEN 5 AND 10;",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 \nON T1.power_id  =  T2.id \nJOIN superhero AS T3 \nON T1.hero_id = T3.id \nWHERE T3.superhero_name = '3-D Man'",
  "SELECT COUNT(*)\nFROM superpower AS T1\nJOIN hero_power AS T2\nON T1.id = T2.power_id\nWHERE T1.power_name = 'Super Strength'",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN superpower AS T3 ON T2.power_id = T3.id\nWHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
  "SELECT superhero.full_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nGROUP BY superhero.full_name\nHAVING COUNT(hero_power.power_id) > 15",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN colour AS T2\nON T1.eye_colour_id = T2.id\nWHERE T2.colour = 'Blue'",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.skin_colour_id = T2.id \nWHERE T1.superhero_name = 'Apocalypse'",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN colour AS T2 ON T1.eye_colour_id = T2.id\nJOIN hero_power AS T3 ON T1.id = T3.hero_id\nJOIN superpower AS T4 ON T3.power_id = T4.id\nWHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'",
  "SELECT T1.superhero_name\nFROM superhero AS T1\nJOIN colour AS T2 ON T1.eye_colour_id = T2.id\nJOIN colour AS T3 ON T1.hair_colour_id = T3.id\nWHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN publisher AS T2\nON T1.publisher_id = T2.id\nWHERE T2.publisher_name = 'Marvel Comics';",
  "SELECT superhero_name \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher_name = 'Marvel Comics' \nORDER BY height_cm DESC",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id  =  T2.id \nWHERE T1.superhero_name = 'Sauron'",
  "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY COUNT(*) DESC;",
  "SELECT AVG(height_cm) \nFROM superhero \nJOIN publisher \nON superhero.publisher_id = publisher.id \nWHERE publisher.publisher_name = 'Marvel Comics';",
  "SELECT superhero.superhero_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE publisher.publisher_name = 'Marvel Comics'\n  AND superpower.power_name = 'Super Strength';",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN publisher AS T2\nON T1.publisher_id = T2.id\nWHERE T2.publisher_name = 'DC Comics'",
  "SELECT T4.publisher_name \nFROM hero_attribute AS T1 \nJOIN attribute AS T2 ON T1.attribute_id  =  T2.id \nJOIN superhero AS T3 ON T1.hero_id = T3.id \nJOIN publisher AS T4 ON T3.publisher_id = T4.id \nWHERE T2.attribute_name = 'Speed' \nORDER BY T1.attribute_value ASC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN colour AS T2 ON T1.eye_colour_id = T2.id\nJOIN publisher AS T3 ON T1.publisher_id = T3.id\nWHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics';",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id = T2.id \nWHERE T1.superhero_name = 'Blue Beetle II';",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN colour AS T2\nON T1.hair_colour_id = T2.id\nWHERE T2.colour = 'Blond'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nINNER JOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nINNER JOIN attribute AS T3 \nON T2.attribute_id = T3.id \nWHERE T3.attribute_name = 'Intelligence' \nORDER BY T2.attribute_value ASC \nLIMIT 1",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id  =  T2.id \nWHERE T1.superhero_name = 'Copycat';",
  "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50",
  "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Death Touch'",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN gender AS T2 ON T1.gender_id = T2.id\nJOIN hero_attribute AS T3 ON T1.id = T3.hero_id\nJOIN attribute AS T4 ON T3.attribute_id = T4.id\nWHERE T2.gender = 'Female'\n  AND T4.attribute_name = 'Strength'\n  AND T3.attribute_value = 100;",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nGROUP BY T1.superhero_name \nORDER BY COUNT(T2.power_id) DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN race AS T2\nON T1.race_id = T2.id\nWHERE T2.race = 'Vampire'",
  "SELECT \n  CAST(SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s.id) AS bad_alignment_percentage,\n  SUM(CASE WHEN a.alignment = 'Bad' AND pu.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_bad_count\nFROM \n  superhero s\nJOIN \n  alignment a ON s.alignment_id = a.id\nJOIN \n  publisher pu ON s.publisher_id = pu.id;",
  "SELECT \n  SUM(IIF(T2.publisher_name = 'Marvel Comics', 1, 0)) - \n  SUM(IIF(T2.publisher_name = 'DC Comics', 1, 0)) AS difference\nFROM \n  superhero AS T1\nJOIN \n  publisher AS T2 \nON \n  T1.publisher_id = T2.id",
  "SELECT id \nFROM publisher \nWHERE publisher_name = 'Star Trek'",
  "SELECT AVG(attribute_value) \nFROM hero_attribute",
  "SELECT COUNT(*) \nFROM superhero \nWHERE full_name IS NULL",
  "SELECT colour.colour \nFROM colour \nJOIN superhero \nON colour.id = superhero.eye_colour_id \nWHERE superhero.id = 75;",
  "SELECT T3.power_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN superpower AS T3 ON T2.power_id = T3.id\nWHERE T1.superhero_name = 'Deathlok'",
  "SELECT AVG(superhero.weight_kg) \nFROM superhero \nJOIN gender ON superhero.gender_id = gender.id \nWHERE gender.gender = 'Female'",
  "SELECT T4.power_name \nFROM superhero AS T1 \nJOIN gender AS T2 ON T1.gender_id = T2.id \nJOIN hero_power AS T3 ON T1.id = T3.hero_id \nJOIN superpower AS T4 ON T3.power_id = T4.id \nWHERE T2.gender = 'Male' \nLIMIT 5",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE race.race = 'Alien'",
  "SELECT superhero_name \nFROM superhero \nJOIN colour \nON superhero.eye_colour_id = colour.id \nWHERE height_cm BETWEEN 170 AND 190 \nAND colour.colour = 'No Colour';",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 \nON T1.power_id  =  T2.id \nWHERE T1.hero_id = 56",
  "SELECT T1.full_name \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id  =  T2.id \nWHERE T2.race  =  'Demi-God' \nLIMIT 5",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN alignment AS T2\nON T1.alignment_id = T2.id\nWHERE T2.alignment = 'Bad';",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id  =  T2.id \nWHERE T1.weight_kg = 169",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.hair_colour_id  =  T2.id \nJOIN race AS T3 ON T1.race_id = T3.id \nWHERE T1.height_cm = 185 \nAND T3.race = 'Human';",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id  =  T2.id \nORDER BY T1.weight_kg DESC \nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM superhero AS T1\nJOIN publisher AS T2\nON T1.publisher_id = T2.id\nWHERE T1.height_cm BETWEEN 150 AND 180;",
  "SELECT T1.superhero_name\nFROM superhero AS T1\nJOIN gender AS T2\nON T1.gender_id = T2.id\nWHERE T2.gender = 'Male'\n  AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
  "SELECT T1.power_name \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nGROUP BY T1.power_name \nORDER BY COUNT(*) DESC \nLIMIT 1",
  "SELECT T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id  =  T2.hero_id \nWHERE T1.superhero_name  =  'Abomination'",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 \nON T1.power_id  =  T2.id \nWHERE T1.hero_id = 1",
  "SELECT COUNT(*)\nFROM superpower AS T1\nJOIN hero_power AS T2\nON T1.id = T2.power_id\nWHERE T1.power_name = 'Stealth'",
  "SELECT T1.full_name\nFROM superhero AS T1\nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id\nJOIN attribute AS T3 ON T2.attribute_id = T3.id\nWHERE T3.attribute_name = 'Strength'\nORDER BY T2.attribute_value DESC\nLIMIT 1",
  "SELECT CAST(COUNT(id) AS REAL) / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) AS average\nFROM superhero",
  "SELECT COUNT(*)\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Dark Horse Comics';",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nINNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id \nINNER JOIN attribute AS T3 ON T2.attribute_id = T3.id \nINNER JOIN publisher AS T4 ON T1.publisher_id = T4.id \nWHERE T3.attribute_name = 'Durability' \n  AND T4.publisher_name = 'Dark Horse Comics' \nORDER BY T2.attribute_value DESC \nLIMIT 1",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id  =  T2.id \nWHERE T1.full_name = 'Abraham Sapien'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T3.power_name = 'Flight'",
  "SELECT \n    superhero.eye_colour_id, \n    superhero.hair_colour_id, \n    superhero.skin_colour_id \nFROM \n    superhero \nINNER JOIN \n    gender ON superhero.gender_id = gender.id \nINNER JOIN \n    publisher ON superhero.publisher_id = publisher.id \nWHERE \n    gender.gender = 'Female' \n    AND publisher.publisher_name = 'Dark Horse Comics'",
  "SELECT \n    superhero.superhero_name, \n    publisher.publisher_name \nFROM \n    superhero \nJOIN \n    publisher \nON \n    superhero.publisher_id = publisher.id \nWHERE \n    superhero.hair_colour_id = superhero.eye_colour_id \n    AND \n    superhero.hair_colour_id = superhero.skin_colour_id;",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.superhero_name = 'A-Bomb'",
  "SELECT CAST(SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE g.gender = 'Female';",
  "SELECT superhero.superhero_name, race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.full_name = 'Charles Chandler'",
  "SELECT T2.gender \nFROM superhero AS T1 \nJOIN gender AS T2 \nON T1.gender_id  =  T2.id \nWHERE T1.superhero_name  =  'Agent 13'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T3.power_name = 'Adaptation'",
  "SELECT COUNT(*)\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nWHERE superhero.superhero_name = 'Amazo';",
  "SELECT T3.power_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN superpower AS T3 ON T2.power_id = T3.id\nWHERE T1.full_name = 'Hunter Zolomon'",
  "SELECT superhero.height_cm \nFROM superhero \nJOIN colour \nON superhero.eye_colour_id = colour.id \nWHERE colour.colour = 'Amber'",
  "SELECT DISTINCT T1.superhero_name\nFROM superhero AS T1\nJOIN colour AS T2 ON T1.eye_colour_id = T2.id\nJOIN colour AS T3 ON T1.hair_colour_id = T3.id\nWHERE T2.colour = 'Black' AND T3.colour = 'Black'",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.eye_colour_id = T2.id \nJOIN colour AS T3 ON T1.skin_colour_id = T3.id \nWHERE T3.colour = 'Gold';",
  "SELECT superhero.full_name \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE race.race = 'Vampire'",
  "SELECT superhero_name\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE alignment.alignment = 'Neutral'",
  "SELECT COUNT(*)\nFROM hero_attribute ha\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Strength'\n  AND ha.attribute_value = (\n    SELECT MAX(ha2.attribute_value)\n    FROM hero_attribute ha2\n    JOIN attribute a2 ON ha2.attribute_id = a2.id\n    WHERE a2.attribute_name = 'Strength'\n  )",
  "SELECT T2.race, T3.alignment \nFROM superhero AS T1 \nJOIN race AS T2 ON T1.race_id = T2.id \nJOIN alignment AS T3 ON T1.alignment_id = T3.id \nWHERE T1.superhero_name = 'Cameron Hicks';",
  "SELECT CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics';",
  "SELECT AVG(T1.weight_kg) \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id  =  T2.id \nWHERE T2.race  =  'Alien'",
  "SELECT \n  (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - \n  (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') \n  AS weight_difference;",
  "SELECT AVG(height_cm) FROM superhero",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.superhero_name = 'Abomination'",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN race AS T2 ON T1.race_id = T2.id\nJOIN gender AS T3 ON T1.gender_id = T3.id\nWHERE T2.id = 21 AND T3.id = 1",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id \nJOIN attribute AS T3 ON T2.attribute_id = T3.id \nWHERE T3.attribute_name = 'Speed' \nORDER BY T2.attribute_value DESC \nLIMIT 1",
  "SELECT COUNT(*) \nFROM superhero \nWHERE alignment_id = 3;",
  "SELECT T2.attribute_name, T1.attribute_value\nFROM hero_attribute AS T1\nJOIN superhero AS T3 ON T1.hero_id = T3.id\nJOIN attribute AS T2 ON T1.attribute_id = T2.id\nWHERE T3.superhero_name = '3-D Man'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nJOIN colour AS T3 \nON T1.hair_colour_id = T3.id \nWHERE T2.colour = 'Blue' \nAND T3.colour = 'Brown'",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id  =  T2.id \nWHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
  "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = 1;",
  "SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id",
  "SELECT CAST(SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS ratio\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id;",
  "SELECT superhero_name \nFROM superhero \nORDER BY height_cm DESC \nLIMIT 1",
  "SELECT id \nFROM superpower \nWHERE power_name = 'Cryokinesis'",
  "SELECT superhero_name \nFROM superhero \nWHERE id = 294",
  "SELECT full_name \nFROM superhero \nWHERE weight_kg = 0 OR weight_kg IS NULL",
  "SELECT colour.colour \nFROM superhero \nJOIN colour ON superhero.eye_colour_id = colour.id \nWHERE superhero.full_name = 'Karen Beecher-Duncan'",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.full_name = 'Helen Parr'",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.weight_kg = 108 AND T1.height_cm = 188",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id  =  T2.id \nWHERE T1.id = 38;",
  "SELECT T2.race \nFROM hero_attribute AS T1 \nJOIN superhero AS T3 ON T1.hero_id  =  T3.id \nJOIN race AS T2 ON T3.race_id  =  T2.id \nORDER BY T1.attribute_value DESC \nLIMIT 1",
  "SELECT a.alignment, sp.power_name\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Atom IV';",
  "SELECT superhero.full_name \nFROM superhero \nJOIN colour \nON superhero.eye_colour_id = colour.id \nWHERE colour.colour = 'Blue' \nLIMIT 5;",
  "SELECT AVG(T1.attribute_value) \nFROM hero_attribute AS T1 \nJOIN superhero AS T2 \nON T1.hero_id  =  T2.id \nWHERE T2.alignment_id = 3;",
  "SELECT T2.colour \nFROM hero_attribute AS T1 \nJOIN superhero AS T3 ON T1.hero_id  =  T3.id \nJOIN colour AS T2 ON T3.skin_colour_id  =  T2.id \nWHERE T1.attribute_value  =  100",
  "SELECT COUNT(*)\nFROM superhero\nWHERE alignment_id = 1 AND gender_id = 2",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_attribute \nON superhero.id = hero_attribute.hero_id \nWHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 ON T1.race_id = T2.id \nJOIN colour AS T3 ON T1.hair_colour_id = T3.id \nJOIN gender AS T4 ON T1.gender_id = T4.id \nWHERE T3.colour = 'Blue' \n  AND T4.gender = 'Male';",
  "SELECT CAST(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero \nWHERE alignment_id = 2;",
  "SELECT \n  SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference\nFROM \n  superhero AS T1\nJOIN \n  colour AS T2\nON \n  T1.eye_colour_id = T2.id\nWHERE \n  T1.weight_kg = 0 OR T1.weight_kg IS NULL",
  "SELECT T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T2.attribute_id = T3.id \nWHERE T1.superhero_name = 'Hulk' \nAND T3.attribute_name = 'Strength';",
  "SELECT T3.power_name\nFROM superhero AS T1\nJOIN hero_power AS T2 ON T1.id = T2.hero_id\nJOIN superpower AS T3 ON T2.power_id = T3.id\nWHERE T1.superhero_name = 'Ajax'",
  "SELECT COUNT(*) \nFROM superhero \nJOIN colour ON superhero.skin_colour_id = colour.id \nJOIN alignment ON superhero.alignment_id = alignment.id \nWHERE colour.colour = 'Green' \n  AND alignment.alignment = 'Bad';",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN gender AS T2 ON T1.gender_id = T2.id\nJOIN publisher AS T3 ON T1.publisher_id = T3.id\nWHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics';",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T3.power_name = 'Wind Control' \nORDER BY T1.superhero_name",
  "SELECT T4.gender \nFROM superpower AS T1 \nJOIN hero_power AS T2 \n  ON T1.id = T2.power_id \nJOIN superhero AS T3 \n  ON T2.hero_id = T3.id \nJOIN gender AS T4 \n  ON T3.gender_id = T4.id \nWHERE T1.power_name = 'Phoenix Force'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id  =  T2.id \nWHERE T2.publisher_name  =  'DC Comics' \nORDER BY T1.weight_kg DESC \nLIMIT 1",
  "SELECT AVG(s.height_cm)\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE r.race <> 'Human'\n  AND p.publisher_name = 'Dark Horse Comics';",
  "SELECT COUNT(*)\nFROM attribute\nJOIN hero_attribute ON attribute.id = hero_attribute.attribute_id\nWHERE attribute.attribute_name = 'Speed'\n  AND hero_attribute.attribute_value = 100;",
  "SELECT \n  SUM(IIF(T2.publisher_name = 'DC Comics', 1, 0)) - \n  SUM(IIF(T2.publisher_name = 'Marvel Comics', 1, 0)) AS difference\nFROM \n  superhero AS T1\nJOIN \n  publisher AS T2\nON \n  T1.publisher_id = T2.id",
  "SELECT T3.attribute_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T3.id = T2.attribute_id \nWHERE T1.superhero_name = 'Black Panther' \nORDER BY T2.attribute_value ASC \nLIMIT 1",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id  =  T2.id \nWHERE T1.superhero_name  =  'Abomination'",
  "SELECT superhero_name \nFROM superhero \nORDER BY height_cm DESC \nLIMIT 1",
  "SELECT superhero_name \nFROM superhero \nWHERE full_name = 'Charles Chandler'",
  "SELECT CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'George Lucas';",
  "SELECT CAST(SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero s \nINNER JOIN publisher p ON s.publisher_id = p.id \nINNER JOIN alignment a ON s.alignment_id = a.id \nWHERE p.publisher_name = 'Marvel Comics';",
  "SELECT COUNT(*) \nFROM superhero \nWHERE full_name LIKE 'John%';",
  "SELECT hero_id \nFROM hero_attribute \nORDER BY attribute_value \nLIMIT 1",
  "SELECT full_name \nFROM superhero \nWHERE superhero_name = 'Alien'",
  "SELECT superhero.full_name\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'",
  "SELECT T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nWHERE T1.superhero_name = 'Aquababy'",
  "SELECT superhero.weight_kg, race.race \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE superhero.id = 40;",
  "SELECT AVG(height_cm) \nFROM superhero \nJOIN alignment ON superhero.alignment_id = alignment.id \nWHERE alignment.alignment = 'Neutral';",
  "SELECT T2.hero_id \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nWHERE T1.power_name = 'Intelligence'",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id  =  T2.id \nWHERE T1.superhero_name  =  'Blackwulf'",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)",
  "SELECT T2.driverRef\nFROM qualifying AS T1\nJOIN drivers AS T2\nON T1.driverId = T2.driverId\nWHERE T1.raceId = 20\nORDER BY T1.q1 DESC\nLIMIT 5;",
  "SELECT T2.surname \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 19 \nORDER BY T1.q2 ASC \nLIMIT 1",
  "SELECT races.year \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.location = 'Shanghai'",
  "SELECT races.url\nFROM races\nJOIN circuits ON races.circuitid = circuits.circuitid\nWHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
  "SELECT T1.name \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.country = \"Germany\";",
  "SELECT DISTINCT T4.location\nFROM constructors AS T1\nJOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nJOIN circuits AS T4 ON T3.circuitId = T4.circuitId\nWHERE T1.name = \"Renault\"",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN circuits AS T2\nON T1.circuitId = T2.circuitId\nWHERE T1.year = 2010\n  AND T2.country NOT IN ('Asia', 'Europe');",
  "SELECT races.name \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.country = 'Spain'",
  "SELECT circuits.lat, circuits.lng \nFROM circuits \nJOIN races ON circuits.circuitid = races.circuitid \nWHERE races.name = 'Australian Grand Prix'",
  "SELECT T1.url \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.name = \"Sepang International Circuit\"",
  "SELECT T1.time \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.name = \"Sepang International Circuit\"",
  "SELECT circuits.lat, circuits.lng \nFROM circuits \nJOIN races \nON circuits.circuitId = races.circuitId \nWHERE races.name = 'Abu Dhabi Grand Prix'",
  "SELECT T1.nationality\nFROM constructors AS T1\nJOIN constructorresults AS T2\nON T1.constructorId = T2.constructorId\nWHERE T2.raceId = 24 AND T2.points = 1",
  "SELECT q1 \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.forename = \"Bruno\" \n  AND T2.surname = \"Senna\" \n  AND T1.raceId = 354;",
  "SELECT T1.nationality \nFROM drivers AS T1 \nJOIN qualifying AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.raceId = 355 AND T2.q2 = '0:01:40';",
  "SELECT number \nFROM qualifying \nWHERE raceId = 903 AND q3 = '0:01:54'",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.name = 'Bahrain Grand Prix'\n  AND T1.year = 2007\n  AND T2.time IS NULL;",
  "SELECT T2.url \nFROM races AS T1 \nJOIN seasons AS T2 \nON T1.year = T2.year \nWHERE T1.raceId = 901;",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.date = '2015-11-29'\nAND T2.time IS NOT NULL;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 592 AND T2.time IS NOT NULL\nORDER BY T1.dob ASC\nLIMIT 1",
  "SELECT T1.url\nFROM drivers AS T1\nJOIN lapTimes AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 161\nAND T2.time = '1:01:27'",
  "SELECT T2.nationality\nFROM results AS T1\nJOIN drivers AS T2\nON T1.driverId = T2.driverId\nWHERE T1.raceId = 933\nORDER BY T1.fastestLapSpeed DESC\nLIMIT 1",
  "SELECT circuits.lat, circuits.lng \nFROM circuits \nJOIN races \nON circuits.circuitId = races.circuitId \nWHERE races.name = 'Malaysian Grand Prix'",
  "SELECT T2.url\nFROM constructorResults AS T1\nJOIN constructors AS T2\nON T1.constructorId = T2.constructorId\nWHERE T1.raceId = 9\nORDER BY T1.points DESC\nLIMIT 1",
  "SELECT q1 \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 345 \n  AND T2.forename = \"Lucas\" \n  AND T2.surname = \"di Grassi\";",
  "SELECT T2.nationality \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 347 AND T1.q2 = '0:01:15';",
  "SELECT T2.code \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 45 AND T1.q3 = '1:01:33'",
  "SELECT T2.time\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T1.forename = 'Bruce'\n  AND T1.surname = 'McLaren'\n  AND T2.raceId = 743;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T3.name = \"San Marino Grand Prix\" AND T3.year = 2006 AND T2.position = 2",
  "SELECT T2.url\nFROM races AS T1\nJOIN seasons AS T2\nON T1.year = T2.year\nWHERE T1.raceId = 901",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 872 AND T2.time IS NOT NULL\nORDER BY T1.dob DESC\nLIMIT 1;",
  "SELECT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN lapTimes AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.raceId = 348 \nORDER BY T2.time \nLIMIT 1",
  "SELECT T1.nationality \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nORDER BY T2.fastestLapSpeed DESC \nLIMIT 1",
  "SELECT \n  CAST(\n    (r1.fastestLapSpeed - r2.fastestLapSpeed) AS REAL\n  ) * 100 / r1.fastestLapSpeed AS percentage\nFROM \n  results r1\nJOIN \n  results r2 \n  ON r1.driverId = r2.driverId\nJOIN \n  drivers d \n  ON r1.driverId = d.driverId\nWHERE \n  d.forename = 'Paul' \n  AND d.surname = 'di Resta' \n  AND r1.raceId = 853 \n  AND r2.raceId = 854;",
  "SELECT CAST(SUM(CASE WHEN r.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(r.driverId) AS completion_rate\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.date = '1983-07-16';",
  "SELECT \"year\"\nFROM races\nWHERE name = 'Singapore Grand Prix'\nORDER BY \"year\" ASC\nLIMIT 1",
  "SELECT name \nFROM races \nWHERE year = 2005 \nORDER BY name DESC;",
  "SELECT name \nFROM races \nWHERE STRFTIME('%Y-%m', date) = (\n  SELECT STRFTIME('%Y-%m', date) \n  FROM races \n  ORDER BY date \n  LIMIT 1\n)",
  "SELECT name, date\nFROM races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1",
  "SELECT `year`\nFROM races\nGROUP BY `year`\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT name \nFROM races \nWHERE year = 2017 \nAND name NOT IN (\n    SELECT name \n    FROM races \n    WHERE year = 2000\n)",
  "SELECT \n  circuits.country, \n  circuits.name, \n  circuits.location \nFROM \n  circuits \n  JOIN races ON circuits.circuitid = races.circuitid \nWHERE \n  races.name = 'European Grand Prix' \nORDER BY \n  races.year ASC \nLIMIT 1;",
  "SELECT r.year \nFROM races r \nJOIN circuits c ON r.circuitid = c.circuitid \nWHERE r.name = \"British Grand Prix\" AND c.name = \"Brands Hatch\" \nORDER BY r.year DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN circuits AS T2\nON T1.circuitid = T2.circuitid\nWHERE T1.name = \"British Grand Prix\"\nAND T2.name = \"Silverstone Circuit\"\nAND T2.country = \"United Kingdom\";",
  "SELECT d.forename, d.surname\nFROM races r\nJOIN results re ON r.raceid = re.raceid\nJOIN drivers d ON re.driverid = d.driverid\nWHERE r.name = \"Singapore Grand Prix\" AND r.year = 2010\nORDER BY re.position;",
  "SELECT T1.forename, T1.surname, T2.points\nFROM drivers AS T1\nJOIN driverStandings AS T2\nON T1.driverId = T2.driverId\nORDER BY T2.points DESC\nLIMIT 1",
  "SELECT \n    d.forename, \n    d.surname, \n    r.points \nFROM \n    results r\nJOIN \n    drivers d ON r.driverId = d.driverId\nJOIN \n    races rc ON r.raceId = rc.raceId\nWHERE \n    rc.name = 'Chinese Grand Prix' \n    AND rc.year = 2017\nORDER BY \n    r.points DESC\nLIMIT 3",
  "SELECT T3.milliseconds, T1.forename, T1.surname, T2.name \nFROM drivers AS T1 \nJOIN lapTimes AS T3 ON T1.driverId = T3.driverId \nJOIN races AS T2 ON T2.raceId = T3.raceId \nORDER BY T3.milliseconds ASC \nLIMIT 1;",
  "SELECT AVG(laptimes.milliseconds)\nFROM laptimes\nJOIN drivers ON laptimes.driverId = drivers.driverId\nJOIN races ON laptimes.raceId = races.raceId\nWHERE drivers.forename = 'Lewis'\n  AND drivers.surname = 'Hamilton'\n  AND races.name = 'Malaysian Grand Prix'\n  AND races.year = 2009;",
  "SELECT CAST(SUM(CASE WHEN res.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM drivers d\nJOIN results res ON d.driverid = res.driverid\nJOIN races r ON res.raceid = r.raceid\nWHERE d.surname = 'Hamilton' AND r.year >= 2010",
  "SELECT \n  d.forename, \n  d.surname, \n  d.nationality, \n  ds.points \nFROM \n  drivers d \n  JOIN driverStandings ds ON d.driverId = ds.driverId \nORDER BY \n  ds.wins DESC \nLIMIT 1;",
  "SELECT strftime('%Y', 'now') - strftime('%Y', dob) AS age, forename, surname\nFROM drivers\nWHERE nationality = 'Japanese'\nORDER BY dob DESC\nLIMIT 1;",
  "SELECT T1.name \nFROM circuits AS T1 \nJOIN races AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.year BETWEEN 1990 AND 2000 \nGROUP BY T1.name \nHAVING COUNT(*) = 4;",
  "SELECT circuits.name, circuits.location, races.name \nFROM circuits \nJOIN races \nON circuits.circuitid = races.circuitid \nWHERE circuits.country = 'USA' \n  AND races.year = 2006;",
  "SELECT \n  r.name, \n  c.name, \n  c.location \nFROM \n  races r \n  JOIN circuits c \n  ON r.circuitid = c.circuitid \nWHERE \n  STRFTIME('%m', r.date) = '09' \n  AND STRFTIME('%Y', r.date) = '2005'",
  "SELECT races.name\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename = 'Alex'\n  AND drivers.surname = 'Yoong'\n  AND results.position < 20",
  "SELECT COUNT(*)\nFROM driverStandings ds\nJOIN races r ON ds.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nJOIN drivers d ON ds.driverId = d.driverId\nWHERE c.name = 'Sepang International Circuit'\n  AND d.forename = 'Michael'\n  AND d.surname = 'Schumacher'\n  AND ds.wins = 1",
  "SELECT races.name, races.year\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nWHERE drivers.forename = \"Michael\" AND drivers.surname = \"Schumacher\"\nORDER BY lapTimes.milliseconds ASC\nLIMIT 1;",
  "SELECT AVG(T2.points) \nFROM drivers AS T1 \nJOIN driverStandings AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T1.forename = \"Eddie\" \n  AND T1.surname = \"Irvine\" \n  AND T3.year = 2000",
  "SELECT \n  races.name, \n  results.points \nFROM \n  results \n  INNER JOIN races ON results.raceId = races.raceId \n  INNER JOIN drivers ON results.driverId = drivers.driverId \nWHERE \n  drivers.forename = \"Lewis\" \n  AND drivers.surname = \"Hamilton\" \nORDER BY \n  races.year ASC \nLIMIT \n  1",
  "SELECT races.name, circuits.country\nFROM races\nJOIN circuits ON races.circuitid = circuits.circuitid\nWHERE races.year = 2017\nORDER BY races.date",
  "SELECT \n  races.name, \n  races.year, \n  circuits.location \nFROM \n  races \n  JOIN circuits ON races.circuitid = circuits.circuitid \n  JOIN results ON races.raceid = results.raceid \nORDER BY \n  results.laps DESC \nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN c.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'European Grand Prix';",
  "SELECT lat, lng \nFROM circuits \nWHERE name = 'Silverstone Circuit';",
  "SELECT name \nFROM circuits \nWHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') \nORDER BY lat DESC \nLIMIT 1",
  "SELECT circuitRef \nFROM circuits \nWHERE name = 'Marina Bay Street Circuit';",
  "SELECT country \nFROM circuits \nORDER BY alt DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM drivers\nWHERE code IS NULL",
  "SELECT nationality \nFROM drivers \nORDER BY dob ASC \nLIMIT 1",
  "SELECT surname \nFROM drivers \nWHERE nationality = 'Italian'",
  "SELECT url \nFROM drivers \nWHERE forename = \"Anthony\" \n  AND surname = \"Davidson\";",
  "SELECT driverRef \nFROM drivers \nWHERE forename = \"Lewis\" \n  AND surname = \"Hamilton\";",
  "SELECT T2.name \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T1.name = \"Spanish Grand Prix\" AND T1.year = 2009;",
  "SELECT T1.year\nFROM races AS T1\nJOIN circuits AS T2\nON T1.circuitid = T2.circuitid\nWHERE T2.name = 'Silverstone Circuit'",
  "SELECT circuits.url \nFROM circuits \nJOIN races \nON circuits.circuitid = races.circuitid \nWHERE circuits.name = 'Silverstone Circuit'",
  "SELECT T1.time \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T1.year = 2010 \nAND T2.name = 'Abu Dhabi International Circuit';",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN circuits AS T2\nON T1.circuitid = T2.circuitid\nWHERE T2.country = 'Italy'",
  "SELECT T1.date \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.name = \"Circuit de Barcelona-Catalunya\"",
  "SELECT circuits.url \nFROM circuits \nJOIN races \nON circuits.circuitId = races.circuitId \nWHERE races.name = \"Spanish Grand Prix\" \nAND races.year = 2009;",
  "SELECT MIN(results.fastestLapTime) \nFROM results \nJOIN drivers \nON results.driverId = drivers.driverId \nWHERE drivers.forename = 'Lewis' \n  AND drivers.surname = 'Hamilton';",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nORDER BY T2.fastestLapSpeed DESC\nLIMIT 1",
  "SELECT T3.driverRef\nFROM races AS T1\nJOIN results AS T2 ON T1.raceId = T2.raceId\nJOIN drivers AS T3 ON T2.driverId = T3.driverId\nWHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2007 AND T2.position = 1",
  "SELECT DISTINCT T1.name\nFROM races AS T1\nJOIN results AS T2 ON T1.raceId = T2.raceId\nJOIN drivers AS T3 ON T2.driverId = T3.driverId\nWHERE T3.forename = \"Lewis\" AND T3.surname = \"Hamilton\"",
  "SELECT races.name\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename = \"Lewis\" AND drivers.surname = \"Hamilton\"\nORDER BY results.rank ASC\nLIMIT 1",
  "SELECT MAX(T2.fastestLapSpeed)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;",
  "SELECT DISTINCT r.year\nFROM drivers d\nJOIN results rs ON d.driverId = rs.driverId\nJOIN races r ON rs.raceId = r.raceId\nWHERE d.forename = \"Lewis\" AND d.surname = \"Hamilton\"",
  "SELECT T1.positionOrder \nFROM results AS T1 \nJOIN drivers AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T3.name = 'Chinese Grand Prix' \n  AND T3.year = 2008 \n  AND T2.forename = 'Lewis' \n  AND T2.surname = 'Hamilton';",
  "SELECT \n    d.forename, \n    d.surname \nFROM \n    drivers d \nJOIN \n    results r \nON \n    d.driverId = r.driverId \nJOIN \n    races ra \nON \n    r.raceId = ra.raceId \nWHERE \n    ra.name = \"Australian Grand Prix\" \nAND \n    ra.year = 1989 \nAND \n    r.grid = 4",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.name = \"Australian Grand Prix\" \n  AND T1.year = 2008 \n  AND T2.time IS NOT NULL;",
  "SELECT T1.fastestLapTime \nFROM results AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nJOIN drivers AS T3 ON T1.driverId = T3.driverId \nWHERE T3.forename = \"Lewis\" \n  AND T3.surname = \"Hamilton\" \n  AND T2.name = \"Australian Grand Prix\" \n  AND T2.year = 2008;",
  "SELECT T2.time\nFROM races AS T1\nJOIN results AS T2 ON T1.raceId = T2.raceId\nWHERE T1.name = 'Chinese Grand Prix' \n  AND T1.year = 2008 \n  AND T2.rank = 2;",
  "SELECT T1.forename, T1.surname, T1.url\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.position = 1;",
  "SELECT COUNT(*)\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T3.name = \"Australian Grand Prix\"\n  AND T3.year = 2008\n  AND T1.nationality = \"British\";",
  "SELECT COUNT(DISTINCT T2.driverId) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = \"Chinese Grand Prix\" \nAND T1.year = 2008 \nAND T2.time IS NOT NULL;",
  "SELECT SUM(T2.points) \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\";",
  "SELECT AVG(\n         CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS REAL) * 60 +  -- Convert minutes to seconds\n         CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1, 2) AS REAL) +     -- Extract seconds\n         CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, '.') + 1) AS REAL) / 1000    -- Convert milliseconds to seconds\n       ) AS average_fastest_lap_time\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nWHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\";",
  "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008;",
  "SELECT CAST(\n         (MAX(results.time) - MIN(results.time)) AS REAL\n       ) * 100 / MAX(results.time) AS percentage_faster\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Australian Grand Prix' \n  AND races.year = 2008 \n  AND results.time IS NOT NULL;",
  "SELECT COUNT(*) \nFROM circuits \nWHERE location = 'Adelaide' AND country = 'Australia';",
  "SELECT lat, lng \nFROM circuits \nWHERE country = 'USA'",
  "SELECT COUNT(*) \nFROM drivers \nWHERE nationality = 'British' \n  AND dob > '1980-12-31';",
  "SELECT MAX(T2.points)\nFROM constructors AS T1\nJOIN constructorStandings AS T2\nON T1.constructorId = T2.constructorId\nWHERE T1.nationality = 'British'",
  "SELECT T1.name \nFROM constructors AS T1 \nJOIN constructorStandings AS T2 \nON T1.constructorId = T2.constructorId \nORDER BY T2.points DESC \nLIMIT 1",
  "SELECT constructors.name \nFROM constructors \nJOIN constructorStandings \nON constructors.constructorId = constructorStandings.constructorId \nWHERE constructorStandings.raceId = 291 \nAND constructorStandings.points = 0;",
  "SELECT COUNT(*)\nFROM (\n  SELECT T1.constructorId\n  FROM constructors AS T1\n  JOIN constructorStandings AS T2\n  ON T1.constructorId = T2.constructorId\n  WHERE T1.nationality = \"Japanese\" AND T2.points = 0\n  GROUP BY T1.constructorId\n  HAVING COUNT(T2.raceId) = 2\n)",
  "SELECT T1.name \nFROM constructors AS T1 \nJOIN constructorStandings AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T2.position = 1",
  "SELECT COUNT(*)\nFROM results AS T1\nJOIN constructors AS T2\nON T1.constructorId = T2.constructorId\nWHERE T2.nationality = 'French'\n  AND T1.laps > 50;",
  "SELECT CAST(SUM(CASE WHEN r.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.nationality = 'Japanese'\n  AND ra.year BETWEEN 2007 AND 2009;",
  "SELECT AVG(res.milliseconds / 1000.0) AS average_time_seconds, r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.positionOrder = 1 AND r.year < 1975 AND res.time IS NOT NULL\nGROUP BY r.year",
  "SELECT DISTINCT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T1.dob > '1975-12-31' AND T2.rank = 2",
  "SELECT COUNT(*)\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T1.nationality = 'Italian' AND T2.time IS NULL",
  "SELECT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nORDER BY T2.fastestLapTime \nLIMIT 1",
  "SELECT T1.fastestLap \nFROM results AS T1 \nJOIN races AS T2 \nON T1.raceId = T2.raceId \nWHERE T2.year = 2009 \nORDER BY T1.fastestLapTime \nLIMIT 1",
  "SELECT AVG(results.fastestLapSpeed) \nFROM races \nINNER JOIN results \nON races.raceId = results.raceId \nWHERE races.name = 'Spanish Grand Prix' \nAND races.year = 2009;",
  "SELECT T1.name, T1.year\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T2.milliseconds IS NOT NULL\nORDER BY T2.milliseconds ASC\nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN d.dob < '1985-01-01' AND res.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM results AS res\nJOIN drivers AS d ON res.driverId = d.driverId\nJOIN races AS r ON res.raceId = r.raceId\nWHERE r.year BETWEEN 2000 AND 2005;",
  "SELECT COUNT(*)\nFROM drivers AS T1\nJOIN lapTimes AS T2\nON T1.driverId = T2.driverId\nWHERE T1.nationality = 'French' AND T2.milliseconds < 120000",
  "SELECT code \nFROM drivers \nWHERE nationality = 'American';",
  "SELECT raceId \nFROM races \nWHERE year = 2009",
  "SELECT COUNT(driverId) \nFROM results \nWHERE raceId = 18;",
  "SELECT \n    code, \n    SUM(CASE WHEN nationality = 'Dutch' THEN 1 ELSE 0 END) AS netherlandic_count\nFROM \n    drivers\nORDER BY \n    dob DESC\nLIMIT 3;",
  "SELECT driverRef \nFROM drivers \nWHERE forename = \"Robert\" \n  AND surname = \"Kubica\";",
  "SELECT COUNT(*)\nFROM drivers\nWHERE STRFTIME('%Y', dob) = '1980' AND nationality = 'British';",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN laptimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31'\nORDER BY l.time ASC\nLIMIT 3;",
  "SELECT driverRef \nFROM drivers \nWHERE nationality = \"German\" \nORDER BY dob ASC \nLIMIT 1",
  "SELECT DISTINCT d.driverid, d.code\nFROM drivers AS d\nJOIN results AS r\nON d.driverid = r.driverid\nWHERE STRFTIME('%Y', d.dob) = '1971' AND r.fastestLapTime IS NOT NULL",
  "SELECT \n  d.forename, \n  d.surname \nFROM \n  drivers d \n  JOIN lapTimes l ON d.driverId = l.driverId \nWHERE \n  d.nationality = 'Spanish' \n  AND d.dob < '1982-01-01' \nORDER BY \n  l.time DESC \nLIMIT 10",
  "SELECT DISTINCT T1.year\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T2.fastestLapTime IS NOT NULL",
  "SELECT r.year \nFROM races AS r\nJOIN lapTimes AS l\nON r.raceId = l.raceId\nORDER BY l.time\nLIMIT 1",
  "SELECT driverId \nFROM lapTimes \nWHERE lap = 1 \nORDER BY time ASC \nLIMIT 5",
  "SELECT COUNT(*)\nFROM results\nWHERE statusId = 2\n  AND time IS NOT NULL\n  AND raceId BETWEEN 51 AND 99;",
  "SELECT location, lat, lng \nFROM circuits \nWHERE country = 'Austria';",
  "SELECT raceId \nFROM results \nWHERE time IS NOT NULL \nGROUP BY raceId \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T1.driverRef, T1.nationality, T1.dob\nFROM drivers AS T1\nJOIN qualifying AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 23 AND T2.q2 IS NOT NULL",
  "SELECT r.year, r.name, r.date, r.time\nFROM races r\nJOIN qualifying q ON r.raceId = q.raceId\nJOIN drivers d ON q.driverId = d.driverId\nORDER BY d.dob DESC, r.date ASC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN status AS T3 ON T2.statusId = T3.statusId\nWHERE T1.nationality = 'American' AND T3.status = 'Puncture'",
  "SELECT constructors.url\nFROM constructors\nJOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId\nWHERE constructors.nationality = 'Italian'\nORDER BY constructorStandings.points DESC\nLIMIT 1;",
  "SELECT constructors.url\nFROM constructors\nJOIN constructorStandings\nON constructors.constructorId = constructorStandings.constructorId\nGROUP BY constructors.constructorId\nORDER BY SUM(constructorStandings.wins) DESC\nLIMIT 1;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN lapTimes AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T3.name = 'French Grand Prix' AND T2.lap = 3\nORDER BY T2.time DESC\nLIMIT 1",
  "SELECT T2.name, T1.milliseconds\nFROM lapTimes AS T1\nJOIN races AS T2\nON T1.raceId = T2.raceId\nWHERE T1.lap = 1\nORDER BY T1.milliseconds ASC\nLIMIT 1;",
  "SELECT AVG(results.fastestLapTime) \nFROM results \nJOIN races ON results.raceId = races.raceId \nWHERE races.name = \"United States Grand Prix\" \n  AND races.year = 2006 \n  AND results.rank < 11;",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN pitStops ps ON d.driverId = ps.driverId\nWHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY d.forename, d.surname\nORDER BY AVG(ps.duration) ASC\nLIMIT 3;",
  "SELECT \n    d.forename, \n    d.surname, \n    res.time \nFROM \n    races r \nJOIN \n    results res \nON \n    r.raceid = res.raceid \nJOIN \n    drivers d \nON \n    res.driverid = d.driverid \nWHERE \n    r.name = \"Canadian Grand Prix\" \n    AND \n    r.year = 2008 \n    AND \n    res.position = 1;",
  "SELECT \n    T3.constructorRef, \n    T3.url \nFROM \n    races AS T1 \nJOIN \n    results AS T2 \nON \n    T1.raceId = T2.raceId \nJOIN \n    constructors AS T3 \nON \n    T2.constructorId = T3.constructorId \nWHERE \n    T1.name = \"Singapore Grand Prix\" \n    AND T1.year = 2009 \nORDER BY \n    T2.time \nLIMIT 1;",
  "SELECT forename, surname, dob \nFROM drivers \nWHERE nationality = 'Austrian' \n  AND dob BETWEEN '1981-01-01' AND '1991-12-31'",
  "SELECT \n  forename, \n  surname, \n  url, \n  dob \nFROM \n  drivers \nWHERE \n  nationality = 'German' \n  AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' \nORDER BY \n  dob DESC;",
  "SELECT location, country, lat, lng \nFROM circuits \nWHERE name = \"Hungaroring\";",
  "SELECT cr.points, c.name, c.nationality\nFROM constructorResults cr\nJOIN races r ON cr.raceId = r.raceId\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010\nORDER BY cr.points DESC\nLIMIT 1;",
  "SELECT AVG(results.points)\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nJOIN races ON results.raceId = races.raceId\nWHERE drivers.forename = 'Lewis'\n  AND drivers.surname = 'Hamilton'\n  AND races.name = 'Turkish Grand Prix';",
  "SELECT CAST(COUNT(*) AS REAL) / 11\nFROM races\nWHERE date BETWEEN '2000-01-01' AND '2010-12-31';",
  "SELECT nationality \nFROM drivers \nGROUP BY nationality \nORDER BY COUNT(*) DESC \nLIMIT 1",
  "SELECT wins \nFROM driverStandings \nORDER BY points DESC \nLIMIT 90, 1;",
  "SELECT races.name \nFROM races \nJOIN results ON races.raceId = results.raceId \nORDER BY results.fastestLapTime \nLIMIT 1",
  "SELECT circuits.location, circuits.country\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nORDER BY races.date DESC\nLIMIT 1",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN qualifying AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nJOIN circuits AS T4 ON T3.circuitId = T4.circuitId\nWHERE T4.name = \"Marina Bay Street Circuit\" AND T3.year = 2008\nORDER BY T2.q3 ASC\nLIMIT 1",
  "SELECT \n  d.forename, \n  d.surname, \n  d.nationality, \n  r.name \nFROM \n  drivers d \n  JOIN results rs ON d.driverId = rs.driverId \n  JOIN races r ON rs.raceId = r.raceId \nORDER BY \n  d.dob DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM results AS T1\nJOIN races AS T2 ON T1.raceId = T2.raceId\nWHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3\nGROUP BY T1.driverId\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT T2.wins, T1.forename, T1.surname\nFROM drivers AS T1\nJOIN driverStandings AS T2\nON T1.driverId = T2.driverId\nORDER BY T1.dob ASC\nLIMIT 1;",
  "SELECT MAX(duration) \nFROM pitStops;",
  "SELECT MIN(time) \nFROM lapTimes;",
  "SELECT MAX(pitStops.duration) \nFROM pitStops \nJOIN drivers ON pitStops.driverId = drivers.driverId \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "SELECT T1.lap \nFROM pitStops AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nJOIN drivers AS T3 ON T1.driverId = T3.driverId \nWHERE T2.name = \"Australian Grand Prix\" \n  AND T2.year = 2011 \n  AND T3.forename = \"Lewis\" \n  AND T3.surname = \"Hamilton\";",
  "SELECT p.duration \nFROM pitStops p \nJOIN races r \nON p.raceId = r.raceId \nWHERE r.name = 'Australian Grand Prix' \nAND r.year = 2011;",
  "SELECT T2.time \nFROM drivers AS T1 \nJOIN lapTimes AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.forename = \"Lewis\" \nAND T1.surname = \"Hamilton\" \nORDER BY T2.time \nLIMIT 1;",
  "SELECT DISTINCT d.forename, d.surname\nFROM drivers d\nJOIN laptimes l ON d.driverId = l.driverId\nORDER BY l.time ASC\nLIMIT 20;",
  "SELECT l.position \nFROM lapTimes l \nJOIN drivers d ON l.driverId = d.driverId \nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' \nORDER BY l.time \nLIMIT 1",
  "SELECT MIN(lapTimes.time) \nFROM circuits \nJOIN races ON circuits.circuitId = races.circuitId \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE circuits.name = \"Austrian Grand Prix\"",
  "SELECT l.time \nFROM laptimes l\nJOIN races r ON l.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Italy'\nORDER BY l.time ASC;",
  "SELECT r.name\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE c.name = 'Austrian Grand Prix Circuit'\nORDER BY l.time\nLIMIT 1;",
  "SELECT ps.duration\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN laptimes lt ON r.raceId = lt.raceId\nJOIN pitstops ps ON r.raceId = ps.raceId AND lt.driverId = ps.driverId\nWHERE c.name = 'Austrian Grand Prix'\nORDER BY lt.time\nLIMIT 1",
  "SELECT DISTINCT T1.lat, T1.lng\nFROM circuits AS T1\nJOIN races AS T2 ON T1.circuitId = T2.circuitId\nJOIN lapTimes AS T3 ON T2.raceId = T3.raceId\nWHERE T3.time = '1:29.488'",
  "SELECT AVG(pitStops.milliseconds)\nFROM pitStops\nJOIN drivers ON pitStops.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
  "SELECT AVG(lapTimes.milliseconds)\nFROM lapTimes\nJOIN races ON lapTimes.raceId = races.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Italy'",
  "SELECT player_api_id \nFROM Player_Attributes \nORDER BY overall_rating DESC \nLIMIT 1",
  "SELECT height, player_name\nFROM Player\nORDER BY height DESC\nLIMIT 1",
  "SELECT preferred_foot \nFROM Player_Attributes \nORDER BY potential \nLIMIT 1",
  "SELECT COUNT(*) \nFROM Player_Attributes \nWHERE overall_rating >= 60 \n  AND overall_rating < 65 \n  AND defensive_work_rate = 'low';",
  "SELECT T1.player_api_id \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id  =  T2.player_api_id \nORDER BY T2.crossing DESC \nLIMIT 5",
  "SELECT L.name\nFROM League L\nJOIN `Match` M ON L.id = M.league_id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC\nLIMIT 1",
  "SELECT T2.team_long_name\nFROM `Match` AS T1\nJOIN Team AS T2\nON T1.home_team_api_id = T2.team_api_id\nWHERE T1.season = '2015/2016'\n  AND T1.home_team_goal < T1.away_team_goal\nGROUP BY T2.team_long_name\nORDER BY COUNT(*) ASC\nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.penalties DESC \nLIMIT 10",
  "SELECT T1.team_long_name\nFROM Team AS T1\nJOIN `Match` AS T2 ON T1.team_api_id = T2.away_team_api_id\nJOIN League AS T3 ON T3.id = T2.league_id\nWHERE T3.name = 'Scotland Premier League'\n  AND T2.season = '2009/2010'\n  AND T2.away_team_goal > T2.home_team_goal\nGROUP BY T1.team_long_name\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT buildUpPlaySpeed \nFROM Team_Attributes \nORDER BY buildUpPlaySpeed DESC \nLIMIT 4",
  "SELECT L.name\nFROM `Match` M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC\nLIMIT 1",
  "SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birthday) AS age\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T2.sprint_speed >= 97\n  AND STRFTIME('%Y', T2.`date`) BETWEEN '2013' AND '2015';",
  "SELECT T2.name, COUNT(*) as match_count\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nGROUP BY T2.name\nORDER BY match_count DESC\nLIMIT 1;",
  "SELECT AVG(height) \nFROM Player \nWHERE birthday >= '1990-01-01 00:00:00' \n  AND birthday < '1996-01-01 00:00:00'",
  "SELECT player_api_id\nFROM Player_Attributes\nWHERE date LIKE '2010%' \n  AND overall_rating = (\n    SELECT MAX(overall_rating)\n    FROM Player_Attributes\n    WHERE date LIKE '2010%' \n      AND overall_rating > (\n        SELECT AVG(overall_rating)\n        FROM Player_Attributes\n        WHERE date LIKE '2010%'\n      )\n  )",
  "SELECT team_fifa_api_id \nFROM Team_Attributes \nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
  "SELECT \n    T1.team_long_name \nFROM \n    Team AS T1 \nJOIN \n    Team_Attributes AS T2 \nON \n    T1.team_api_id = T2.team_api_id \nWHERE \n    T2.buildUpPlayPassing > (\n        SELECT \n            AVG(buildUpPlayPassing) \n        FROM \n            Team_Attributes \n        WHERE \n            strftime('%Y', `date`) = '2012'\n    ) \n    AND \n    strftime('%Y', T2.`date`) = '2012';",
  "SELECT CAST(SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE SUBSTR(T1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
  "SELECT L.name\nFROM `Match` AS M\nJOIN League AS L ON M.league_id = L.id\nGROUP BY L.name\nORDER BY SUM(M.home_team_goal + M.away_team_goal) ASC\nLIMIT 5",
  "SELECT AVG(T2.long_shots) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Ahmed Samir Farag'",
  "SELECT \n    P.player_name \nFROM \n    Player AS P \nJOIN \n    Player_Attributes AS PA \nON \n    P.player_api_id = PA.player_api_id \nWHERE \n    P.height > 180 \nGROUP BY \n    P.player_name \nORDER BY \n    AVG(PA.heading_accuracy) DESC \nLIMIT 10",
  "SELECT T1.team_long_name\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T2.buildUpPlayDribblingClass = 'Normal'\n  AND T2.date >= '2014-01-01 00:00:00'\n  AND T2.date <= '2014-01-31 00:00:00'\n  AND T2.chanceCreationPassing < (\n      SELECT AVG(chanceCreationPassing)\n      FROM Team_Attributes\n      WHERE buildUpPlayDribblingClass = 'Normal'\n        AND date >= '2014-01-01 00:00:00'\n        AND date <= '2014-01-31 00:00:00'\n  )\nORDER BY T2.chanceCreationPassing DESC;",
  "SELECT L.name\nFROM League L\nJOIN `Match` M ON L.id = M.league_id\nWHERE M.season = '2009/2010'\nGROUP BY L.name\nHAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
  "SELECT team_short_name \nFROM Team \nWHERE team_long_name = 'Queens Park Rangers'",
  "SELECT player_name\nFROM Player\nWHERE SUBSTR(birthday, 1, 7) = '1970-10'",
  "SELECT T2.attacking_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Franco Zennaro'",
  "SELECT T2.buildUpPlayPositioningClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'ADO Den Haag'",
  "SELECT T2.heading_accuracy \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Francois Affolter' \n  AND T2.date = '2014-09-18 00:00:00'",
  "SELECT T2.overall_rating\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.player_name = 'Gabriel Tamas'\n  AND strftime('%Y', T2.date) = '2011';",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nWHERE T2.name = 'Scotland Premier League'\n  AND T1.season = '2015/2016'",
  "SELECT T2.preferred_foot\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nORDER BY T1.birthday DESC\nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes);",
  "SELECT COUNT(*)\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.weight < 130\nAND T2.preferred_foot = 'left'",
  "SELECT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.chanceCreationPassingClass = 'Risky'",
  "SELECT T2.defensive_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'David Wilson'",
  "SELECT T1.birthday \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1",
  "SELECT League.name \nFROM League \nJOIN Country \nON League.country_id = Country.id \nWHERE Country.name = 'Netherlands'",
  "SELECT AVG(T1.home_team_goal) \nFROM `Match` AS T1 \nJOIN Country AS T2 \nON T1.country_id = T2.id \nWHERE T2.name = 'Poland' \nAND T1.season = '2010/2011'",
  "SELECT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player)\nGROUP BY T1.player_name\nORDER BY AVG(T2.finishing) DESC\nLIMIT 1",
  "SELECT player_name \nFROM Player \nWHERE height > 180",
  "SELECT COUNT(*) \nFROM Player \nWHERE strftime('%Y', birthday) > '1990';",
  "SELECT COUNT(*) \nFROM Player \nWHERE player_name LIKE 'Adam%' \n  AND weight > 170;",
  "SELECT DISTINCT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T2.overall_rating > 80\nAND strftime('%Y', T2.date) BETWEEN '2008' AND '2010';",
  "SELECT T2.potential \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Doran'",
  "SELECT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T2.preferred_foot = 'left'",
  "SELECT T1.team_long_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlaySpeedClass = 'Fast'",
  "SELECT T2.buildUpPlayPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id  =  T2.team_api_id \nWHERE T1.team_short_name  =  'CLB'",
  "SELECT T1.team_short_name\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T2.buildUpPlayPassing > 70",
  "SELECT AVG(t2.overall_rating) \nFROM Player AS t1 \nJOIN Player_Attributes AS t2 \nON t1.player_api_id = t2.player_api_id \nWHERE strftime('%Y', t2.date) BETWEEN '2010' AND '2015' \nAND t1.height > 170;",
  "SELECT player_name \nFROM Player \nORDER BY height \nLIMIT 1",
  "SELECT Country.name \nFROM Country \nJOIN League \nON Country.id = League.country_id \nWHERE League.name = 'Italy Serie A'",
  "SELECT T1.team_short_name\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T2.buildUpPlaySpeed = 31\n  AND T2.buildUpPlayDribbling = 53\n  AND T2.buildUpPlayPassing = 32",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Doran'",
  "SELECT COUNT(*) \nFROM League AS T1 \nJOIN `Match` AS T2 \nON T1.id = T2.league_id \nWHERE T1.name = 'Germany 1. Bundesliga' \n  AND strftime('%Y-%m', T2.date) BETWEEN '2008-08' AND '2008-10';",
  "SELECT T1.team_short_name\nFROM Team AS T1\nJOIN `Match` AS T2\nON T1.team_api_id = T2.home_team_api_id\nWHERE T2.home_team_goal = 10",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.potential = 61 \nORDER BY T2.balance DESC \nLIMIT 1",
  "SELECT \n    CAST(SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN 1 ELSE 0 END) -\n    CAST(SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN 1 ELSE 0 END) AS difference\nFROM \n    Player AS T1\nJOIN \n    Player_Attributes AS T2\nON \n    T1.player_api_id = T2.player_api_id",
  "SELECT team_long_name \nFROM Team \nWHERE team_short_name = 'GEN'",
  "SELECT player_name \nFROM Player \nWHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' \nORDER BY birthday \nLIMIT 1;",
  "SELECT player_name \nFROM Player \nORDER BY height DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM Player_Attributes\nWHERE preferred_foot = 'left' \n  AND attacking_work_rate = 'low';",
  "SELECT Country.name \nFROM League \nJOIN Country ON League.country_id = Country.id \nWHERE League.name = 'Belgium Jupiler League'",
  "SELECT League.name \nFROM Country \nJOIN League \nON Country.id = League.country_id \nWHERE Country.name = 'Germany'",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1;",
  "SELECT COUNT(DISTINCT T1.player_api_id)\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T2.defensive_work_rate = 'high'\n  AND strftime('%Y', T1.birthday) < '1986';",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') \nORDER BY T2.crossing DESC \nLIMIT 1",
  "SELECT T2.heading_accuracy \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Ariel Borysiuk'",
  "SELECT COUNT(*)\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player.height > 180 AND Player_Attributes.volleys > 70",
  "SELECT DISTINCT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T2.volleys > 70 AND T2.dribbling > 70",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN Country AS T2\nON T1.country_id = T2.id\nWHERE T2.name = 'Belgium' AND T1.season = '2008/2009'",
  "SELECT T2.long_passing \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T1.birthday ASC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nWHERE T2.name = 'Belgium Jupiler League'\n  AND SUBSTR(T1.date, 1, 7) = '2009-04'",
  "SELECT L.name\nFROM `Match` AS M\nJOIN League AS L ON M.league_id = L.id\nWHERE M.season = '2008/2009'\nGROUP BY L.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE strftime('%Y', T1.birthday) < '1986'",
  "SELECT \n    CAST(\n        (A.overall_rating - B.overall_rating) AS REAL\n    ) * 100.0 / B.overall_rating AS percentage_difference\nFROM \n    Player_Attributes A\nJOIN \n    Player P1 ON A.player_api_id = P1.player_api_id\nJOIN \n    Player_Attributes B\nJOIN \n    Player P2 ON B.player_api_id = P2.player_api_id\nWHERE \n    P1.player_name = 'Ariel Borysiuk' \n    AND P2.player_name = 'Paulin Puel';",
  "SELECT AVG(TA.buildUpPlaySpeed) \nFROM Team AS T\nJOIN Team_Attributes AS TA\nON T.team_api_id = TA.team_api_id\nWHERE T.team_long_name = 'Heart of Midlothian'",
  "SELECT AVG(T1.overall_rating) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Pietro Marino'",
  "SELECT SUM(T1.crossing) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Aaron Lennox';",
  "SELECT T2.chanceCreationPassing, T2.chanceCreationPassingClass\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T1.team_long_name = 'Ajax'\nORDER BY T2.chanceCreationPassing DESC\nLIMIT 1",
  "SELECT T2.preferred_foot \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Abdou Diallo'",
  "SELECT MAX(T1.overall_rating) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Dorlan Pabon'",
  "SELECT AVG(M.away_team_goal) \nFROM `Match` AS M\nJOIN Team AS T ON M.away_team_api_id = T.team_api_id\nJOIN Country AS C ON M.country_id = C.id\nWHERE T.team_long_name = 'Parma' AND C.name = 'Italy'",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.overall_rating = 77 \n  AND T2.date LIKE '2016-06-23%' \nORDER BY T1.birthday \nLIMIT 1;",
  "SELECT T2.overall_rating \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Mooy' \nAND T2.date LIKE '2016-02-04%'",
  "SELECT T2.potential \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Francesco Parravicini' \n  AND T2.date = '2010-08-30 00:00:00'",
  "SELECT T2.attacking_work_rate\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.player_name = 'Francesco Migliore'\n  AND T2.date LIKE '2015-05-01%';",
  "SELECT T2.defensive_work_rate\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.player_name = 'Kevin Berigaud'\n  AND T2.date = '2013-02-22 00:00:00';",
  "SELECT T2.date \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Kevin Constant' \nORDER BY T2.crossing DESC \nLIMIT 1",
  "SELECT T2.buildUpPlaySpeedClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Willem II' \n  AND T2.date = '2012-02-22 00:00:00'",
  "SELECT T2.buildUpPlayDribblingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_short_name = 'LEI' \n  AND T2.date = '2015-09-10 00:00:00'",
  "SELECT T2.buildUpPlayPassingClass\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T1.team_long_name = 'FC Lorient'\n  AND T2.date LIKE '2010-02-22%'",
  "SELECT T2.chanceCreationPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id  =  T2.team_api_id \nWHERE T1.team_long_name = 'PEC Zwolle' \nAND T2.date = '2013-09-20 00:00:00';",
  "SELECT T2.chanceCreationCrossingClass\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T1.team_long_name = 'Hull City'\n  AND T2.date = '2010-02-22 00:00:00'",
  "SELECT \n    T2.defenceAggressionClass \nFROM \n    Team AS T1 \nJOIN \n    Team_Attributes AS T2 \nON \n    T1.team_fifa_api_id = T2.team_fifa_api_id \nWHERE \n    T1.team_long_name = 'Hannover 96' \n    AND T2.date LIKE '2015-09-10%';",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Marko Arnautovic' \nAND SUBSTR(T2.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
  "SELECT CAST(\n    (MAX(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating ELSE 0 END) - \n     MAX(CASE WHEN P.player_name = 'Jordan Bowery' THEN PA.overall_rating ELSE 0 END)) AS REAL\n) * 100 / \nMAX(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating ELSE 0 END) AS percentage\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nWHERE PA.date = '2013-07-12';",
  "SELECT player_name \nFROM Player \nORDER BY height DESC \nLIMIT 1",
  "SELECT player_api_id \nFROM Player \nORDER BY weight DESC \nLIMIT 10",
  "SELECT player_name \nFROM Player \nWHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) >= 35;",
  "SELECT SUM(T2.home_team_goal) \nFROM Player AS T1 \nJOIN `Match` AS T2 \nON T1.player_api_id = T2.home_player_1 \n   OR T1.player_api_id = T2.home_player_2 \n   OR T1.player_api_id = T2.home_player_3 \n   OR T1.player_api_id = T2.home_player_4 \n   OR T1.player_api_id = T2.home_player_5 \n   OR T1.player_api_id = T2.home_player_6 \n   OR T1.player_api_id = T2.home_player_7 \n   OR T1.player_api_id = T2.home_player_8 \n   OR T1.player_api_id = T2.home_player_9 \n   OR T1.player_api_id = T2.home_player_10 \n   OR T1.player_api_id = T2.home_player_11 \nWHERE T1.player_name = 'Aaron Lennon';",
  "SELECT SUM(M.away_team_goal)\nFROM `Match` AS M\nJOIN Player AS P\nON P.player_api_id = M.away_player_1 OR\n   P.player_api_id = M.away_player_2 OR\n   P.player_api_id = M.away_player_3 OR\n   P.player_api_id = M.away_player_4 OR\n   P.player_api_id = M.away_player_5 OR\n   P.player_api_id = M.away_player_6 OR\n   P.player_api_id = M.away_player_7 OR\n   P.player_api_id = M.away_player_8 OR\n   P.player_api_id = M.away_player_9 OR\n   P.player_api_id = M.away_player_10 OR\n   P.player_api_id = M.away_player_11\nWHERE P.player_name = 'Daan Smith' OR P.player_name = 'Filipe Ferreira';",
  "SELECT SUM(M.home_team_goal)\nFROM `Match` AS M\nJOIN Player AS P\nON P.player_api_id IN (\n    M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5,\n    M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10,\n    M.home_player_11\n)\nWHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday) - \n       (CASE WHEN strftime('%m-%d', 'now') < strftime('%m-%d', P.birthday) THEN 1 ELSE 0 END)) < 31;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1",
  "SELECT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nORDER BY T2.potential DESC\nLIMIT 1;",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.attacking_work_rate = 'high'",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.finishing = 1 \nORDER BY T1.birthday ASC \nLIMIT 1",
  "SELECT DISTINCT P.player_name\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nJOIN Team T ON PA.player_fifa_api_id = T.team_fifa_api_id\nJOIN League L ON T.team_api_id = L.id\nJOIN Country C ON L.country_id = C.id\nWHERE C.name = 'Belgium'",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.vision > 89",
  "SELECT C.name\nFROM Player AS P\nJOIN Team AS T ON P.player_fifa_api_id = T.team_fifa_api_id\nJOIN `Match` AS M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id\nJOIN Country AS C ON M.country_id = C.id\nGROUP BY C.name\nORDER BY AVG(P.weight) DESC\nLIMIT 1;",
  "SELECT T1.team_long_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlaySpeedClass = 'Slow'",
  "SELECT DISTINCT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.chanceCreationPassingClass = 'Safe'",
  "SELECT AVG(P.height)\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nJOIN Team T ON PA.player_fifa_api_id = T.team_fifa_api_id\nJOIN League L ON T.team_api_id = L.id\nJOIN Country C ON L.country_id = C.id\nWHERE C.name = 'Italy';",
  "SELECT player_name \nFROM Player \nWHERE height > 180 \nORDER BY player_name \nLIMIT 3",
  "SELECT COUNT(*) \nFROM Player \nWHERE player_name LIKE 'Aaron%' \n  AND birthday > '1990';",
  "SELECT \n  (SELECT jumping FROM Player_Attributes WHERE id = 6) - \n  (SELECT jumping FROM Player_Attributes WHERE id = 23) \nAS jumping_difference;",
  "SELECT player_api_id \nFROM Player_Attributes \nWHERE preferred_foot = 'right' \nORDER BY potential ASC \nLIMIT 5",
  "SELECT COUNT(*) \nFROM Player_Attributes \nWHERE preferred_foot = 'left' \n  AND crossing = (\n    SELECT MAX(crossing) \n    FROM Player_Attributes \n    WHERE preferred_foot = 'left'\n  )",
  "SELECT CAST(SUM(CASE WHEN stamina > 80 AND strength > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Player_Attributes",
  "SELECT T2.name \nFROM League AS T1 \nJOIN Country AS T2 \nON T1.country_id = T2.id \nWHERE T1.name = 'Poland Ekstraklasa'",
  "SELECT T1.home_team_goal, T1.away_team_goal \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T1.date LIKE '2008-09-24%' \n  AND T2.name = 'Belgium Jupiler League';",
  "SELECT T2.sprint_speed, T2.agility, T2.acceleration\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.player_name = 'Alexis Blin'",
  "SELECT T2.buildUpPlaySpeedClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_fifa_api_id = T2.team_fifa_api_id \nWHERE T1.team_long_name = 'KSV Cercle Brugge'",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN League AS T2 ON T1.league_id = T2.id\nJOIN Country AS T3 ON T2.country_id = T3.id\nWHERE T1.season = '2015/2016'\n  AND T3.name = 'Italy'\n  AND T2.name = 'Serie A'",
  "SELECT MAX(T1.home_team_goal) \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T2.name = 'Netherlands Eredivisie'",
  "SELECT T2.finishing, T2.curve \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T1.weight DESC \nLIMIT 1",
  "SELECT L.name\nFROM `Match` M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY COUNT(*) DESC\nLIMIT 4",
  "SELECT T1.team_long_name \nFROM Team AS T1 \nJOIN `Match` AS T2 \nON T1.team_api_id  =  T2.away_team_api_id \nORDER BY T2.away_team_goal DESC \nLIMIT 1",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Player P\nJOIN Player_Attributes PA\nON P.player_api_id = PA.player_api_id",
  "SELECT \n  CASE \n    WHEN SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) > \n         SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) \n    THEN 'In-Patient' \n    ELSE 'Out-Patient' \n  END AS Result, \n  CAST(\n    (SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) - \n     SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END)) \n    AS REAL\n  ) * 100 / \n  SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) AS Percentage_Deviation\nFROM Patient",
  "SELECT CAST(SUM(CASE WHEN strftime('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE SEX = 'F'",
  "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'",
  "SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS outpatient_to_inpatient_ratio\nFROM Patient\nWHERE Diagnosis = 'SLE';",
  "SELECT T1.Diagnosis, T2.`Date`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.ID = 30609",
  "SELECT \n    Patient.SEX, \n    Patient.Birthday, \n    Examination.`Examination Date`, \n    Examination.Symptoms \nFROM \n    Patient \nJOIN \n    Examination \nON \n    Patient.ID = Examination.ID \nWHERE \n    Patient.ID = 163109;",
  "SELECT Patient.ID, Patient.SEX, Patient.Birthday \nFROM Patient \nJOIN Laboratory \nON Patient.ID = Laboratory.ID \nWHERE Laboratory.LDH > 500;",
  "SELECT \n    Patient.ID, \n    STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) AS Age\nFROM \n    Patient\nJOIN \n    Examination \nON \n    Patient.ID = Examination.ID\nWHERE \n    Examination.RVVT = '+'",
  "SELECT T1.ID, T1.SEX, T1.Diagnosis\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T2.Thrombosis = 2",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Birthday) = '1937'\nAND T2.`T-CHO` >= 250",
  "SELECT T1.ID, T1.SEX, T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.ALB < 3.5",
  "SELECT CAST(SUM(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient P \nJOIN Laboratory L \nON P.ID = L.ID \nWHERE P.SEX = 'F'",
  "SELECT AVG(E.`aCL IgG`) \nFROM Examination AS E\nJOIN Patient AS P ON E.ID = P.ID\nWHERE P.Admission = '+' \n  AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50;",
  "SELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'F' \n  AND STRFTIME('%Y', Description) = '1997' \n  AND Admission = '-';",
  "SELECT STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday) AS Age\nFROM Patient\nORDER BY Age ASC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T2.Thrombosis = 1\n  AND T1.SEX = 'F'\n  AND T2.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'",
  "SELECT MAX(STRFTIME('%Y', p.Birthday)) - MIN(STRFTIME('%Y', p.Birthday)) AS AgeGap\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG >= 200;",
  "SELECT T2.Symptoms, T2.Diagnosis\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T2.Symptoms IS NOT NULL\nORDER BY T1.Birthday DESC\nLIMIT 1",
  "SELECT CAST(COUNT(*) AS REAL) / 12\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.`Date` BETWEEN '1998-01-01' AND '1998-12-31'\nAND T2.SEX = 'M';",
  "SELECT \n    L.`Date`, \n    strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) AS Age\nFROM \n    Laboratory L\nJOIN \n    Patient P ON L.ID = P.ID\nWHERE \n    P.Diagnosis = 'SJS'\nORDER BY \n    P.Birthday ASC\nLIMIT 1;",
  "SELECT \n  CAST(SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) /\n  SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS ratio\nFROM \n  Patient P\nJOIN \n  Laboratory L \nON \n  P.ID = L.ID;",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'\n  AND STRFTIME('%Y', T1.Birthday) > '1975';",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` >= 2.0",
  "SELECT Diagnosis\nFROM Examination\nWHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY Diagnosis\nORDER BY COUNT(Diagnosis) DESC\nLIMIT 1",
  "SELECT AVG(1999 - STRFTIME('%Y', T1.Birthday)) AS Average_Age\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.Date BETWEEN '1991-10-01' AND '1991-10-31'",
  "SELECT \n  STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.Birthday) AS Age, \n  P.Diagnosis \nFROM \n  Laboratory L \n  JOIN Patient P ON L.ID = P.ID \n  JOIN Examination E ON L.ID = E.ID \nORDER BY \n  L.HGB DESC \nLIMIT 1;",
  "SELECT ANA \nFROM Examination \nWHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
  "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Not Normal' END AS Cholesterol_Status\nFROM Laboratory\nWHERE ID = 2927464 AND `Date` = '1995-09-04'",
  "SELECT SEX \nFROM Patient \nWHERE Diagnosis = 'AORTITIS' \nORDER BY Description \nLIMIT 1",
  "SELECT T2.`aCL IgM`\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.Description = '1994-02-19'\n  AND T1.Diagnosis = 'SLE'\n  AND T2.`Examination Date` = '1993-11-12'",
  "SELECT T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID  =  T2.ID \nWHERE T2.GPT  =  9 \nAND T2.`Date`  =  '1992-06-12'",
  "SELECT STRFTIME('%Y', L.`Date`) - STRFTIME('%Y', P.Birthday) AS Age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.`Date` = '1991-10-21' AND L.UA = 8.4;",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.`First Date` = '1991-06-13'\n  AND T1.Diagnosis = 'SJS'\n  AND T2.Date LIKE '1995-%'",
  "SELECT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T2.`Examination Date` = '1997-01-27' \n  AND T2.Diagnosis = 'SLE';",
  "SELECT T2.Symptoms \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.Birthday = '1959-03-01' \n  AND T2.`Examination Date` = '1993-09-27'",
  "SELECT \n    SUM(CASE WHEN L.`Date` LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) -\n    SUM(CASE WHEN L.`Date` LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END) AS decrease_rate\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.Birthday = '1959-02-18'",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'BEHCET'\nAND T2.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';",
  "SELECT ID \nFROM Laboratory \nWHERE Date BETWEEN '1987-07-06' AND '1996-01-31' \n  AND GPT > 30 \n  AND ALB < 4",
  "SELECT ID \nFROM Patient \nWHERE SEX = 'F' \n  AND SUBSTR(Birthday, 1, 4) = '1964' \n  AND Admission = '+'",
  "SELECT COUNT(*)\nFROM Examination\nWHERE Thrombosis = 2\n  AND `ANA Pattern` = 'S'\n  AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 \n                   FROM Examination \n                   WHERE Thrombosis = 2 \n                     AND `ANA Pattern` = 'S');",
  "SELECT CAST(SUM(IIF(UA <= 6.5, 1, 0)) AS REAL) * 100 / COUNT(*) \nFROM Laboratory \nWHERE `U-PRO` > 0 AND `U-PRO` < 30;",
  "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE SEX = 'M' \n  AND strftime('%Y', `First Date`) = '1981';",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Admission = '-'\n  AND T2.`Date` LIKE '1991-10%'\n  AND T2.`T-BIL` < 2.0",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'F'\n  AND Examination.`ANA Pattern` != 'P'\n  AND Patient.Birthday BETWEEN '1980-01-01' AND '1989-12-31';",
  "SELECT T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'PSS' \n  AND T2.CRP = '2+' \n  AND T2.CRE = 1 \n  AND T2.LDH = 123;",
  "SELECT AVG(T2.ALB)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE'",
  "SELECT Symptoms \nFROM Examination \nWHERE Diagnosis = 'SLE' \nGROUP BY Symptoms \nORDER BY COUNT(Symptoms) DESC \nLIMIT 1",
  "SELECT Description, Diagnosis \nFROM Patient \nWHERE ID = 48473;",
  "SELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'F' AND Diagnosis = 'APS'",
  "SELECT COUNT(*)\nFROM Laboratory\nWHERE STRFTIME('%Y', Date) = '1997'\n  AND (TP <= 6 OR TP >= 8.5)",
  "SELECT CAST(SUM(CASE WHEN E.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Examination E\nWHERE E.Symptoms = 'thrombocytopenia';",
  "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE STRFTIME('%Y', Birthday) = '1980' \n  AND Diagnosis = 'RA';",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'M'\n  AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'\n  AND T2.Diagnosis = 'Behcet'\n  AND T1.Admission = '-';",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'F' AND T2.WBC < 3.5",
  "SELECT JULIANDAY(E.`Examination Date`) - JULIANDAY(P.`First Date`) AS days_difference\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.ID = 821298;",
  "SELECT \n  CASE \n    WHEN (P.SEX = 'M' AND L.UA > 8.0) OR (P.SEX = 'F' AND L.UA > 6.5) \n    THEN 'YES' \n    ELSE 'NO' \n  END AS result\nFROM \n  Patient P\nJOIN \n  Laboratory L \nON \n  P.ID = L.ID\nWHERE \n  P.ID = 57266;",
  "SELECT Date \nFROM Laboratory \nWHERE ID = 48473 AND GOT >= 60",
  "SELECT DISTINCT T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.GOT < 60\nAND STRFTIME('%Y', T2.Date) = '1994';",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'M' AND T2.GPT >= 60",
  "SELECT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.GPT > 60\nORDER BY T1.Birthday ASC",
  "SELECT AVG(LDH) \nFROM Laboratory \nWHERE LDH < 500",
  "SELECT \n  Patient.ID, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) AS Age\nFROM \n  Patient \nJOIN \n  Laboratory \nON \n  Patient.ID = Laboratory.ID \nWHERE \n  Laboratory.LDH BETWEEN 600 AND 800;",
  "SELECT T2.Admission \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID  =  T2.ID \nWHERE T1.ALP  <  300",
  "SELECT T1.ID, T2.ALP < 300 \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Birthday = '1982-04-01'",
  "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.TP < 6.0",
  "SELECT T2.TP - 8.5 \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'F' \n  AND T2.TP > 8.5",
  "SELECT Patient.ID\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M'\n  AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5)\nORDER BY Patient.Birthday DESC",
  "SELECT \n  CASE \n    WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Yes' \n    ELSE 'No' \n  END AS Albumin_Within_Normal_Range\nFROM \n  Patient P\nJOIN \n  Laboratory L \nON \n  P.ID = L.ID\nWHERE \n  STRFTIME('%Y', P.Birthday) = '1982'",
  "SELECT CAST(SUM(CASE WHEN L.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient AS P \nJOIN Laboratory AS L \nON P.ID = L.ID \nWHERE P.SEX = 'F';",
  "SELECT AVG(L.UA) \nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5)\nAND L.Date = (\n    SELECT MAX(Date) \n    FROM Laboratory \n    WHERE ID = P.ID\n)",
  "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN = 29",
  "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'RA' AND T2.UN < 30",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.CRE >= 1.5",
  "SELECT \n  CAST(SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) > \n  SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS result\nFROM \n  Patient AS T1 \nJOIN \n  Laboratory AS T2 \nON \n  T1.ID = T2.ID \nWHERE \n  T2.CRE >= 1.5;",
  "SELECT T1.ID, T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nORDER BY T2.`T-BIL` DESC\nLIMIT 1;",
  "SELECT GROUP_CONCAT(DISTINCT T1.ID), T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.`T-BIL` >= 2.0 \nGROUP BY T1.SEX",
  "SELECT T1.ID, T2.`T-CHO`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nORDER BY T1.Birthday ASC, T2.`T-CHO` DESC\nLIMIT 1",
  "SELECT CAST(SUM(STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) AS REAL) / COUNT(T1.ID) AS AverageAge\nFROM Patient AS T1\nJOIN Laboratory AS T2 ON T1.ID = T2.ID\nWHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250;",
  "SELECT DISTINCT T1.ID, T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.TG > 300",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.TG >= 200\nAND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 50",
  "SELECT DISTINCT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID  =  T2.ID \nWHERE T1.Admission = '-' \nAND T2.CPK < 250;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \n  AND T1.Birthday BETWEEN '1936-01-01' AND '1956-12-31' \n  AND T2.CPK >= 250;",
  "SELECT \n    P.ID, \n    P.SEX, \n    STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS Age\nFROM \n    Patient P\nJOIN \n    Laboratory L \nON \n    P.ID = L.ID\nWHERE \n    L.GLU >= 180 \n    AND L.`T-CHO` < 250;",
  "SELECT L.ID, L.GLU\nFROM Laboratory L\nJOIN Patient P ON L.ID = P.ID\nWHERE STRFTIME('%Y', P.Description) = '1991' AND L.GLU < 180",
  "SELECT P.ID, P.SEX, P.Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.WBC <= 3.5 OR L.WBC >= 9.0\nORDER BY P.SEX, P.Birthday ASC",
  "SELECT \n    P.Diagnosis, \n    P.ID, \n    STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS Age \nFROM \n    Patient P \nJOIN \n    Laboratory L \nON \n    P.ID = L.ID \nWHERE \n    L.RBC < 3.5;",
  "SELECT T1.Admission \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'F' \n  AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) >= 50 \n  AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)",
  "SELECT DISTINCT T1.ID, T1.SEX\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Admission = '-' AND T2.HGB < 10",
  "SELECT T1.ID, T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'SLE' \n  AND T2.HGB > 10 \n  AND T2.HGB < 17 \nORDER BY T1.Birthday ASC \nLIMIT 1",
  "SELECT \n    T1.ID, \n    STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) AS Age\nFROM \n    Patient AS T1\nJOIN \n    Laboratory AS T2 \nON \n    T1.ID = T2.ID\nWHERE \n    T2.HCT >= 52\nGROUP BY \n    T1.ID\nHAVING \n    COUNT(T2.ID) >= 2;",
  "SELECT AVG(HCT) \nFROM Laboratory \nWHERE Date LIKE '1991%' \n  AND HCT < 29;",
  "SELECT \n  SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS LowerThanNormal,\n  SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS HigherThanNormal\nFROM \n  Laboratory\nWHERE \n  PLT <= 100 OR PLT >= 400;",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T2.Date) = '1984'\n  AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) < 50\n  AND T2.PLT BETWEEN 100 AND 400;",
  "SELECT CAST(SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55\n  AND L.PT >= 14",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.`First Date`) > '1992'\nAND T2.PT < 14",
  "SELECT COUNT(*)\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.APTT > 45 \nAND T2.Thrombosis = 0;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \n  AND T2.WBC > 3.5 \n  AND T2.WBC < 9.0 \n  AND (T2.FG <= 150 OR T2.FG >= 450);",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Birthday > '1980-01-01' \n  AND (T2.FG < 150 OR T2.FG > 450);",
  "SELECT DISTINCT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.`U-PRO` >= 30",
  "SELECT T1.ID \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.`U-PRO` > 0 \n  AND T1.`U-PRO` < 30 \n  AND T2.Diagnosis = 'SLE'",
  "SELECT COUNT(DISTINCT ID) \nFROM Laboratory \nWHERE IGG >= 2000;",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.IGG > 900\n  AND T1.IGG < 2000\n  AND T2.Symptoms IS NOT NULL;",
  "SELECT T2.Diagnosis \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID  =  T2.ID \nWHERE T1.IGA BETWEEN 80 AND 500 \nORDER BY T1.IGA DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.IGA > 80 AND T1.IGA < 500 AND T2.`First Date` >= '1990-01-01'",
  "SELECT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.IGM <= 40 OR T2.IGM >= 400\nGROUP BY T1.Diagnosis\nORDER BY COUNT(*) DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.CRP = '+' AND T2.Description IS NULL",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.CRE >= 1.5\n  AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) < 70;",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Laboratory AS T1\nINNER JOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.RA IN ('-', '+-')\n  AND T2.KCT = '+'",
  "SELECT DISTINCT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Birthday) >= '1985'\nAND T2.RA IN ('-', '+-')",
  "SELECT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE CAST(STRFTIME('%Y', 'now') AS INTEGER) - CAST(STRFTIME('%Y', T1.Birthday) AS INTEGER) > 60 \nAND T2.RF < 20;",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.RF < 20 AND T2.Thrombosis = 0",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.C3 > 35 \nAND T2.`ANA Pattern` = 'P'",
  "SELECT T1.ID\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.HCT <= 29 OR T1.HCT >= 52\nORDER BY T2.`aCL IgA` DESC\nLIMIT 1",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Examination AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'APS' \nAND T2.C4 > 10;",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID  =  T2.ID \nWHERE T2.RNP NOT IN ('-', '+-') \nORDER BY T1.Birthday DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.SM IN ('-', '+-') AND T2.Thrombosis = 0",
  "SELECT P.ID\nFROM Patient AS P\nJOIN Laboratory AS L\nON P.ID = L.ID\nWHERE L.SM NOT IN ('negative', '0')\nORDER BY P.Birthday DESC\nLIMIT 3;",
  "SELECT DISTINCT T1.ID\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.`Examination Date` > '1997-01-01'\nAND T2.SC170 IN ('negative', '0')",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2 ON T1.ID = T2.ID\nJOIN Examination AS T3 ON T1.ID = T3.ID\nWHERE T2.SC170 IN ('negative', '0')\n  AND T1.SEX = 'F'\n  AND (T3.Symptoms IS NULL OR T3.Symptoms = '')",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.SSA IN ('-', '+-') \nAND STRFTIME('%Y', T1.`First Date`) < '2000';",
  "SELECT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.SSA NOT IN ('negative', '0')\nORDER BY T1.`First Date` ASC\nLIMIT 1",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.SSB IN ('negative', '0') \n  AND T2.Diagnosis = 'SLE'",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.SSB IN ('negative', '0') \nAND T2.Symptoms IS NOT NULL;",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.CENTROMEA IN ('-', '+-')\n  AND T2.SSB IN ('-', '+-')\n  AND T1.SEX = 'M'",
  "SELECT DISTINCT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.DNA >= 8;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.DNA < 8 \nAND T2.Description IS NULL;",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Admission = '+'",
  "SELECT CAST(SUM(CASE WHEN T2.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.GOT >= 60",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.GOT < 60",
  "SELECT T2.Birthday \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.GOT >= 60 \nORDER BY T2.Birthday DESC \nLIMIT 1",
  "SELECT T2.Birthday\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.GPT < 60\nORDER BY T1.GPT DESC\nLIMIT 3",
  "SELECT COUNT(*) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID  =  T2.ID \nWHERE T1.GPT  <  60 \nAND T2.SEX  =  'M'",
  "SELECT \n    T1.`First Date`\nFROM \n    Patient AS T1\nJOIN \n    Laboratory AS T2\nON \n    T1.ID = T2.ID\nWHERE \n    T2.LDH < 500\nORDER BY \n    T2.LDH DESC\nLIMIT 1;",
  "SELECT T2.`Date`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.LDH >= 500\nORDER BY T1.`First Date` DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.ALP >= 300 AND T2.Admission = '+'",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '-' AND Laboratory.ALP < 300",
  "SELECT DISTINCT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.TP < 6.0",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'SJS'\n  AND T2.TP > 6.0\n  AND T2.TP < 8.5;",
  "SELECT `Date`\nFROM Laboratory\nWHERE ALB > 3.5 AND ALB < 5.5\nORDER BY ALB DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'M'\n  AND T2.ALB > 3.5\n  AND T2.ALB < 5.5\n  AND T2.TP BETWEEN 6.0 AND 8.5;",
  "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA`\nFROM Patient AS T1\nJOIN Laboratory AS T2 ON T1.ID = T2.ID\nJOIN Examination AS T3 ON T1.ID = T3.ID\nWHERE T1.SEX = 'F' AND T2.UA > 6.50\nORDER BY T2.UA DESC\nLIMIT 1;",
  "SELECT MAX(T1.ANA)\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.CRE < 1.5;",
  "SELECT T1.ID\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.CRE < 1.5\nORDER BY T2.`aCL IgA` DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS L\nJOIN Examination AS E\nON L.ID = E.ID\nWHERE L.`T-BIL` >= 2.0\nAND E.`ANA Pattern` LIKE '%P%'",
  "SELECT T2.ANA \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.`T-BIL` < 2.0 \nORDER BY T1.`T-BIL` DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.`T-CHO` >= 250\nAND T2.KCT = '-';",
  "SELECT COUNT(*) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.`T-CHO` < 250 \n  AND T2.`ANA Pattern` = 'P'",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL",
  "SELECT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.TG < 200\nORDER BY T2.TG DESC\nLIMIT 1",
  "SELECT DISTINCT T1.ID\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Thrombosis = 0 AND T2.CPK < 250",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.CPK < 250\n  AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+');",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID  =  T2.ID \nWHERE T2.GLU  >  180 \nORDER BY T1.Birthday \nLIMIT 1",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.GLU < 180 AND T2.Thrombosis = 0",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '+'\n  AND Laboratory.WBC BETWEEN 3.5 AND 9.0;",
  "SELECT COUNT(*)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'SLE'\n  AND T2.WBC BETWEEN 3.5 AND 9.0;",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE (T2.RBC <= 3.5 OR T2.RBC >= 6.0)\n  AND T1.Admission = '-';",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.PLT > 100\n  AND T1.PLT < 400\n  AND T2.Diagnosis IS NOT NULL;",
  "SELECT T2.PLT \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.PLT > 100 \n  AND T2.PLT < 400 \n  AND T1.Diagnosis = 'MCTD';",
  "SELECT AVG(T2.PT) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \n  AND T2.PT < 14;",
  "SELECT COUNT(*)\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE (T1.Thrombosis = 2 OR T1.Thrombosis = 1) AND T2.PT < 14",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.first_name  =  \"Angela\" \nAND T1.last_name  =  \"Sanders\";",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.college = 'College of Engineering';",
  "SELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.department = 'Art and Design Department'",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = 'Women''s Soccer';",
  "SELECT T1.phone \nFROM member AS T1 \nJOIN attendance AS T2 \nON T1.member_id  =  T2.link_to_member \nJOIN event AS T3 \nON T2.link_to_event  =  T3.event_id \nWHERE T3.event_name  =  'Women''s Soccer'",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE event.event_name = 'Women''s Soccer'\n  AND member.t_shirt_size = 'Medium';",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN attendance AS T2 \nON T1.event_id  =  T2.link_to_event \nGROUP BY T1.event_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.position = \"Vice President\";",
  "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'",
  "SELECT COUNT(*)\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE member.first_name = 'Sacha'\n  AND member.last_name = 'Harrison'\n  AND SUBSTR(event.event_date, 1, 4) = '2019';",
  "SELECT COUNT(*)\nFROM (\n    SELECT e.event_id\n    FROM event e\n    JOIN attendance a ON e.event_id = a.link_to_event\n    WHERE e.type = 'Meeting'\n    GROUP BY e.event_id\n    HAVING COUNT(a.link_to_member) > 10\n) AS meetings_attended_by_more_than_10",
  "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_name\nHAVING COUNT(a.link_to_member) > 20",
  "SELECT CAST(COUNT(a.link_to_event) AS REAL) / COUNT(DISTINCT e.event_name) AS average_attendance\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.type = 'Meeting' AND e.event_date LIKE '2020-%'",
  "SELECT expense_description \nFROM expense \nORDER BY cost DESC \nLIMIT 1",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Environmental Engineering'",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN attendance AS T2 ON T1.member_id = T2.link_to_member\nJOIN event AS T3 ON T2.link_to_event = T3.event_id\nWHERE T3.event_name = \"Laugh Out Loud\"",
  "SELECT T1.last_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Law and Constitutional Studies'",
  "SELECT T2.county \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Sherri\" \nAND T1.last_name = \"Ramsey\";",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Tyler\" \nAND T1.last_name = \"Hewitt\";",
  "SELECT T1.amount \nFROM income AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position = 'Vice President'",
  "SELECT T1.spent \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T1.category = 'Food' \nAND T2.event_name = 'September Meeting';",
  "SELECT T2.city, T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.position = 'President';",
  "SELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.position = 'Member' \nAND T2.state = 'Illinois';",
  "SELECT T1.spent\nFROM budget AS T1\nJOIN event AS T2\nON T1.link_to_event = T2.event_id\nWHERE T2.event_name = 'September Meeting'\nAND T1.category = 'Advertisement';",
  "SELECT T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.first_name  =  \"Pierce\" \nAND T1.last_name  =  \"Guidi\"",
  "SELECT SUM(b.amount) \nFROM budget AS b\nJOIN event AS e\nON b.link_to_event = e.event_id\nWHERE e.event_name = 'October Speaker'",
  "SELECT T3.approved\nFROM event AS T1\nJOIN budget AS T2 ON T1.event_id = T2.link_to_event\nJOIN expense AS T3 ON T2.budget_id = T3.link_to_budget\nWHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'",
  "SELECT AVG(T2.cost)\nFROM member AS T1\nJOIN expense AS T2\nON T1.member_id = T2.link_to_member\nWHERE T1.first_name = 'Elijah'\nAND T1.last_name = 'Allen'\nAND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
  "SELECT \n    SUM(CASE WHEN SUBSTR(e.event_date, 1, 4) = '2019' THEN b.spent ELSE 0 END) -\n    SUM(CASE WHEN SUBSTR(e.event_date, 1, 4) = '2020' THEN b.spent ELSE 0 END) AS difference\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event;",
  "SELECT location \nFROM event \nWHERE event_name = 'Spring Budget Review';",
  "SELECT cost \nFROM expense \nWHERE expense_description = 'Posters' \n  AND expense_date = '2019-09-04';",
  "SELECT remaining \nFROM budget \nWHERE category = 'Food' \nORDER BY amount DESC \nLIMIT 1",
  "SELECT notes \nFROM income \nWHERE source = 'Fundraising' \n  AND date_received = '2019-09-14';",
  "SELECT COUNT(*)\nFROM major\nWHERE college = \"College of Humanities and Social Sciences\"",
  "SELECT phone \nFROM member \nWHERE first_name = \"Carlo\" \n  AND last_name = \"Jacobs\";",
  "SELECT T2.county \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = 'Adela' \nAND T1.last_name = \"O'Gallagher\";",
  "SELECT COUNT(*)\nFROM budget AS T1\nJOIN event AS T2\nON T1.link_to_event = T2.event_id\nWHERE T2.event_name = \"November Meeting\"\nAND T1.remaining < 0",
  "SELECT SUM(T2.amount) \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nWHERE T1.event_name  =  'September Speaker'",
  "SELECT T2.event_status \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nWHERE T1.expense_description = 'Post Cards, Posters' \nAND T1.expense_date = '2019-08-20';",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = 'Brent' \nAND T1.last_name = 'Thomason';",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
  "SELECT T2.type \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Christof\" \nAND T1.last_name = \"Nielson\";",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.position  =  'Vice President'",
  "SELECT T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Sacha\" \nAND T1.last_name = \"Harrison\";",
  "SELECT T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.position  =  'President'",
  "SELECT T2.date_received \nFROM member AS T1 \nJOIN income AS T2 \nON T1.member_id  =  T2.link_to_member \nWHERE T1.first_name  =  'Connor' \nAND T1.last_name  =  'Hilton' \nAND T2.source  =  'Dues';",
  "SELECT T2.first_name, T2.last_name\nFROM income AS T1\nJOIN member AS T2\nON T1.link_to_member = T2.member_id\nWHERE T1.source = 'Dues'\nORDER BY T1.date_received ASC\nLIMIT 1",
  "SELECT \n  CAST(SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) AS REAL) / \n  SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS ratio\nFROM \n  budget b\nJOIN \n  event e ON b.link_to_event = e.event_id\nWHERE \n  b.category = 'Advertisement'",
  "SELECT CAST(SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) AS REAL) * 100 / SUM(b.amount) AS parking_percentage\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'November Speaker';",
  "SELECT SUM(cost) \nFROM expense \nWHERE expense_description = 'Pizza';",
  "SELECT COUNT(city) \nFROM zip_code \nWHERE county = 'Orange County' \n  AND state = 'Virginia';",
  "SELECT department \nFROM major \nWHERE college = 'College of Humanities and Social Sciences';",
  "SELECT T2.city, T2.county, T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Amy\" AND T1.last_name = \"Firth\";",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nORDER BY T2.remaining \nLIMIT 1;",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'October Meeting'",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nGROUP BY T2.college \nORDER BY COUNT(*) DESC \nLIMIT 1",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.phone = \"809-555-3360\";",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nORDER BY T2.amount DESC \nLIMIT 1",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position = 'Vice President'",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = 'Women''s Soccer';",
  "SELECT income.date_received \nFROM income \nJOIN member \nON income.link_to_member = member.member_id \nWHERE member.first_name = 'Casey' \nAND member.last_name = 'Mason';",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T2.state = 'Maryland';",
  "SELECT COUNT(*) \nFROM member AS T1 \nJOIN attendance AS T2 \nON T1.member_id  =  T2.link_to_member \nWHERE T1.phone  =  \"954-555-6240\"",
  "SELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.department = 'School of Applied Sciences, Technology and Education'",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nWHERE T1.status  =  'Closed' \nORDER BY T2.spent / T2.amount DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM member\nWHERE position = 'President';",
  "SELECT MAX(spent) \nFROM budget;",
  "SELECT COUNT(*) \nFROM event \nWHERE SUBSTR(event_date, 1, 4) = '2020' \n  AND type = 'Meeting';",
  "SELECT SUM(spent) \nFROM budget \nWHERE category = 'Food'",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN attendance AS T2\nON T1.member_id = T2.link_to_member\nGROUP BY T1.first_name, T1.last_name\nHAVING COUNT(T2.link_to_event) > 7;",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater'",
  "SELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T2.city = 'Georgetown' \nAND T2.state = 'South Carolina'",
  "SELECT SUM(income.amount) \nFROM income \nJOIN member \nON income.link_to_member = member.member_id \nWHERE member.first_name = 'Grant' \n  AND member.last_name = 'Gilmour';",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN income\nON member.member_id = income.link_to_member\nWHERE income.amount > 40;",
  "SELECT SUM(T1.cost)\nFROM expense AS T1\nJOIN budget AS T2 ON T1.link_to_budget = T2.budget_id\nJOIN event AS T3 ON T2.link_to_event = T3.event_id\nWHERE T3.event_name = 'Yearly Kickoff';",
  "SELECT DISTINCT T4.first_name, T4.last_name\nFROM event AS T1\nJOIN budget AS T2 ON T1.event_id = T2.link_to_event\nJOIN expense AS T3 ON T2.budget_id = T3.link_to_budget\nJOIN member AS T4 ON T3.link_to_member = T4.member_id\nWHERE T1.event_name = 'Yearly Kickoff'",
  "SELECT T1.first_name, T1.last_name, T2.source\nFROM member AS T1\nJOIN income AS T2\nON T1.member_id = T2.link_to_member\nORDER BY T2.amount DESC\nLIMIT 1",
  "SELECT e.event_name \nFROM expense AS ex \nJOIN budget AS b ON ex.link_to_budget = b.budget_id \nJOIN event AS e ON b.link_to_event = e.event_id \nORDER BY ex.cost ASC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) AS REAL) * 100 / SUM(ex.cost) \nFROM expense AS ex \nJOIN budget AS b ON ex.link_to_budget = b.budget_id \nJOIN event AS e ON b.link_to_event = e.event_id",
  "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN T2.major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id;",
  "SELECT source\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nORDER BY amount DESC\nLIMIT 1;",
  "SELECT first_name, last_name, email\nFROM member\nWHERE position = 'Secretary'",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Physics Teaching'",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = 'Community Theater'\n  AND SUBSTR(event.event_date, 1, 4) = '2019';",
  "SELECT COUNT(*), T2.major_name \nFROM attendance AS T1 \nJOIN member AS T3 ON T1.link_to_member = T3.member_id \nJOIN major AS T2 ON T3.link_to_major = T2.major_id \nWHERE T3.first_name = \"Luisa\" AND T3.last_name = \"Guidi\";",
  "SELECT AVG(spent) \nFROM budget \nWHERE category = 'Food' \n  AND event_status = 'Closed';",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nWHERE T2.category  =  'Advertisement' \nORDER BY T2.spent DESC \nLIMIT 1",
  "SELECT \n  CASE \n    WHEN T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer' \n    THEN 'Yes' \n    ELSE 'No' \n  END AS attended\nFROM \n  member AS T1\nJOIN \n  attendance AS T2 ON T1.member_id = T2.link_to_member\nJOIN \n  event AS T3 ON T2.link_to_event = T3.event_id\nWHERE \n  T1.first_name = 'Maya' \n  AND T1.last_name = 'Mclean' \n  AND T3.event_name = 'Women''s Soccer';",
  "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) \nFROM event \nWHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'",
  "SELECT T1.cost \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id \nWHERE T1.expense_description = 'Posters' \nAND T3.event_name = 'September Speaker'",
  "SELECT t_shirt_size\nFROM member\nGROUP BY t_shirt_size\nORDER BY COUNT(t_shirt_size) DESC\nLIMIT 1",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nWHERE T1.status  =  'Closed' \nORDER BY T2.remaining ASC \nLIMIT 1",
  "SELECT \n    b.category, \n    SUM(e.cost) AS total_value\nFROM \n    expense e\nJOIN \n    budget b ON e.link_to_budget = b.budget_id\nJOIN \n    event ev ON b.link_to_event = ev.event_id\nWHERE \n    ev.event_name = 'October Meeting' \n    AND e.approved = 'true'\nGROUP BY \n    b.category;",
  "SELECT b.category, b.amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'April Speaker'\nORDER BY b.amount ASC",
  "SELECT MAX(amount) \nFROM budget \nWHERE category = 'Food';",
  "SELECT amount\nFROM budget\nWHERE category = 'Advertisement'\nORDER BY amount DESC\nLIMIT 3;",
  "SELECT SUM(cost) \nFROM expense \nWHERE expense_description = 'Parking'",
  "SELECT SUM(cost) \nFROM expense \nWHERE expense_date = '2019-08-20'",
  "SELECT \n    member.first_name, \n    member.last_name, \n    SUM(expense.cost) AS total_cost\nFROM \n    member\nJOIN \n    expense \nON \n    member.member_id = expense.link_to_member\nWHERE \n    member.member_id = 'rec4BLdZHS2Blfp4v';",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member  =  T2.member_id \nWHERE T2.first_name  =  \"Sacha\" \nAND T2.last_name  =  \"Harrison\";",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member  =  T2.member_id \nWHERE T2.t_shirt_size  =  'X-Large'",
  "SELECT T2.zip \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member  =  T2.member_id \nWHERE T1.cost  <  50",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major  =  T2.major_id \nWHERE T1.first_name = \"Phillip\" AND T1.last_name = \"Cullen\";",
  "SELECT T1.position \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Business'",
  "SELECT COUNT(*) \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Business' \nAND T1.t_shirt_size = 'Medium';",
  "SELECT T2.type \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event  =  T2.event_id \nWHERE T1.remaining  >  30",
  "SELECT T2.category \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id  =  T2.link_to_event \nWHERE T1.location  =  'MU 215'",
  "SELECT T1.category \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event  =  T2.event_id \nWHERE T2.event_date  =  '2020-03-24T12:00:00'",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'Vice President'",
  "SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id;",
  "SELECT T1.category\nFROM budget AS T1\nJOIN event AS T2\nON T1.link_to_event = T2.event_id\nWHERE T2.location = 'MU 215'",
  "SELECT COUNT(*) \nFROM income \nWHERE amount = 50",
  "SELECT COUNT(*) \nFROM member \nWHERE position = 'Member' \n  AND t_shirt_size = 'X-Large'",
  "SELECT COUNT(*) \nFROM major \nWHERE college = 'College of Agriculture and Applied Sciences' \n  AND department = 'School of Applied Sciences, Technology and Education';",
  "SELECT T1.last_name, T2.department, T2.college\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Environmental Engineering'",
  "SELECT T1.category \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event  =  T2.event_id \nWHERE T2.location  =  'MU 215' \nAND T2.type  =  'Guest Speaker' \nAND T1.spent  =  0;",
  "SELECT T3.city, T3.state\nFROM member AS T1\nJOIN major AS T2 ON T1.link_to_major = T2.major_id\nJOIN zip_code AS T3 ON T1.zip = T3.zip_code\nWHERE T2.department = 'Electrical and Computer Engineering Department' \n  AND T1.position = 'Member';",
  "SELECT e.event_name \nFROM event e \nJOIN attendance a ON e.event_id = a.link_to_event \nJOIN member m ON a.link_to_member = m.member_id \nWHERE m.position = 'Vice President' \n  AND e.location = '900 E. Washington St.' \n  AND e.type = 'Social';",
  "SELECT T1.last_name, T1.position\nFROM member AS T1\nJOIN expense AS T2\nON T1.member_id = T2.link_to_member\nWHERE T2.expense_description = 'Pizza' AND T2.expense_date = '2019-09-10'",
  "SELECT DISTINCT member.last_name\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member';",
  "SELECT CAST(SUM(CASE WHEN i.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';",
  "SELECT county \nFROM zip_code \nWHERE type = 'PO Box'",
  "SELECT zip_code \nFROM zip_code \nWHERE type = 'PO Box' \n  AND county = 'San Juan Municipio' \n  AND state = 'Puerto Rico';",
  "SELECT event_name \nFROM event \nWHERE type = 'Game' \n  AND status = 'Closed' \n  AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
  "SELECT T2.link_to_event \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nWHERE T1.cost > 50",
  "SELECT \n  member.first_name, \n  member.last_name, \n  expense.link_to_member\nFROM \n  expense\nJOIN \n  member ON expense.link_to_member = member.member_id\nWHERE \n  expense.approved = 'true' \n  AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Katy\" \nAND T1.link_to_major = \"rec1N0upiVLy5esTO\"",
  "SELECT T1.phone \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.college = 'College of Agriculture and Applied Sciences' \nAND T2.major_name = 'Business';",
  "SELECT T2.email\nFROM expense AS T1\nJOIN member AS T2\nON T1.link_to_member = T2.member_id\nWHERE T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'\nAND T1.cost > 20;",
  "SELECT COUNT(*) \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Education' \n  AND T2.college = 'College of Education & Human Services' \n  AND T1.position = 'Member';",
  "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM budget;",
  "SELECT event_id, location, status\nFROM event\nWHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'",
  "SELECT expense_description\nFROM expense\nGROUP BY expense_description\nHAVING AVG(cost) > 50;",
  "SELECT first_name, last_name \nFROM member \nWHERE t_shirt_size = 'X-Large'",
  "SELECT CAST(SUM(IIF(type = 'PO Box', 1, 0)) AS REAL) * 100 / COUNT(zip_code) \nFROM zip_code;",
  "SELECT event.event_name, event.location\nFROM event\nJOIN budget\nON event.event_id = budget.link_to_event\nWHERE budget.remaining > 0",
  "SELECT T1.event_name, T1.event_date\nFROM event AS T1\nJOIN budget AS T2 ON T1.event_id = T2.link_to_event\nJOIN expense AS T3 ON T2.budget_id = T3.link_to_budget\nWHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
  "SELECT member.first_name, member.last_name, major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE expense.cost > 100",
  "SELECT DISTINCT T3.city, T3.county\nFROM income AS T1\nJOIN member AS T2 ON T1.link_to_member = T2.member_id\nJOIN zip_code AS T3 ON T2.zip = T3.zip_code\nWHERE T1.amount > 40",
  "SELECT T2.first_name, T2.last_name\nFROM expense AS T1\nJOIN member AS T2 ON T1.link_to_member = T2.member_id\nJOIN budget AS T3 ON T1.link_to_budget = T3.budget_id\nGROUP BY T2.first_name, T2.last_name\nHAVING COUNT(DISTINCT T3.link_to_event) > 1\nORDER BY SUM(T1.cost) DESC\nLIMIT 1;",
  "SELECT AVG(T1.cost) \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position != 'Member'",
  "SELECT DISTINCT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE b.category = 'Parking' AND ex.cost < (\n    SELECT AVG(ex2.cost)\n    FROM expense ex2\n    JOIN budget b2 ON ex2.link_to_budget = b2.budget_id\n    WHERE b2.category = 'Parking'\n)",
  "SELECT CAST(SUM(expense.cost) AS REAL) * 100 / COUNT(event.event_id)\nFROM expense\nJOIN budget ON expense.link_to_budget = budget.budget_id\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event.type = 'Meeting';",
  "SELECT link_to_budget \nFROM expense \nWHERE expense_description = 'Water, chips, cookies' \nORDER BY cost DESC \nLIMIT 1;",
  "SELECT m.first_name, m.last_name\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nGROUP BY m.first_name, m.last_name\nORDER BY SUM(e.cost) DESC\nLIMIT 5;",
  "SELECT DISTINCT m.first_name, m.last_name, m.phone\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.cost > (SELECT AVG(cost) FROM expense)",
  "SELECT CAST(SUM(IIF(T2.state = 'New Jersey', 1, 0)) AS REAL) * 100 / COUNT(*) - \n       CAST(SUM(IIF(T2.state = 'Vermont', 1, 0)) AS REAL) * 100 / COUNT(*) AS difference\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T1.position = 'Member';",
  "SELECT T2.major_name, T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = 'Garrett' \nAND T1.last_name = 'Gerke'",
  "SELECT member.first_name, member.last_name, expense.cost\nFROM member\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE expense.expense_description = 'Water, Veggie tray, supplies'",
  "SELECT T1.last_name, T1.phone \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Elementary Education'",
  "SELECT budget.category, budget.amount \nFROM budget \nJOIN event \nON budget.link_to_event = event.event_id \nWHERE event.event_name = 'January Speaker';",
  "SELECT T2.event_name \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event  =  T2.event_id \nWHERE T1.category  =  'Food'",
  "SELECT T1.first_name, T1.last_name, T2.amount\nFROM member AS T1\nJOIN income AS T2\nON T1.member_id = T2.link_to_member\nWHERE T2.date_received = '2019-09-09'",
  "SELECT T2.category \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nWHERE T1.expense_description = 'Posters';",
  "SELECT T1.first_name, T1.last_name, T2.college\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T1.position = 'Secretary'",
  "SELECT SUM(b.spent), e.event_name\nFROM budget AS b\nJOIN event AS e\nON b.link_to_event = e.event_id\nWHERE b.category = 'Speaker Gifts';",
  "SELECT T2.city \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Garrett\" AND T1.last_name = \"Gerke\";",
  "SELECT T1.first_name, T1.last_name, T1.position\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T2.city = 'Lincolnton' \n  AND T2.state = 'North Carolina' \n  AND T1.zip = 28092",
  "SELECT COUNT(*) \nFROM gasstations \nWHERE Country = 'CZE' AND Segment = 'Premium'",
  "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) \nFROM customers;",
  "SELECT T1.CustomerID\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Segment = 'LAM'\n  AND T2.Date BETWEEN '201201' AND '201212'\nORDER BY T2.Consumption ASC\nLIMIT 1;",
  "SELECT AVG(T2.Consumption) \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'SME' \n  AND T2.Date BETWEEN '201301' AND '201312'",
  "SELECT T1.CustomerID\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112'\nORDER BY T2.Consumption DESC\nLIMIT 1",
  "SELECT COUNT(*)\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Segment = 'KAM'\n  AND T2.Date BETWEEN '201201' AND '201212'\n  AND T2.Consumption < 30000;",
  "SELECT \n  SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Consumption ELSE 0 END) -\n  SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Consumption ELSE 0 END) AS difference\nFROM \n  customers AS T1\nJOIN \n  yearmonth AS T2\nON \n  T1.CustomerID = T2.CustomerID\nWHERE \n  T2.Date BETWEEN '201201' AND '201212'",
  "SELECT SUBSTR(T1.`Date`, 1, 4) AS Year\nFROM yearmonth AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Currency = 'EUR'\nGROUP BY SUBSTR(T1.`Date`, 1, 4)\nORDER BY SUM(T1.Consumption) DESC\nLIMIT 1",
  "SELECT T1.Segment\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nGROUP BY T1.Segment\nORDER BY SUM(T2.Consumption)\nLIMIT 1",
  "SELECT SUBSTR(T1.`Date`, 1, 4) AS Year\nFROM yearmonth AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Currency = 'CZK'\nGROUP BY SUBSTR(T1.`Date`, 1, 4)\nORDER BY SUM(T1.Consumption) DESC\nLIMIT 1;",
  "SELECT T1.`Date`\nFROM yearmonth AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Segment = 'SME'\nAND T1.`Date` BETWEEN '201301' AND '201312'\nORDER BY T1.Consumption DESC\nLIMIT 1",
  "WITH LowestConsumption AS (\n  SELECT \n    c.Segment,\n    y.CustomerID,\n    y.Consumption\n  FROM \n    customers c\n  JOIN \n    yearmonth y ON c.CustomerID = y.CustomerID\n  WHERE \n    c.Currency = 'CZK' \n    AND y.Date BETWEEN '201301' AND '201312'\n),\nRankedConsumption AS (\n  SELECT \n    Segment,\n    CustomerID,\n    Consumption,\n    ROW_NUMBER() OVER (PARTITION BY Segment ORDER BY Consumption ASC) as rn\n  FROM \n    LowestConsumption\n),\nLowestRankedConsumption AS (\n  SELECT \n    Segment,\n    CustomerID,\n    Consumption\n  FROM \n    RankedConsumption\n  WHERE \n    rn = 1\n),\nSegmentTotalConsumption AS (\n  SELECT \n    Segment,\n    SUM(Consumption) AS TotalConsumption\n  FROM \n    LowestRankedConsumption\n  GROUP BY \n    Segment\n),\nSegmentCount AS (\n  SELECT \n    Segment,\n    COUNT(CustomerID) AS CustomerCount\n  FROM \n    LowestRankedConsumption\n  GROUP BY \n    Segment\n),\nAnnualAverageConsumption AS (\n  SELECT \n    stc.Segment,\n    stc.TotalConsumption / sc.CustomerCount AS AnnualAverage\n  FROM \n    SegmentTotalConsumption stc\n  JOIN \n    SegmentCount sc ON stc.Segment = sc.Segment\n)\nSELECT \n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'SME') - \n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'LAM') AS SME_LAM_Difference,\n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'LAM') - \n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'KAM') AS LAM_KAM_Difference,\n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'KAM') - \n  (SELECT AnnualAverage FROM AnnualAverageConsumption WHERE Segment = 'SME') AS KAM_SME_Difference;",
  "WITH segment_consumption AS (\n  SELECT \n    c.Segment,\n    SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2012' THEN y.Consumption ELSE 0 END) AS consumption_2012,\n    SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2013' THEN y.Consumption ELSE 0 END) AS consumption_2013\n  FROM \n    customers c\n  JOIN \n    yearmonth y ON c.CustomerID = y.CustomerID\n  WHERE \n    c.Currency = 'EUR'\n  GROUP BY \n    c.Segment\n),\nsegment_percentage_increase AS (\n  SELECT \n    Segment,\n    CASE \n      WHEN consumption_2013 = 0 THEN 0\n      ELSE ((consumption_2013 - consumption_2012) * 100.0 / consumption_2013)\n    END AS percentage_increase\n  FROM \n    segment_consumption\n)\nSELECT \n  (SELECT Segment FROM segment_percentage_increase ORDER BY percentage_increase DESC LIMIT 1) AS max_increase_segment,\n  (SELECT Segment FROM segment_percentage_increase ORDER BY percentage_increase ASC LIMIT 1) AS min_increase_segment;",
  "SELECT SUM(Consumption) \nFROM yearmonth \nWHERE CustomerID = 6 \n  AND Date BETWEEN '201308' AND '201311'",
  "SELECT \n  SUM(CASE WHEN Country = 'CZE' THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN Country = 'SVK' THEN 1 ELSE 0 END) AS difference\nFROM \n  gasstations\nWHERE \n  Segment = 'Discount'",
  "SELECT \n  (SELECT Consumption \n   FROM yearmonth \n   WHERE CustomerID = 7 AND Date = '201304') \n  - \n  (SELECT Consumption \n   FROM yearmonth \n   WHERE CustomerID = 5 AND Date = '201304') \nAS ConsumptionDifference",
  "SELECT \n    SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS Amount_of_More_SMEs\nFROM \n    customers AS T1\nJOIN \n    transactions_1k AS T2 \nON \n    T1.CustomerID = T2.CustomerID\nWHERE \n    T1.Segment = 'SME'",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'LAM' \n  AND T1.Currency = 'EUR' \n  AND T2.Date = '201310' \nORDER BY T2.Consumption DESC \nLIMIT 1",
  "SELECT T1.CustomerID, T2.Consumption\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Segment = 'KAM'\nORDER BY T2.Consumption DESC\nLIMIT 1",
  "SELECT SUM(T2.Consumption)\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Segment = 'KAM' AND T2.Date = '201305'",
  "SELECT CAST(SUM(CASE WHEN y.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Segment = 'LAM';",
  "SELECT Country, COUNT(*) \nFROM gasstations \nWHERE Segment = 'Value for money' \nGROUP BY Country;",
  "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers \nWHERE Segment = 'KAM'",
  "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM yearmonth \nWHERE `Date` = '201202'",
  "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM gasstations \nWHERE Country = 'SVK'",
  "SELECT CustomerID\nFROM yearmonth\nWHERE Date = '201309'\nORDER BY Consumption DESC\nLIMIT 1",
  "SELECT T1.Segment\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Date = '201309'\nGROUP BY T1.Segment\nORDER BY SUM(T2.Consumption) ASC\nLIMIT 1",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'SME' \n  AND T2.Date = '201206' \nORDER BY T2.Consumption ASC \nLIMIT 1",
  "SELECT MAX(Consumption) \nFROM yearmonth \nWHERE Date LIKE '2012%'",
  "SELECT MAX(T2.Consumption) \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Currency = 'EUR'",
  "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN products p ON t.ProductID = p.ProductID\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nWHERE y.Date = '201309'",
  "SELECT DISTINCT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nWHERE y.Date = '201306';",
  "SELECT DISTINCT T3.ChainID\nFROM transactions_1k AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nJOIN gasstations AS T3\nON T1.GasStationID = T3.GasStationID\nWHERE T2.Currency = 'EUR'",
  "SELECT DISTINCT p.Description\nFROM products p\nJOIN transactions_1k t ON p.ProductID = t.ProductID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR'",
  "SELECT AVG(Amount * Price) \nFROM transactions_1k \nWHERE Date LIKE '2012-01%'",
  "SELECT COUNT(*)\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Currency = 'EUR' AND T2.Consumption > 1000",
  "SELECT DISTINCT T1.Description\nFROM products AS T1\nJOIN transactions_1k AS T2\nON T1.ProductID = T2.ProductID\nJOIN gasstations AS T3\nON T2.GasStationID = T3.GasStationID\nWHERE T3.Country = 'CZE'",
  "SELECT DISTINCT T1.Time \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T2.ChainID = 11",
  "SELECT COUNT(*)\nFROM transactions_1k AS T1\nJOIN gasstations AS T2\nON T1.GasStationID = T2.GasStationID\nWHERE T2.Country = 'CZE' AND T1.Price > 1000",
  "SELECT COUNT(*)\nFROM transactions_1k AS T1\nJOIN gasstations AS T2\nON T1.GasStationID = T2.GasStationID\nWHERE T2.Country = 'CZE'\n  AND T1.Date > '2012-01-01'",
  "SELECT AVG(T1.Price) \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T2.Country = 'CZE'",
  "SELECT AVG(T1.Price) \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Currency = 'EUR'",
  "SELECT CustomerID \nFROM transactions_1k \nWHERE Date = '2012-08-25' \nGROUP BY CustomerID \nORDER BY SUM(Amount * Price) DESC \nLIMIT 1",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.Date = '2012-08-25' \nORDER BY T1.Time \nLIMIT 1",
  "SELECT T2.Currency \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.`Date` = '2012-08-24' \n  AND T1.`Time` = '16:25:00'",
  "SELECT T1.Segment \nFROM customers AS T1 \nJOIN transactions_1k AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Date = '2012-08-23' \nAND T2.Time = '21:20:00'",
  "SELECT COUNT(*) \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Date = '2012-08-26' \n  AND T1.Time < '13:00:00' \n  AND T2.Currency = 'CZK'",
  "SELECT Segment \nFROM customers \nORDER BY CustomerID \nLIMIT 1",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID  =  T2.GasStationID \nWHERE T1.`Date` = '2012-08-24' \n  AND T1.`Time` = '12:42:00'",
  "SELECT ProductID \nFROM transactions_1k \nWHERE Date = '2012-08-23' AND Time = '21:20:00'",
  "SELECT T2.`Date`, T2.Consumption\nFROM transactions_1k AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.`Date` = '2012-08-24'\n  AND T1.Price = 124.05\n  AND T2.`Date` = '201201';",
  "SELECT COUNT(*)\nFROM transactions_1k AS T1\nJOIN gasstations AS T2\nON T1.GasStationID = T2.GasStationID\nWHERE T1.`Date` = '2012-08-26'\n  AND T1.`Time` BETWEEN '08:00:00' AND '09:00:00'\n  AND T2.Country = 'CZE';",
  "SELECT T1.Currency \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID  =  T2.CustomerID \nWHERE T2.Date = '201306' \n  AND T2.Consumption = 214582.17",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID  =  T2.GasStationID \nWHERE T1.CardID = 667467;",
  "SELECT T1.Currency \nFROM customers AS T1 \nJOIN transactions_1k AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.`Date` = '2012-08-24' \n  AND T2.Price = 548.4",
  "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers AS T1 \nJOIN transactions_1k AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Date = '2012-08-25'",
  "SELECT \n    CAST((y1.Consumption - y2.Consumption) AS REAL) / y1.Consumption AS ConsumptionDecreaseRate\nFROM \n    transactions_1k t\nJOIN \n    yearmonth y1 ON t.CustomerID = y1.CustomerID\nJOIN \n    yearmonth y2 ON t.CustomerID = y2.CustomerID\nWHERE \n    t.Date = '2012-08-25' \n    AND t.Price = 634.8\n    AND y1.Date LIKE '2012%' \n    AND y2.Date LIKE '2013%';",
  "SELECT GasStationID\nFROM transactions_1k\nGROUP BY GasStationID\nORDER BY SUM(Amount * Price) DESC\nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM gasstations \nWHERE Country = 'SVK'",
  "SELECT SUM(t1.Amount) \nFROM transactions_1k AS t1 \nJOIN yearmonth AS t2 \nON t1.CustomerID = t2.CustomerID \nWHERE t1.CustomerID = 38508 \n  AND t2.Date = '201201';",
  "SELECT T1.Description \nFROM products AS T1 \nJOIN transactions_1k AS T2 \nON T1.ProductID = T2.ProductID \nGROUP BY T1.Description \nORDER BY SUM(T2.Amount) DESC \nLIMIT 5",
  "SELECT \n    t.CustomerID, \n    SUM(t.Price) / SUM(t.Amount) AS Avg_Price_Per_Item, \n    c.Currency \nFROM \n    transactions_1k t \nJOIN \n    customers c \nON \n    t.CustomerID = c.CustomerID \nGROUP BY \n    t.CustomerID \nORDER BY \n    SUM(t.Price) DESC \nLIMIT 1;",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.ProductID = 2 \nORDER BY T1.Price DESC \nLIMIT 1",
  "SELECT T2.Consumption\nFROM transactions_1k AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.ProductID = 5\n  AND T2.Date = '201208'\n  AND (T1.Price / T1.Amount) > 29.00"
]