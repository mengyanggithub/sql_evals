[
  "SELECT CAST(f.`Free Meal Count (K-12)` AS REAL) / f.`Enrollment (K-12)` AS EligibleFreeRate\nFROM frpm f\nJOIN schools s\nON f.`CDSCode` = s.CDSCode\nWHERE s.County = 'Alameda'\nORDER BY EligibleFreeRate DESC\nLIMIT 1;",
  "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS EligibleFreeRate\nFROM frpm\nWHERE `Educational Option Type` = 'Continuation School'\nORDER BY EligibleFreeRate ASC\nLIMIT 3;",
  "SELECT DISTINCT T2.Zip \nFROM frpm AS T1 \nJOIN schools AS T2 \nON T1.`CDSCode` = T2.`CDSCode` \nWHERE T1.`Charter School (Y/N)` = 1 \nAND T1.`District Name` = 'Fresno County Office of Education';",
  "SELECT T2.MailStreet \nFROM frpm AS T1 \nJOIN schools AS T2 \nON T1.CDSCode = T2.CDSCode \nORDER BY T1.`FRPM Count (K-12)` DESC \nLIMIT 1;",
  "SELECT DISTINCT T1.Phone\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.`CDSCode`\nWHERE T1.OpenDate > '2000-01-01' \nAND T2.`Charter School (Y/N)` = 1 \nAND T1.FundingType = 'Directly funded';",
  "SELECT COUNT(*)\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F';",
  "SELECT DISTINCT T1.School \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nWHERE T2.NumTstTakr > 500 \nAND T1.Magnet = 1;",
  "SELECT T1.Phone \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T2.NumGE1500 DESC \nLIMIT 1;",
  "SELECT T2.NumTstTakr \nFROM frpm AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T1.`FRPM Count (K-12)` DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T2.AvgScrMath > 560\nAND T1.FundingType = 'Directly funded';",
  "SELECT T2.`FRPM Count (Ages 5-17)`\nFROM satscores AS T1\nJOIN frpm AS T2\nON T1.cds = T2.CDSCode\nORDER BY T1.AvgScrRead DESC\nLIMIT 1;",
  "SELECT CDSCode \nFROM frpm \nWHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500;",
  "SELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) \nFROM satscores s \nJOIN frpm f \nON s.cds = f.CDSCode \nWHERE CAST(s.NumGE1500 AS REAL) / s.NumTstTakr > 0.3;",
  "SELECT T2.Phone\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr DESC\nLIMIT 3;",
  "SELECT T1.NCESSchool \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode = T2.CDSCode \nORDER BY T2.`Enrollment (Ages 5-17)` DESC \nLIMIT 5;",
  "SELECT T1.dname \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T2.StatusType = 'Active' \nORDER BY T1.AvgScrRead DESC \nLIMIT 1;",
  "SELECT count(*)\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.StatusType = 'Merged'\nAND schools.County = 'Alameda'\nAND satscores.NumTstTakr < 100;",
  "SELECT T2.CharterNum \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T1.AvgScrWrite > 499 \nAND T2.CharterNum IS NOT NULL \nORDER BY T1.AvgScrWrite DESC;",
  "SELECT count(*)\nFROM schools\nJOIN satscores\nON schools.CDSCode = satscores.cds\nWHERE schools.County = 'Fresno' \nAND schools.FundingType = 'Directly funded' \nAND satscores.NumTstTakr <= 250;",
  "SELECT T2.Phone \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nORDER BY T1.AvgScrMath DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM frpm \nWHERE `County Name` = 'Amador' \nAND `Low Grade` = '9' \nAND `High Grade` = '12';",
  "SELECT count(*) \nFROM frpm \nWHERE `County Name` = 'Los Angeles' \n  AND `Free Meal Count (K-12)` > 500 \n  AND `FRPM Count (K-12)` < 700;",
  "SELECT T2.School \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T1.cname = 'Contra Costa' \nORDER BY T1.NumTstTakr DESC \nLIMIT 1;",
  "SELECT T2.School, T2.Street\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.`CDSCode`\nWHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > 30;",
  "SELECT T1.`School Name`\nFROM frpm AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1\nAND T2.NumGE1500 > 0;",
  "SELECT T1.School, T1.FundingType\nFROM schools AS T1\nJOIN satscores AS T2\nON T1.CDSCode = T2.cds\nWHERE T1.County = 'Riverside' AND T2.AvgScrMath > 400;",
  "SELECT \n    schools.School, \n    schools.Street, \n    schools.City, \n    schools.State, \n    schools.Zip \nFROM \n    schools \nJOIN \n    frpm \nON \n    schools.CDSCode = frpm.CDSCode \nWHERE \n    frpm.`FRPM Count (Ages 5-17)` > 800 \n    AND \n    frpm.`County Name` = 'Monterey' \n    AND \n    frpm.`School Type` = 'High Schools (Public)';",
  "SELECT T1.AvgScrWrite, T1.sname, T2.Phone \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T2.OpenDate > '1991-12-31' OR T2.ClosedDate < '2000-01-01';",
  "SELECT T2.School, T2.DOCType\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.CDSCode\nWHERE T2.FundingType = 'Locally funded'\nAND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (\n    SELECT AVG(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`)\n    FROM frpm AS T1\n    JOIN schools AS T2\n    ON T1.`CDSCode` = T2.CDSCode\n    WHERE T2.FundingType = 'Locally funded'\n)",
  "SELECT T2.OpenDate \nFROM frpm AS T1 \nJOIN schools AS T2 \nON T1.`CDSCode` = T2.CDSCode \nWHERE T2.GSoffered = 'K-12' \nORDER BY T1.`Enrollment (K-12)` DESC \nLIMIT 1;",
  "SELECT T1.City \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode = T2.CDSCode \nORDER BY T2.`Enrollment (K-12)` ASC \nLIMIT 5;",
  "SELECT \n  \"Free Meal Count (K-12)\" / \"Enrollment (K-12)\" AS EligibleFreeRate\nFROM \n  frpm\nORDER BY \n  \"Enrollment (K-12)\" DESC\nLIMIT 9, 2;",
  "SELECT CAST(f.`FRPM Count (K-12)` AS REAL) / f.`Enrollment (K-12)` AS EligibleFreeOrReducedPriceMealRate\nFROM frpm f\nJOIN schools s ON f.`CDSCode` = s.CDSCode\nWHERE s.SOC = '66'\nORDER BY f.`FRPM Count (K-12)` DESC\nLIMIT 5;",
  "SELECT DISTINCT T1.Website, T1.School\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.`FRPM Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
  "SELECT CAST(f.`Free Meal Count (Ages 5-17)` AS REAL) / f.`Enrollment (Ages 5-17)`\nFROM frpm f\nJOIN schools s ON f.`CDSCode` = s.CDSCode\nWHERE s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson';",
  "SELECT T2.AdmEmail1\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.`CDSCode` = T2.CDSCode\nWHERE T1.`Charter School (Y/N)` = 1\nORDER BY T1.`Enrollment (K-12)`\nLIMIT 1;",
  "SELECT T1.AdmFName1, T1.AdmLName1 \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T2.NumGE1500 DESC \nLIMIT 1;",
  "SELECT T1.Street, T1.City, T1.Zip, T1.State \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr \nLIMIT 1;",
  "SELECT T1.Website \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nWHERE T1.County = 'Los Angeles' \nAND T2.NumTstTakr BETWEEN 2000 AND 3000;",
  "SELECT AVG(T1.NumTstTakr)\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nWHERE T2.County = 'Fresno'\nAND T2.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
  "SELECT T2.Phone \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T1.dname = 'Fresno Unified' \nORDER BY T1.AvgScrRead ASC \nLIMIT 1;",
  "WITH RankedSchools AS (\n    SELECT \n        s.School,\n        s.County,\n        ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank\n    FROM \n        schools s\n    JOIN \n        satscores ss ON s.CDSCode = ss.cds\n    WHERE \n        s.Virtual = 'F'\n)\nSELECT \n    School\nFROM \n    RankedSchools\nWHERE \n    rank <= 5;",
  "SELECT T2.EdOpsName \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nORDER BY T1.AvgScrMath DESC \nLIMIT 1;",
  "SELECT AvgScrMath, cname \nFROM satscores \nORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) \nLIMIT 1;",
  "SELECT T1.AvgScrWrite, T2.City \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nORDER BY T1.NumGE1500 DESC \nLIMIT 1;",
  "SELECT T1.School, AVG(T2.AvgScrWrite) \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds\nWHERE T1.AdmFName1 = \"Ricci\" AND T1.AdmLName1 = \"Ulrich\"\nGROUP BY T1.School;",
  "SELECT T1.School \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode = T2.CDSCode \nWHERE T1.DOC = '31' \nORDER BY T2.`Enrollment (K-12)` DESC \nLIMIT 1;",
  "SELECT CAST(COUNT(*) AS REAL) / 12 \nFROM schools \nWHERE County = 'Alameda' \nAND DOC = 52 \nAND STRFTIME('%Y', OpenDate) = '1980';",
  "SELECT CAST(SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS ratio\nFROM schools\nWHERE County = 'Orange' \nAND StatusType = 'Merged';",
  "SELECT County, School, ClosedDate \nFROM schools \nWHERE StatusType = 'Closed' \nAND County = (\n    SELECT County \n    FROM schools \n    WHERE StatusType = 'Closed' \n    GROUP BY County \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
  "SELECT T1.Street, T2.sname \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T2.AvgScrMath DESC \nLIMIT 6, 1;",
  "SELECT T1.MailStreet, T1.School \nFROM schools AS T1 \nJOIN satscores AS T2 \nON T1.CDSCode = T2.cds \nORDER BY T2.AvgScrRead ASC \nLIMIT 1;",
  "SELECT COUNT(*) \nFROM satscores \nJOIN schools \nON satscores.cds = schools.CDSCode \nWHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 \nAND schools.MailCity = 'Lakeport';",
  "SELECT SUM(T1.NumTstTakr) \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nWHERE T2.MailCity = 'Fresno';",
  "SELECT School, MailZip \nFROM schools \nWHERE AdmFName1 = \"Avetik\" \nAND AdmLName1 = \"Atoian\";",
  "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) AS Ratio\nFROM schools\nWHERE MailState = 'CA';",
  "SELECT count(*) \nFROM schools \nWHERE MailState = 'CA' \n  AND City = 'San Joaquin' \n  AND StatusType = 'Active';",
  "SELECT T2.Phone, T2.Ext\nFROM satscores AS T1\nJOIN schools AS T2\nON T1.cds = T2.CDSCode\nORDER BY T1.AvgScrWrite DESC\nLIMIT 332, 1;",
  "SELECT Phone, Ext, School \nFROM schools \nWHERE Zip = '95203-3704';",
  "SELECT Website \nFROM schools \nWHERE (AdmFName1 = \"Mike\" AND AdmLName1 = \"Larson\") \n   OR (AdmFName1 = \"Dante\" AND AdmLName1 = \"Alvarez\");",
  "SELECT Website \nFROM schools \nWHERE Virtual = 'P' \nAND Charter = 1 \nAND County = 'San Joaquin';",
  "SELECT count(*) \nFROM schools \nWHERE Charter = 1 \nAND City = \"Hickman\" \nAND DOC = \"52\";",
  "SELECT COUNT(*)\nFROM schools \nJOIN frpm \nON schools.CDSCode = frpm.CDSCode\nWHERE schools.County = 'Los Angeles' \n  AND schools.Charter = 0 \n  AND (frpm.`Free Meal Count (K-12)` * 100.0 / frpm.`Enrollment (K-12)`) < 0.18;",
  "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3, School, City \nFROM schools \nWHERE Charter = 1 AND CharterNum = '00D2';",
  "SELECT count(*) \nFROM schools \nWHERE MailCity = \"Hickman\" \nAND CharterNum = \"00D4\";",
  "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM schools \nWHERE County = 'Santa Clara';",
  "SELECT count(*) \nFROM schools \nWHERE FundingType = 'Directly funded' \nAND County = 'Stanislaus' \nAND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';",
  "SELECT COUNT(*) \nFROM schools \nWHERE ClosedDate LIKE '1989%' \nAND City = 'San Francisco' \nAND DOCType = 'Community College District';",
  "SELECT County \nFROM schools \nWHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' \nAND SOC = 11 \nGROUP BY County \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT NCESDist \nFROM schools \nWHERE SOC = '31';",
  "SELECT count(*)\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nWHERE (schools.StatusType = 'Active' OR schools.StatusType = 'Closed')\nAND frpm.`School Type` = 'District Community Day Schools'\nAND schools.County = 'Alpine'",
  "SELECT District \nFROM schools \nWHERE Magnet = 0 \nAND City = 'Fresno';",
  "SELECT T1.`Enrollment (Ages 5-17)`\nFROM frpm AS T1\nJOIN schools AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T2.EdOpsCode = 'SSS'\nAND T2.City = 'Fremont'\nAND T1.`Academic Year` = '2014-2015'",
  "SELECT frpm.`FRPM Count (Ages 5-17)`\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.MailStrAbr = 'PO Box 1040'\nAND schools.EdOpsName = 'Youth Authority School';",
  "SELECT T2.`Low Grade`\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.EdOpsCode = 'SPECON' AND T1.NCESDist = '0613360';",
  "SELECT T2.EILName, T2.School \nFROM frpm AS T1 \nJOIN schools AS T2 \nON T1.CDSCode = T2.CDSCode \nWHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' \nAND T1.`County Code` = '37';",
  "SELECT T1.City \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode = T2.CDSCode \nWHERE T1.EILCode = 'HS' \nAND T2.`NSLP Provision Status` = 'Lunch Provision 2' \nAND T2.`Low Grade` = '9' \nAND T2.`High Grade` = '12' \nAND T1.County = 'Merced';",
  "SELECT \n  schools.School, \n  CAST(frpm.`FRPM Count (Ages 5-17)` AS REAL) * 100 / frpm.`Enrollment (Ages 5-17)` AS PercentEligibleFRPMAges5to17\nFROM \n  frpm\nJOIN \n  schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n  schools.GSserved = 'K-9' \n  AND schools.County = 'Los Angeles';",
  "SELECT GSserved \nFROM schools \nWHERE City = 'Adelanto' \nGROUP BY GSserved \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT County, COUNT(*) as num_schools\nFROM schools\nWHERE Virtual = 'F' AND (County = 'San Diego' OR County = 'Santa Barbara')\nGROUP BY County\nORDER BY num_schools DESC\nLIMIT 1;",
  "SELECT T2.`School Type`, T1.School, T1.Latitude \nFROM schools AS T1 \nJOIN frpm AS T2 \nON T1.CDSCode = T2.`CDSCode` \nORDER BY T1.Latitude DESC \nLIMIT 1;",
  "SELECT T1.City, T2.`Low Grade`, T2.`School Name`\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.State = 'CA'\nORDER BY T1.Latitude ASC\nLIMIT 1;",
  "SELECT GSoffered \nFROM schools \nORDER BY ABS(Longitude) DESC \nLIMIT 1;",
  "SELECT T1.City, COUNT(*)\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.Magnet = 1\nAND T1.GSoffered = 'K-8'\nAND T2.`NSLP Provision Status` = 'Multiple Provision Types'\nGROUP BY T1.City;",
  "SELECT AdmFName1, District\nFROM schools\nGROUP BY AdmFName1\nORDER BY COUNT(AdmFName1) DESC\nLIMIT 2;",
  "SELECT T2.`Percent (%) Eligible Free (K-12)`, T2.`District Code`\nFROM schools AS T1\nJOIN frpm AS T2\nON T1.CDSCode = T2.CDSCode\nWHERE T1.AdmFName1 = 'Alusine'",
  "SELECT AdmLName1, District, County, School \nFROM schools \nWHERE CharterNum = 40;",
  "SELECT AdmEmail1 \nFROM schools \nWHERE County = 'San Bernardino' \n  AND District = 'San Bernardino City Unified' \n  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' \n  AND SOC = '62' \n  AND DOC = '54';",
  "SELECT T2.AdmEmail1, T2.School \nFROM satscores AS T1 \nJOIN schools AS T2 \nON T1.cds = T2.CDSCode \nORDER BY T1.NumGE1500 DESC \nLIMIT 1;",
  "SELECT count(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east Bohemia'",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A3 = 'Prague'",
  "SELECT \n  CASE \n    WHEN AVG(A12) > AVG(A13) THEN 'A12'\n    ELSE 'A13'\n  END AS higher_unemployment_rate\nFROM \n  district;",
  "SELECT COUNT(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'F' AND T2.A11 > 6000 AND T2.A11 < 10000;",
  "SELECT count(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000;",
  "SELECT T2.account_id, \n       (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district) AS gap\nFROM client AS T1 \nJOIN account AS T2 \nON T1.district_id = T2.district_id \nJOIN district AS T3 \nON T1.district_id = T3.district_id \nWHERE T1.gender = 'F' \nORDER BY T1.birth_date ASC \nLIMIT 1;",
  "SELECT T1.account_id \nFROM account AS T1 \nJOIN client AS T2 \nON T1.district_id = T2.district_id \nJOIN district AS T3 \nON T2.district_id = T3.district_id \nORDER BY T2.birth_date DESC, T3.A11 DESC \nLIMIT 1;",
  "SELECT count(*)\nFROM account\nJOIN disp\nON account.account_id = disp.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
  "SELECT T2.client_id \nFROM account AS T1 \nJOIN disp AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.frequency = 'POPLATEK PO OBRATU' \nAND T2.type = 'DISPONENT';",
  "SELECT T1.account_id\nFROM account AS T1\nJOIN loan AS T2 ON T1.account_id = T2.account_id\nWHERE T2.status = 'A'\nAND T1.frequency = 'POPLATEK TYDNE'\nAND T2.`date` LIKE '1997%'\nORDER BY T2.amount ASC\nLIMIT 1;",
  "SELECT T1.account_id\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T1.duration > 12\nAND T2.date LIKE '1993%'\nORDER BY T1.amount DESC\nLIMIT 1;",
  "SELECT count(*)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'F'\nAND client.birth_date < '1950-01-01'\nAND district.A2 = 'Sokolov';",
  "SELECT account_id \nFROM `trans` \nWHERE `date` BETWEEN '1995-01-01' AND '1995-12-31' \nORDER BY `date` ASC \nLIMIT 1;",
  "SELECT DISTINCT T1.account_id \nFROM account AS T1 \nJOIN trans AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.`date` < '1997-01-01' \nAND T2.amount > 3000;",
  "SELECT T2.client_id \nFROM card AS T1 \nJOIN disp AS T2 \nON T1.disp_id = T2.disp_id \nWHERE T1.issued = '1994-03-03';",
  "SELECT T1.`date`\nFROM account AS T1\nJOIN `trans` AS T2\nON T1.account_id = T2.account_id\nWHERE T2.amount = 840 AND T2.`date` = '1998-10-14'",
  "SELECT account.district_id \nFROM loan \nJOIN account \nON loan.account_id = account.account_id \nWHERE loan.date = '1994-08-25'",
  "SELECT MAX(t.amount) \nFROM `trans` t\nJOIN disp d ON t.account_id = d.account_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE c.issued = '1996-10-21'",
  "SELECT client.gender \nFROM client \nJOIN district ON client.district_id = district.district_id \nORDER BY district.A11 DESC, client.birth_date ASC \nLIMIT 1;",
  "SELECT T2.amount \nFROM loan AS T1 \nJOIN `trans` AS T2 \nON T1.account_id = T2.account_id \nORDER BY T1.amount DESC, T2.date ASC \nLIMIT 1;",
  "SELECT count(*)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE district.A2 = 'Jesenik' AND client.gender = 'F';",
  "SELECT T1.disp_id \nFROM disp AS T1 \nJOIN trans AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.amount = 5100 \nAND T2.date = '1998-09-02';",
  "SELECT count(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996';",
  "SELECT T2.A2 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.gender = 'F' \nAND T1.birth_date = '1976-01-29';",
  "SELECT T1.birth_date \nFROM client AS T1 \nJOIN disp AS T2 \nON T1.client_id = T2.client_id \nJOIN account AS T3 \nON T2.account_id = T3.account_id \nJOIN loan AS T4 \nON T3.account_id = T4.account_id \nWHERE T4.amount = 98832 \nAND T4.`date` = '1996-01-03';",
  "SELECT T1.account_id\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A3 = 'Prague'\nORDER BY T1.date\nLIMIT 1",
  "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T2.A3 = 'south Bohemia' \nORDER BY T2.A4 DESC \nLIMIT 1;",
  "SELECT CAST((t2.balance - t1.balance) AS REAL) * 100 / t1.balance AS increase_rate\nFROM `trans` t1\nJOIN `trans` t2\nON t1.account_id = t2.account_id\nJOIN `account` a\nON t1.account_id = a.account_id\nJOIN `loan` l\nON a.account_id = l.account_id\nWHERE t1.`date` = '1993-03-22'\nAND t2.`date` = '1998-12-27'\nAND l.`date` = '1993-07-05';",
  "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) \nFROM loan;",
  "SELECT CAST(SUM(CASE WHEN status = 'C' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) \nFROM loan \nWHERE amount < 100000;",
  "SELECT account.account_id, district.A2, district.A3\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE account.frequency = 'POPLATEK PO OBRATU'\nAND account.date LIKE '1993-%'",
  "SELECT T1.account_id, T1.frequency\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A3 = 'east Bohemia' AND T1.`date` BETWEEN '1995-01-01' AND '2000-12-31';",
  "SELECT T1.account_id, T1.`date`\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Prachatice';",
  "SELECT T3.A2, T3.A3 \nFROM loan AS T1 \nJOIN account AS T2 \nON T1.account_id = T2.account_id \nJOIN district AS T3 \nON T2.district_id = T3.district_id \nWHERE T1.loan_id = 4990;",
  "SELECT loan.account_id, district.A2, district.A3\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE loan.amount > 300000;",
  "SELECT loan.loan_id, district.A3, district.A11\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE loan.duration = 60;",
  "SELECT \n  d.A2, \n  CAST((d.A13 - d.A12) AS REAL) * 100 / d.A12 AS unemployment_increment_rate \nFROM \n  loan l \n  JOIN account a ON l.account_id = a.account_id \n  JOIN district d ON a.district_id = d.district_id \nWHERE \n  l.status = 'D';",
  "SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM account AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE STRFTIME('%Y', T1.`date`) = '1993';",
  "SELECT account_id\nFROM account\nWHERE frequency = 'POPLATEK MESICNE'",
  "SELECT T2.A2 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.gender = 'F' \nGROUP BY T2.A2 \nORDER BY count(*) DESC \nLIMIT 9;",
  "SELECT d.A2 \nFROM trans t \nJOIN account a ON t.account_id = a.account_id \nJOIN district d ON a.district_id = d.district_id \nWHERE t.type = 'VYDAJ' \nAND t.date LIKE '1996-01%' \nORDER BY t.amount DESC \nLIMIT 10;",
  "SELECT COUNT(*)\nFROM account AS T1\nJOIN district AS T2 ON T1.district_id = T2.district_id\nJOIN disp AS T3 ON T1.account_id = T3.account_id\nLEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id\nWHERE T2.A3 = 'south Bohemia' AND T4.card_id IS NULL;",
  "SELECT T1.A3 \nFROM district AS T1 \nJOIN account AS T2 \nON T1.district_id = T2.district_id \nJOIN loan AS T3 \nON T2.account_id = T3.account_id \nWHERE T3.status IN ('C', 'D') \nGROUP BY T1.A3 \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT AVG(loan.amount) \nFROM loan \nJOIN account ON loan.account_id = account.account_id \nJOIN disp ON account.account_id = disp.account_id \nJOIN client ON disp.client_id = client.client_id \nWHERE client.gender = 'M';",
  "SELECT district_id, A2\nFROM district\nORDER BY A13 DESC\nLIMIT 1;",
  "SELECT count(*) \nFROM account \nWHERE district_id = (\n    SELECT district_id \n    FROM district \n    ORDER BY A16 DESC \n    LIMIT 1\n);",
  "SELECT COUNT(*)\nFROM trans AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T1.operation = 'VYBER KARTOU'\nAND T2.frequency = 'POPLATEK MESICNE'\nAND T1.balance < 0;",
  "SELECT COUNT(*)\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE account.frequency = 'POPLATEK MESICNE'\nAND loan.amount >= 250000\nAND loan.status = 'A'\nAND loan.date BETWEEN '1995-01-01' AND '1997-12-31';",
  "SELECT count(*)\nFROM account \nJOIN loan \nON account.account_id = loan.account_id\nWHERE loan.status IN ('C', 'D') AND account.district_id = 1;",
  "SELECT count(T1.client_id)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M'\nAND T2.A15 = (\n  SELECT DISTINCT A15\n  FROM district\n  ORDER BY A15 DESC\n  LIMIT 1 OFFSET 1\n)",
  "SELECT count(*)\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';",
  "SELECT count(*) \nFROM account \nJOIN district \nON account.district_id = district.district_id \nWHERE district.A2 = 'Pisek';",
  "SELECT DISTINCT T2.A2\nFROM trans AS T1\nJOIN account AS T3 ON T1.account_id = T3.account_id\nJOIN district AS T2 ON T3.district_id = T2.district_id\nWHERE T1.amount > 10000 AND T1.`date` LIKE '1997%'",
  "SELECT T1.account_id\nFROM `order` AS T1\nJOIN account AS T2 ON T1.account_id = T2.account_id\nJOIN district AS T3 ON T2.district_id = T3.district_id\nWHERE T3.A2 = 'Pisek' AND T1.k_symbol = 'SIPO'",
  "SELECT T2.account_id \nFROM card AS T1 \nJOIN disp AS T2 \nON T1.disp_id = T2.disp_id \nWHERE T1.type = 'gold';",
  "SELECT AVG(amount) \nFROM trans \nWHERE operation = 'VYBER KARTOU' \n  AND date LIKE '2021%'",
  "SELECT DISTINCT account_id\nFROM trans\nWHERE `date` BETWEEN '1998-01-01' AND '1998-12-31'\nAND operation = 'VYBER KARTOU'\nAND amount < (\n    SELECT AVG(amount)\n    FROM trans\n    WHERE `date` BETWEEN '1998-01-01' AND '1998-12-31'\n);",
  "SELECT DISTINCT T1.client_id\nFROM client AS T1\nJOIN disp AS T2 ON T1.client_id = T2.client_id\nJOIN card AS T3 ON T2.disp_id = T3.disp_id\nJOIN account AS T4 ON T2.account_id = T4.account_id\nJOIN loan AS T5 ON T4.account_id = T5.account_id\nWHERE T1.gender = 'F' AND T2.type = 'OWNER';",
  "SELECT count(*)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'F' AND district.A3 = 'south Bohemia'",
  "SELECT T1.account_id \nFROM account AS T1 \nJOIN district AS T2 ON T1.district_id = T2.district_id \nJOIN disp AS T3 ON T1.account_id = T3.account_id \nWHERE T2.A2 = 'Tabor' \nAND T3.type = 'OWNER';",
  "SELECT disp.type \nFROM disp \nJOIN account ON disp.account_id = account.account_id \nJOIN district ON account.district_id = district.district_id \nWHERE disp.type != 'OWNER' \nAND district.A11 > 8000 \nAND district.A11 <= 9000;",
  "SELECT count(*)\nFROM trans\nJOIN account ON trans.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE district.A3 = 'north Bohemia' AND trans.bank = 'AB'",
  "SELECT DISTINCT T1.A2\nFROM district AS T1\nJOIN account AS T2\nON T1.district_id = T2.district_id\nJOIN trans AS T3\nON T2.account_id = T3.account_id\nWHERE T3.type = 'VYDAJ'",
  "SELECT AVG(d.A15) \nFROM district AS d \nJOIN account AS a \nON d.district_id = a.district_id \nWHERE d.A15 > 4000 \nAND STRFTIME('%Y', a.`date`) >= '1997';",
  "SELECT count(*)\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'classic' AND disp.type = 'OWNER';",
  "SELECT count(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
  "SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM card;",
  "SELECT T2.client_id \nFROM loan AS T1 \nJOIN disp AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.type = 'OWNER' \nORDER BY T1.amount DESC \nLIMIT 1;",
  "SELECT T2.A15 \nFROM account AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.account_id = 532;",
  "SELECT T2.district_id \nFROM `order` AS T1 \nJOIN account AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.order_id = 33333;",
  "SELECT T3.amount \nFROM client AS T1 \nJOIN disp AS T2 ON T1.client_id = T2.client_id \nJOIN trans AS T3 ON T2.account_id = T3.account_id \nWHERE T1.client_id = 3356 AND T3.operation = 'VYBER'",
  "SELECT COUNT(*)\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;",
  "SELECT T1.type \nFROM card AS T1 \nJOIN disp AS T2 \nON T1.disp_id = T2.disp_id \nWHERE T2.client_id = 13539;",
  "SELECT T2.A3 \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.client_id = 3541;",
  "SELECT T2.district_id\nFROM loan AS T1\nJOIN account AS T2\nON T1.account_id = T2.account_id\nWHERE T1.status = 'A'\nGROUP BY T2.district_id\nORDER BY count(*) DESC\nLIMIT 1;",
  "SELECT T2.client_id \nFROM `order` AS T1 \nJOIN disp AS T2 \nON T1.account_id = T2.account_id \nWHERE T1.order_id = 32423;",
  "SELECT T1.*\nFROM `trans` AS T1\nJOIN `account` AS T2\nON T1.account_id = T2.account_id\nWHERE T2.district_id = 5;",
  "SELECT count(*) \nFROM account \nJOIN district \nON account.district_id = district.district_id \nWHERE district.A2 = 'Jesenik';",
  "SELECT DISTINCT T1.client_id \nFROM client AS T1 \nJOIN disp AS T2 \nON T1.client_id = T2.client_id \nJOIN card AS T3 \nON T2.disp_id = T3.disp_id \nWHERE T3.type = 'junior' \nAND T3.issued >= '1997-01-01';",
  "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T2.A11 > 10000;",
  "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - \n           SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS REAL) * 100 /\n           SUM(CASE WHEN STRFTIME('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS growth_rate\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN account ON disp.account_id = account.account_id\nJOIN loan ON account.account_id = loan.account_id\nWHERE client.gender = 'M';",
  "SELECT count(*) \nFROM trans \nWHERE date > '1995-12-31' \nAND operation = 'VYBER KARTOU';",
  "SELECT \n  SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - \n  SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END) AS crime_difference\nFROM \n  district;",
  "SELECT count(*) \nFROM disp \nWHERE account_id BETWEEN 1 AND 10 \nAND (type = 'OWNER' OR type = 'DISPONENT');",
  "SELECT count(*), k_symbol \nFROM `order`\nWHERE account_id = 3 AND amount = 3539;",
  "SELECT strftime('%Y', T1.birth_date) \nFROM client AS T1 \nJOIN disp AS T2 \nON T1.client_id = T2.client_id \nWHERE T2.disp_id = 130 AND T2.type = 'OWNER';",
  "SELECT count(*)\nFROM account\nJOIN disp ON account.account_id = disp.account_id\nWHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'",
  "SELECT loan.amount, loan.status\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nJOIN disp ON account.account_id = disp.account_id\nJOIN client ON disp.client_id = client.client_id\nWHERE client.client_id = 992;",
  "SELECT trans.balance, client.gender \nFROM client \nJOIN disp ON client.client_id = disp.client_id \nJOIN trans ON disp.account_id = trans.account_id \nWHERE client.client_id = 4 AND trans.trans_id = 851;",
  "SELECT T1.type \nFROM card AS T1 \nJOIN disp AS T2 \nON T1.disp_id = T2.disp_id \nWHERE T2.client_id = 9;",
  "SELECT SUM(t.amount) \nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE d.client_id = 617 \nAND t.date LIKE '1998-%'",
  "SELECT T1.client_id \nFROM client AS T1 \nJOIN district AS T2 \nON T1.district_id = T2.district_id \nWHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' \nAND T2.A3 = 'east Bohemia';",
  "SELECT T1.client_id\nFROM client AS T1\nJOIN disp AS T2 ON T1.client_id = T2.client_id\nJOIN loan AS T3 ON T2.account_id = T3.account_id\nWHERE T1.gender = 'F'\nORDER BY T3.amount DESC\nLIMIT 3;",
  "SELECT count(*)\nFROM client \nJOIN disp ON client.client_id = disp.client_id\nJOIN trans ON disp.account_id = trans.account_id\nWHERE client.gender = 'M' \nAND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31'\nAND trans.amount > 4000 \nAND trans.k_symbol = 'SIPO';",
  "SELECT count(*)\nFROM account AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T2.A2 = 'Beroun' AND STRFTIME('%Y', T1.`date`) > '1996'",
  "SELECT count(*)\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN card ON disp.disp_id = card.disp_id\nWHERE client.gender = 'F' AND card.type = 'junior'",
  "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM client AS T1 \nJOIN account AS T2 \nON T1.district_id = T2.district_id \nJOIN district AS T3 \nON T2.district_id = T3.district_id \nWHERE T3.A3 = 'Prague';",
  "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM client AS T1\nJOIN disp AS T2 ON T1.client_id = T2.client_id\nJOIN account AS T3 ON T2.account_id = T3.account_id\nWHERE T3.frequency = 'POPLATEK TYDNE';",
  "SELECT count(*)\nFROM account\nJOIN disp ON account.account_id = disp.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
  "SELECT T1.account_id \nFROM account AS T1 \nJOIN loan AS T2 \nON T1.account_id = T2.account_id \nWHERE T2.duration > 24 \nAND T1.`date` < '1997-01-01' \nORDER BY T2.amount \nLIMIT 1;",
  "SELECT T2.account_id\nFROM client AS T1\nJOIN account AS T2 ON T1.district_id = T2.district_id\nJOIN district AS T3 ON T1.district_id = T3.district_id\nWHERE T1.gender = 'F'\nORDER BY T1.birth_date ASC, T3.A11 ASC\nLIMIT 1;",
  "SELECT count(*)\nFROM client AS T1\nJOIN district AS T2\nON T1.district_id = T2.district_id\nWHERE T1.birth_date LIKE '1920%' AND T2.A3 = 'east Bohemia'",
  "SELECT COUNT(*)\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;",
  "SELECT AVG(loan.amount) \nFROM loan \nJOIN account \nON loan.account_id = account.account_id \nWHERE loan.status = 'C' \nAND account.frequency = 'POPLATEK PO OBRATU';",
  "SELECT DISTINCT client.client_id, client.district_id\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nWHERE disp.type = 'OWNER';",
  "SELECT \n  client.client_id, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', client.birth_date) AS age\nFROM \n  client\nJOIN \n  disp ON client.client_id = disp.client_id\nJOIN \n  card ON disp.disp_id = card.disp_id\nWHERE \n  card.type = 'gold' \n  AND disp.type = 'OWNER';",
  "SELECT bond_type\nFROM bond\nGROUP BY bond_type\nORDER BY COUNT(bond_type) DESC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.label = '-' AND atom.element = 'cl'",
  "SELECT CAST(SUM(CASE WHEN T1.element = 'o' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.bond_type = '-';",
  "SELECT CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) \nFROM molecule m \nJOIN bond b \nON m.molecule_id = b.molecule_id \nWHERE m.label = '+';",
  "SELECT COUNT(*)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE atom.element = 'na' AND molecule.label = '-';",
  "SELECT DISTINCT molecule.molecule_id\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = '#' AND molecule.label = '+'",
  "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.bond_type = '=';",
  "SELECT count(*) \nFROM bond \nWHERE bond_type = '#'",
  "SELECT count(*) \nFROM atom \nWHERE element != 'br'",
  "SELECT count(*) \nFROM molecule \nWHERE molecule_id BETWEEN 'TR000' AND 'TR099' \nAND label = '+';",
  "SELECT DISTINCT molecule_id\nFROM atom\nWHERE element = 'c';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR004_8_9'",
  "SELECT DISTINCT T1.element\nFROM atom AS T1\nJOIN connected AS T2 ON T1.atom_id = T2.atom_id\nJOIN bond AS T3 ON T2.bond_id = T3.bond_id\nWHERE T3.bond_type = '='",
  "SELECT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'h' \nGROUP BY T2.label \nORDER BY COUNT(T2.label) DESC \nLIMIT 1;",
  "SELECT DISTINCT T3.bond_type \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nJOIN bond AS T3 \nON T2.bond_id = T3.bond_id \nWHERE T1.element = 'cl';",
  "SELECT T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.bond_type = '-';",
  "SELECT T1.atom_id, T1.atom_id2\nFROM connected AS T1\nJOIN bond AS T3\nON T1.bond_id = T3.bond_id\nJOIN molecule AS T2\nON T3.molecule_id = T2.molecule_id\nWHERE T2.label = '-';",
  "SELECT T2.element \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '-' \nGROUP BY T2.element \nORDER BY COUNT(T2.element) ASC \nLIMIT 1;",
  "SELECT T2.bond_type \nFROM connected AS T1 \nJOIN bond AS T2 \nON T1.bond_id = T2.bond_id \nWHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') \n   OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8');",
  "SELECT DISTINCT T1.label \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.element != 'sn';",
  "SELECT COUNT(DISTINCT T1.atom_id) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE (T1.element = 'i' OR T1.element = 's') \nAND T2.bond_type = '-';",
  "SELECT T1.atom_id, T1.atom_id2\nFROM connected AS T1\nJOIN bond AS T2\nON T1.bond_id = T2.bond_id\nWHERE T2.bond_type = '#'",
  "SELECT T2.atom_id2 \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.molecule_id = 'TR181';",
  "SELECT CAST(SUM(CASE WHEN T2.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+';",
  "SELECT CAST(SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond.bond_id) AS percent\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+'",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR000' \nORDER BY element \nLIMIT 3;",
  "SELECT atom_id, atom_id2 \nFROM connected \nWHERE bond_id = 'TR001_2_6';",
  "SELECT \n  SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference \nFROM \n  molecule;",
  "SELECT atom_id, atom_id2\nFROM connected\nWHERE bond_id = 'TR000_2_5';",
  "SELECT bond_id \nFROM connected \nWHERE atom_id2 = 'TR000_2';",
  "SELECT DISTINCT molecule_id \nFROM bond \nWHERE bond_type = '=' \nORDER BY molecule_id \nLIMIT 5;",
  "SELECT CAST(SUM(IIF(bond_type = '=', 1, 0)) AS REAL) * 100 / COUNT(bond_id) AS percentage\nFROM bond\nWHERE molecule_id = 'TR008';",
  "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) AS percent\nFROM molecule;",
  "SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM atom \nWHERE molecule_id = 'TR206';",
  "SELECT bond_type \nFROM bond \nWHERE molecule_id = 'TR000';",
  "SELECT atom.element, molecule.label\nFROM atom\nJOIN molecule\nON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR060';",
  "SELECT T1.bond_type, T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id = 'TR010' \nGROUP BY T1.bond_type \nORDER BY COUNT(T1.bond_type) DESC \nLIMIT 1;",
  "SELECT DISTINCT m.molecule_id \nFROM molecule AS m \nJOIN bond AS b \nON m.molecule_id = b.molecule_id \nWHERE m.label = '-' \nAND b.bond_type = '-' \nORDER BY m.molecule_id \nLIMIT 3;",
  "SELECT bond_id \nFROM bond \nWHERE molecule_id = 'TR006' \nORDER BY bond_id \nLIMIT 2;",
  "SELECT COUNT(*)\nFROM connected\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')\nAND atom.molecule_id = 'TR009';",
  "SELECT COUNT(*)\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.label = '+' AND atom.element = 'br';",
  "SELECT bond.bond_type, connected.atom_id, connected.atom_id2\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE bond.bond_id = 'TR001_6_9'",
  "SELECT T2.molecule_id, T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.atom_id = 'TR001_10';",
  "SELECT COUNT(*) \nFROM bond \nWHERE bond_type = '#';",
  "SELECT COUNT(bond_id) \nFROM connected \nWHERE atom_id LIKE 'TR%_19'",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR004';",
  "SELECT COUNT(*) \nFROM molecule \nWHERE label = '-';",
  "SELECT DISTINCT T1.molecule_id\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25'\nAND T2.label = '+';",
  "SELECT T2.bond_id \nFROM atom AS T1 \nJOIN connected AS T2 ON T1.atom_id = T2.atom_id \nJOIN atom AS T3 ON T3.atom_id = T2.atom_id2 \nWHERE (T1.element = 'p' AND T3.element = 'n') \n   OR (T1.element = 'n' AND T3.element = 'p')",
  "SELECT T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '=' \nGROUP BY T1.molecule_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT CAST(COUNT(c.bond_id) AS REAL) / COUNT(DISTINCT a.atom_id) \nFROM atom a \nJOIN connected c ON a.atom_id = c.atom_id \nWHERE a.element = 'i';",
  "SELECT T1.bond_type, T1.bond_id \nFROM bond AS T1 \nJOIN connected AS T2 \nON T1.bond_id = T2.bond_id \nJOIN atom AS T3 \nON T2.atom_id = T3.atom_id \nWHERE SUBSTR(T3.atom_id, 7, 2) = '45'",
  "SELECT DISTINCT element \nFROM atom \nWHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected)",
  "SELECT T2.atom_id, T2.atom_id2\nFROM bond AS T1\nJOIN connected AS T2\nON T1.bond_id = T2.bond_id\nWHERE T1.molecule_id = 'TR041' AND T1.bond_type = '#'",
  "SELECT T2.element \nFROM connected AS T1 \nJOIN atom AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.bond_id = 'TR144_8_19'\nUNION\nSELECT T4.element \nFROM connected AS T3 \nJOIN atom AS T4 \nON T3.atom_id2 = T4.atom_id \nWHERE T3.bond_id = 'TR144_8_19';",
  "SELECT T1.molecule_id \nFROM molecule AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+' \nAND T2.bond_type = '=' \nGROUP BY T1.molecule_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T2.element\nFROM molecule AS T1\nJOIN atom AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.label = '+'\nGROUP BY T2.element\nORDER BY COUNT(T2.element) ASC\nLIMIT 1;",
  "SELECT T2.atom_id2 \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.element = 'pb';",
  "SELECT DISTINCT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nJOIN bond AS T3 \nON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = '#'",
  "WITH element_combinations AS (\n    SELECT a1.element || '-' || a2.element AS element_combination\n    FROM atom a1 \n    JOIN connected c ON a1.atom_id = c.atom_id \n    JOIN atom a2 ON c.atom_id2 = a2.atom_id\n),\nelement_counts AS (\n    SELECT element_combination, COUNT(*) AS cnt\n    FROM element_combinations\n    GROUP BY element_combination\n),\nmost_common_combination AS (\n    SELECT element_combination\n    FROM element_counts\n    ORDER BY cnt DESC\n    LIMIT 1\n)\nSELECT CAST(SUM(CASE WHEN ec.element_combination = mcc.element_combination THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM element_combinations ec, most_common_combination mcc",
  "SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '-';",
  "SELECT count(*) \nFROM atom \nWHERE element IN ('c', 'h');",
  "SELECT T2.atom_id2\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id\nWHERE T1.element = 's'",
  "SELECT DISTINCT T2.bond_type \nFROM connected AS T1 \nJOIN bond AS T2 ON T1.bond_id = T2.bond_id \nJOIN atom AS T3 ON T1.atom_id = T3.atom_id \nWHERE T3.element = 'sn';",
  "SELECT COUNT(T1.element) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.bond_type = '-';",
  "SELECT COUNT(*)\nFROM atom\nJOIN bond ON atom.molecule_id = bond.molecule_id\nWHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')",
  "SELECT T2.bond_id \nFROM molecule AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+';",
  "SELECT DISTINCT molecule.molecule_id\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = '-' AND molecule.label = '-';",
  "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nJOIN bond AS T3 \nON T2.bond_id = T3.bond_id \nWHERE T3.bond_type = '-';",
  "SELECT label \nFROM molecule \nWHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
  "SELECT molecule_id \nFROM molecule \nWHERE label = '-';",
  "SELECT COUNT(*) \nFROM molecule \nWHERE label = '+' \nAND molecule_id BETWEEN 'TR000' AND 'TR030';",
  "SELECT bond_type \nFROM bond \nWHERE molecule_id BETWEEN 'TR000' AND 'TR050';",
  "SELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id\nWHERE T2.bond_id = 'TR001_10_11'\n\nUNION\n\nSELECT T1.element\nFROM atom AS T1\nJOIN connected AS T2\nON T1.atom_id = T2.atom_id2\nWHERE T2.bond_id = 'TR001_10_11'",
  "SELECT COUNT(T2.bond_id) \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.element = 'i';",
  "SELECT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'ca' \nGROUP BY T2.label \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT DISTINCT CASE \n                    WHEN t1.element = 'cl' AND t2.element = 'c' THEN 'YES'\n                    WHEN t1.element = 'c' AND t2.element = 'cl' THEN 'YES'\n                    ELSE 'NO'\n                 END AS result\nFROM atom AS t1\nJOIN connected AS t3 ON t1.atom_id = t3.atom_id\nJOIN atom AS t2 ON t2.atom_id = t3.atom_id2\nWHERE t3.bond_id = 'TR001_1_8';",
  "SELECT DISTINCT m.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN bond b ON b.molecule_id = m.molecule_id\nWHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-'\nLIMIT 2;",
  "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.label = '+';",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR001';",
  "SELECT molecule_id \nFROM bond \nWHERE bond_type = '='",
  "SELECT T1.atom_id, T1.atom_id2 \nFROM connected AS T1 \nJOIN bond AS T2 \nON T1.bond_id = T2.bond_id \nWHERE T2.bond_type = '#';",
  "SELECT T2.element \nFROM connected AS T1 \nJOIN atom AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T1.bond_id = 'TR000_1_2';",
  "SELECT COUNT(*)\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE molecule.label = '-' AND bond.bond_type = '-';",
  "SELECT T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_id = 'TR001_10_11';",
  "SELECT bond.bond_id, molecule.label \nFROM bond \nJOIN molecule \nON bond.molecule_id = molecule.molecule_id \nWHERE bond.bond_type = '#';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.label = '+' \nAND SUBSTR(T1.atom_id, 7, 1) = '4'",
  "SELECT CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) AS ratio, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.molecule_id = 'TR006';",
  "SELECT DISTINCT T2.label\nFROM atom AS T1\nJOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.element = 'ca';",
  "SELECT DISTINCT T2.bond_type \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'c';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR001_10_11'\n\nUNION\n\nSELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id2 \nWHERE T2.bond_id = 'TR001_10_11';",
  "SELECT CAST(SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM bond;",
  "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM bond \nWHERE molecule_id = 'TR047';",
  "SELECT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.atom_id = 'TR001_1';",
  "SELECT label \nFROM molecule \nWHERE molecule_id = 'TR151';",
  "SELECT element \nFROM atom \nWHERE molecule_id = 'TR151'",
  "SELECT COUNT(*) \nFROM molecule \nWHERE label = '+';",
  "SELECT atom_id \nFROM atom \nWHERE element = 'c' \nAND CAST(substr(molecule_id, 3, 3) AS INTEGER) BETWEEN 10 AND 50;",
  "SELECT COUNT(*)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+';",
  "SELECT T1.bond_id \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '=' \nAND T2.label = '+'",
  "SELECT COUNT(*)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE atom.element = 'h' AND molecule.label = '+'",
  "SELECT T1.molecule_id \nFROM bond AS T1 \nJOIN connected AS T2 \nON T1.bond_id = T2.bond_id \nWHERE T2.bond_id = 'TR000_1_2' \nAND T2.atom_id = 'TR000_1';",
  "SELECT T1.atom_id \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'c' \nAND T2.label = '-';",
  "SELECT CAST(SUM(CASE WHEN m.label = '+' AND a.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*)\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id;",
  "SELECT label \nFROM molecule \nWHERE molecule_id = 'TR124';",
  "SELECT atom_id \nFROM atom \nWHERE molecule_id = 'TR186';",
  "SELECT bond_type \nFROM bond \nWHERE bond_id = 'TR007_4_19';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR001_2_4';",
  "SELECT COUNT(*), T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006';",
  "SELECT molecule.molecule_id, atom.element \nFROM molecule \nJOIN atom \nON molecule.molecule_id = atom.molecule_id \nWHERE molecule.label = '+'",
  "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 \nFROM bond AS T1 \nJOIN connected AS T2 \nON T1.bond_id = T2.bond_id \nWHERE T1.bond_type = '-';",
  "SELECT DISTINCT T1.molecule_id, T1.element \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.bond_type = '#';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.bond_id = 'TR000_2_3';",
  "SELECT COUNT(*)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nWHERE atom.element = 'cl';",
  "SELECT T1.atom_id, COUNT(T2.bond_type) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id = 'TR346' \nGROUP BY T1.atom_id;",
  "SELECT \n  COUNT(*) AS total_double_bonds, \n  SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS total_carcinogenic\nFROM \n  bond AS T1\nJOIN \n  molecule AS T2\nON \n  T1.molecule_id = T2.molecule_id\nWHERE \n  T1.bond_type = '=';",
  "SELECT COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element != 's' \nAND T2.bond_type != '='",
  "SELECT T2.label \nFROM bond AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.bond_id = 'TR001_2_4';",
  "SELECT count(*) \nFROM atom \nWHERE molecule_id = 'TR001'",
  "SELECT count(*) FROM bond WHERE bond_type = '-';",
  "SELECT DISTINCT T2.label \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'cl' \nAND T2.label = '+';",
  "SELECT DISTINCT T1.molecule_id \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T2.element = 'c' \nAND T1.label = '-';",
  "SELECT CAST(SUM(CASE WHEN m.label = '+' AND a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+';",
  "SELECT molecule_id \nFROM bond \nWHERE bond_id = 'TR001_1_7';",
  "SELECT COUNT(*)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nWHERE connected.bond_id = 'TR001_3_4';",
  "SELECT T2.bond_type \nFROM connected AS T1 \nJOIN bond AS T2 \nON T1.bond_id = T2.bond_id \nWHERE T1.atom_id = 'TR000_1' \nAND T1.atom_id2 = 'TR000_2';",
  "SELECT T1.molecule_id \nFROM atom AS T1 \nJOIN connected AS T2 \nON T1.atom_id = T2.atom_id \nWHERE T2.atom_id = 'TR000_2' \nAND T2.atom_id2 = 'TR000_4';",
  "SELECT element \nFROM atom \nWHERE atom_id = 'TR000_1';",
  "SELECT label \nFROM molecule \nWHERE molecule_id = 'TR000';",
  "SELECT CAST(SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) \nFROM bond;",
  "SELECT COUNT(*)\nFROM molecule AS m\nJOIN atom AS a\nON m.molecule_id = a.molecule_id\nWHERE m.label = '+' AND a.element = 'n'",
  "SELECT DISTINCT T1.molecule_id \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 's' \nAND T2.bond_type = '='",
  "SELECT T1.molecule_id \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '-' \nGROUP BY T1.molecule_id \nHAVING COUNT(T2.atom_id) > 5;",
  "SELECT DISTINCT T1.element \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.molecule_id = 'TR024' \nAND T2.bond_type = '='",
  "SELECT T1.molecule_id \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+' \nGROUP BY T1.molecule_id \nORDER BY COUNT(T2.atom_id) DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) \nFROM atom a \nJOIN molecule m ON a.molecule_id = m.molecule_id \nJOIN bond b ON a.molecule_id = b.molecule_id \nWHERE a.element = 'h' AND b.bond_type = '#'",
  "SELECT count(*) \nFROM molecule \nWHERE label = '+'",
  "SELECT COUNT(*) \nFROM bond \nWHERE molecule_id BETWEEN 'TR004' AND 'TR010' \nAND bond_type = '-';",
  "SELECT count(*) \nFROM atom \nWHERE molecule_id = 'TR008' \nAND element = 'c';",
  "SELECT T1.element \nFROM atom AS T1 \nJOIN molecule AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.atom_id = 'TR004_7' \nAND T2.label = '-';",
  "SELECT COUNT(DISTINCT T1.molecule_id)\nFROM atom AS T1\nJOIN bond AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T1.element = 'o' AND T2.bond_type = '='",
  "SELECT COUNT(*)\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = '#' AND molecule.label = '-';",
  "SELECT atom.element, bond.bond_type \nFROM atom \nJOIN bond \nON atom.molecule_id = bond.molecule_id \nWHERE atom.molecule_id = 'TR002';",
  "SELECT T1.atom_id \nFROM atom AS T1 \nJOIN bond AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.element = 'c' \nAND T2.bond_type = '=' \nAND T1.molecule_id = 'TR012';",
  "SELECT T2.atom_id \nFROM molecule AS T1 \nJOIN atom AS T2 \nON T1.molecule_id = T2.molecule_id \nWHERE T1.label = '+' \nAND T2.element = 'o';",
  "SELECT name \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \nAND cardKingdomId IS NOT NULL;",
  "SELECT name \nFROM cards \nWHERE borderColor = 'borderless' \nAND cardKingdomId IS NULL;",
  "SELECT name \nFROM cards \nORDER BY faceConvertedManaCost DESC \nLIMIT 1;",
  "SELECT name \nFROM cards \nWHERE frameVersion = '2015' \nAND edhrecRank < 100;",
  "SELECT DISTINCT cards.name\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE cards.rarity = 'mythic'\nAND legalities.format = 'gladiator'\nAND legalities.status = 'Banned';",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.types = 'Artifact' \nAND T1.side IS NULL \nAND T2.format = 'vintage';",
  "SELECT T1.id, T1.artist \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE (T1.power IS NULL OR T1.power = '*') \nAND T2.format = 'commander' \nAND T2.status = 'Legal';",
  "SELECT cards.id, rulings.text, cards.hasContentWarning\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.artist = 'Stephen Daniele';",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.name = 'Sublime Epiphany' \nAND cards.number = '74s';",
  "SELECT \n    cards.name, \n    cards.artist, \n    cards.isPromo \nFROM \n    cards \nJOIN \n    rulings \nON \n    cards.uuid = rulings.uuid \nGROUP BY \n    cards.name, \n    cards.artist, \n    cards.isPromo \nORDER BY \n    COUNT(rulings.uuid) DESC \nLIMIT 1;",
  "SELECT foreign_data.`language` \nFROM foreign_data \nJOIN cards \nON foreign_data.uuid = cards.uuid \nWHERE cards.name = 'Annul' \nAND cards.number = '29';",
  "SELECT T2.name \nFROM foreign_data AS T2 \nJOIN cards AS T1 \nON T2.uuid = T1.uuid \nWHERE T2.`language` = 'Japanese';",
  "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM foreign_data;",
  "SELECT T1.name, T1.totalSetSize\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Italian';",
  "SELECT COUNT(types) \nFROM cards \nWHERE artist = 'Aaron Boyd';",
  "SELECT keywords \nFROM cards \nWHERE name = 'Angel of Mercy';",
  "SELECT count(*) \nFROM cards \nWHERE power = '*';",
  "SELECT promoTypes \nFROM cards \nWHERE name = 'Duress';",
  "SELECT borderColor \nFROM cards \nWHERE name = 'Ancestor''s Chosen'",
  "SELECT originalType \nFROM cards \nWHERE name = \"Ancestor's Chosen\";",
  "SELECT T2.`language`\nFROM cards AS T1\nJOIN set_translations AS T2\nON T1.setCode = T2.setCode\nWHERE T1.name = 'Angel of Mercy';",
  "SELECT COUNT(*)\nFROM legalities\nJOIN cards ON legalities.uuid = cards.uuid\nWHERE legalities.status = 'Restricted' AND cards.isTextless = 0;",
  "SELECT rulings.text \nFROM rulings \nJOIN cards ON rulings.uuid = cards.uuid \nWHERE cards.name = 'Condemn';",
  "SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Restricted' AND cards.isStarter = 1;",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Cloudchaser Eagle';",
  "SELECT type \nFROM cards \nWHERE name = 'Benalish Knight';",
  "SELECT T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Benalish Knight';",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.`language` = 'Phyrexian'",
  "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards;",
  "SELECT COUNT(*)\nFROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE foreign_data.`language` = 'German' AND cards.isReprint = 1;",
  "SELECT COUNT(*) \nFROM cards \nJOIN foreign_data \nON cards.uuid = foreign_data.uuid \nWHERE cards.borderColor = 'borderless' \nAND foreign_data.`language` = 'Russian';",
  "SELECT CAST(SUM(CASE WHEN T2.`language` = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.isStorySpotlight = 1;",
  "SELECT count(*) \nFROM cards \nWHERE toughness = '99';",
  "SELECT name \nFROM cards \nWHERE artist = 'Aaron Boyd';",
  "SELECT count(*) \nFROM cards \nWHERE borderColor = 'black' \nAND availability = 'mtgo';",
  "SELECT id \nFROM cards \nWHERE convertedManaCost = 0;",
  "SELECT layout \nFROM cards \nWHERE keywords = 'Flying';",
  "SELECT COUNT(*) \nFROM cards \nWHERE originalType = \"Summon - Angel\" \nAND subtypes != \"Angel\";",
  "SELECT id \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \nAND cardKingdomId IS NOT NULL \nAND hasFoil = 1;",
  "SELECT id \nFROM cards \nWHERE duelDeck = 'a';",
  "SELECT edhrecRank \nFROM cards \nWHERE frameVersion = '2015';",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.`language` = 'Chinese Simplified';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.availability = 'paper' \nAND T2.`language` = 'Japanese';",
  "SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Banned' AND cards.borderColor = 'white';",
  "SELECT T1.uuid, T2.`language`\nFROM legalities AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.format = 'legacy';",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.name = 'Beacon of Immortality';",
  "SELECT COUNT(*), T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.frameVersion = 'future' \nGROUP BY T2.status;",
  "SELECT name, colors \nFROM cards \nWHERE setCode = 'OGW';",
  "SELECT T1.name, T2.language, T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.convertedManaCost = 5 \nAND T2.setCode = '10E';",
  "SELECT cards.name, rulings.date\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.originalType = 'Creature - Elf';",
  "SELECT T1.colors, T2.format\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T1.id BETWEEN 1 AND 20;",
  "SELECT DISTINCT T1.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.originalType = 'Artifact' \nAND T1.colors = 'B';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN rulings AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.rarity = 'uncommon' \nORDER BY T2.`date` \nLIMIT 3;",
  "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'John Avon' \nAND cardKingdomFoilId IS NULL;",
  "SELECT count(*) \nFROM cards \nWHERE borderColor = 'white' \nAND cardKingdomFoilId IS NOT NULL \nAND cardKingdomId IS NOT NULL;",
  "SELECT count(*) \nFROM cards \nWHERE artist = 'UDON' \nAND availability = 'mtgo' \nAND hand = '-1';",
  "SELECT COUNT(*) \nFROM cards \nWHERE frameVersion = '1993' \n  AND availability = 'paper' \n  AND hasContentWarning = 1;",
  "SELECT manaCost \nFROM cards \nWHERE layout = 'normal' \nAND frameVersion = '2003' \nAND borderColor = 'black' \nAND availability = 'mtgo,paper';",
  "SELECT SUM(manaCost) \nFROM cards \nWHERE artist = 'Rob Alexander';",
  "SELECT DISTINCT subtypes, supertypes \nFROM cards \nWHERE availability = 'arena';",
  "SELECT setCode \nFROM set_translations \nWHERE language = 'Spanish';",
  "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards \nWHERE frameEffects = 'legendary';",
  "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards;",
  "SELECT CAST(SUM(CASE WHEN T1.`language` = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid;",
  "SELECT T2.`language`\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.baseSetSize = 309;",
  "SELECT COUNT(*) \nFROM sets \nJOIN set_translations \nON sets.code = set_translations.setCode \nWHERE sets.block = 'Commander' \nAND set_translations.`language` = 'Portuguese (Brasil)';",
  "SELECT T1.id \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.types = 'Creature' \nAND T2.status = 'Legal';",
  "SELECT T1.type \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.`language` = 'German' \nAND T2.subtypes IS NOT NULL \nAND T2.supertypes IS NOT NULL;",
  "SELECT COUNT(*) \nFROM cards \nWHERE (power IS NULL OR power = '*') \n  AND text LIKE '%triggered ability%'",
  "SELECT COUNT(*) \nFROM cards \nJOIN rulings ON cards.uuid = rulings.uuid \nJOIN legalities ON cards.uuid = legalities.uuid \nWHERE rulings.text = 'This is a triggered mana ability.' \nAND legalities.format = 'premodern' \nAND cards.side IS NULL;",
  "SELECT T1.id \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.artist = 'Erica Yang' \nAND T2.format = 'pauper' \nAND T1.availability = 'paper';",
  "SELECT T1.artist \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.text = \"Das perfekte Gegenmittel zu einer dichten Formation\";",
  "SELECT T2.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.`language` = 'French' \nAND T1.type LIKE 'Creature%' \nAND T1.layout = 'normal' \nAND T1.borderColor = 'black' \nAND T1.artist = 'Matthew D. Wilson';",
  "SELECT COUNT(*)\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.rarity = 'rare' AND rulings.date = '2007-02-01'",
  "SELECT T2.`language`\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica';",
  "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.format = 'commander' \nAND T2.status = 'Legal';",
  "SELECT CAST(SUM(CASE WHEN T2.`language` = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.power IS NULL OR T1.power = '*';",
  "SELECT CAST(SUM(CASE WHEN T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM set_translations AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.language = 'Japanese';",
  "SELECT availability \nFROM cards \nWHERE artist = 'Daren Bader';",
  "SELECT count(*) \nFROM cards \nWHERE edhrecRank > 12000 \nAND borderColor = 'borderless';",
  "SELECT count(*) \nFROM cards \nWHERE isOversized = 1 \n  AND isReprint = 1 \n  AND isPromo = 1;",
  "SELECT name \nFROM cards \nWHERE (power IS NULL OR power = '*') \nAND promoTypes = 'arenaleague' \nORDER BY name \nLIMIT 3;",
  "SELECT language \nFROM foreign_data \nWHERE multiverseid = 149934;",
  "SELECT cardKingdomFoilId, cardKingdomId \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL \nORDER BY cardKingdomFoilId \nLIMIT 3;",
  "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards;",
  "SELECT number \nFROM cards \nWHERE side IS NULL \nAND subtypes LIKE '%Angel%' \nAND subtypes LIKE '%Wizard%'",
  "SELECT code, name \nFROM sets \nWHERE mtgoCode IS NULL OR mtgoCode = '' \nORDER BY name \nLIMIT 3;",
  "SELECT T2.`language`\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
  "SELECT T1.name, T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.id = 5;",
  "SELECT T1.`language`, T2.type\nFROM set_translations AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T2.id = 206;",
  "SELECT T1.name, T1.id\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.`language` = 'Italian' AND T1.block = 'Shadowmoor'\nORDER BY T1.name\nLIMIT 2;",
  "SELECT T1.name, T1.id \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.isForeignOnly = 0 \nAND T1.isFoilOnly = 1 \nAND T2.language = 'Japanese';",
  "SELECT T1.name \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.language = 'Russian' \nORDER BY T1.baseSetSize DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM foreign_data AS T1 \nJOIN cards AS T3 \nON T1.uuid = T3.uuid \nJOIN sets AS T2 \nON T3.setCode = T2.code \nWHERE T1.`language` = 'Chinese Simplified';",
  "SELECT COUNT(*)\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE set_translations.language = 'Japanese' \nAND (sets.mtgoCode IS NULL OR sets.mtgoCode = '');",
  "SELECT count(id) \nFROM cards \nWHERE borderColor = 'black';",
  "SELECT id \nFROM cards \nWHERE frameEffects = 'extendedart';",
  "SELECT name \nFROM cards \nWHERE borderColor = 'black' \nAND isFullArt = 1;",
  "SELECT language \nFROM set_translations \nWHERE id = 174;",
  "SELECT name\nFROM sets\nWHERE code = \"ALL\";",
  "SELECT language \nFROM foreign_data \nWHERE name = 'A Pedra Fellwar';",
  "SELECT code \nFROM sets \nWHERE releaseDate = '2007-07-13';",
  "SELECT baseSetSize, code\nFROM sets\nWHERE block IN ('Masques', 'Mirage')",
  "SELECT code \nFROM sets \nWHERE type = 'expansion';",
  "SELECT T2.name, T2.type\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.watermark = 'boros';",
  "SELECT T1.`language`, T1.flavorText, T1.type\nFROM foreign_data AS T1\nJOIN cards AS T2\nON T1.uuid = T2.uuid\nWHERE T2.watermark = 'colorpie';",
  "SELECT CAST(SUM(CASE WHEN convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards \nWHERE name = 'Abyssal Horror';",
  "SELECT DISTINCT T2.setCode \nFROM sets AS T1 \nJOIN cards AS T2 \nON T1.code = T2.setCode \nWHERE T1.type = 'expansion' \nOR T1.type = 'commander';",
  "SELECT T1.name, T1.type \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.watermark = 'abzan';",
  "SELECT T2.`language`, T2.type \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.watermark = 'azorius';",
  "SELECT count(*) \nFROM cards \nWHERE artist = 'Aaron Miller' \nAND cardKingdomFoilId IS NOT NULL \nAND cardKingdomId IS NOT NULL;",
  "SELECT COUNT(*) \nFROM cards \nWHERE availability LIKE '%paper%' \nAND hand = '3';",
  "SELECT name \nFROM cards \nWHERE isTextless = 0;",
  "SELECT convertedManaCost \nFROM cards \nWHERE name = 'Ancestor''s Chosen';",
  "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'white' \nAND (power = '*' OR power IS NULL);",
  "SELECT name \nFROM cards \nWHERE isPromo = 1 \nAND side IS NOT NULL;",
  "SELECT subtypes, supertypes \nFROM cards \nWHERE name = 'Molimo, Maro-Sorcerer';",
  "SELECT purchaseUrls \nFROM cards \nWHERE promoTypes = 'bundle';",
  "SELECT COUNT(DISTINCT artist) \nFROM cards \nWHERE borderColor = 'black' \nAND availability LIKE '%arena,mtgo%';",
  "SELECT name \nFROM cards \nWHERE name IN ('Serra Angel', 'Shrine Keeper') \nORDER BY convertedManaCost DESC \nLIMIT 1;",
  "SELECT artist \nFROM cards \nWHERE flavorName = 'Battra, Dark Destroyer'",
  "SELECT name \nFROM cards \nWHERE frameVersion = '2003' \nORDER BY convertedManaCost DESC \nLIMIT 3;",
  "SELECT T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.name = 'Ancestor''s Chosen' \nAND T2.language = 'Italian';",
  "SELECT COUNT(*)\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nWHERE cards.name = 'Angel of Mercy';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T2.translation = 'Hauptset Zehnte Edition'",
  "SELECT T2.language \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Ancestor''s Chosen' \nAND T2.language = 'Korean';",
  "SELECT COUNT(*)\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nWHERE set_translations.translation = 'Hauptset Zehnte Edition'\nAND cards.artist = 'Adam Rex';",
  "SELECT T2.baseSetSize \nFROM set_translations AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.translation = 'Hauptset Zehnte Edition';",
  "SELECT T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Eighth Edition' \nAND T2.`language` = 'Chinese Simplified';",
  "SELECT CASE WHEN T2.mtgoCode IS NOT NULL THEN 'YES' ELSE 'NO' END AS result\nFROM cards AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T1.name = 'Angel of Mercy';",
  "SELECT T1.releaseDate \nFROM sets AS T1 \nJOIN cards AS T2 \nON T1.code = T2.setCode \nWHERE T2.name = 'Ancestor''s Chosen';",
  "SELECT T1.type \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.translation = 'Hauptset Zehnte Edition';",
  "SELECT COUNT(*)\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.block = 'Ice Age'\nAND set_translations.language = 'Italian'\nAND set_translations.translation IS NOT NULL;",
  "SELECT T2.isForeignOnly \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.name = 'Adarkar Valkyrie';",
  "SELECT COUNT(*)\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE set_translations.language = 'Italian'\nAND set_translations.translation IS NOT NULL\nAND sets.baseSetSize < 100;",
  "SELECT COUNT(*) \nFROM cards \nJOIN sets ON cards.setCode = sets.code \nWHERE sets.name = 'Coldsnap' \nAND cards.borderColor = 'black';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nORDER BY T1.convertedManaCost DESC \nLIMIT 1;",
  "SELECT DISTINCT T1.artist \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nAND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nAND T1.number = '4';",
  "SELECT COUNT(*) \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap' \nAND T1.convertedManaCost > 5 \nAND (T1.power IS NULL OR T1.power = '*');",
  "SELECT T2.flavorText \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Ancestor''s Chosen' \nAND T2.`language` = 'Italian';",
  "SELECT T2.`language`\nFROM cards AS T1\nJOIN foreign_data AS T2\nON T1.uuid = T2.uuid\nWHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL;",
  "SELECT T2.type \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.name = 'Ancestor''s Chosen' \nAND T2.`language` = 'German';",
  "SELECT T1.text \nFROM foreign_data AS T1 \nJOIN cards AS T2 \nON T1.uuid = T2.uuid \nJOIN sets AS T3 \nON T2.setCode = T3.code \nWHERE T1.`language` = 'Italian' \nAND T3.name = 'Coldsnap';",
  "SELECT T2.name \nFROM cards AS T1 \nJOIN foreign_data AS T2 \nON T1.uuid = T2.uuid \nJOIN sets AS T3 \nON T1.setCode = T3.code \nWHERE T3.name = 'Coldsnap' \nAND T2.`language` = 'Italian' \nORDER BY T1.convertedManaCost DESC \nLIMIT 1;",
  "SELECT rulings.date \nFROM rulings \nJOIN cards ON rulings.uuid = cards.uuid \nWHERE cards.name = 'Reminisce';",
  "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Coldsnap';",
  "SELECT CAST(SUM(CASE WHEN c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM cards c \nJOIN sets s \nON c.setCode = s.code \nWHERE s.name = 'Coldsnap';",
  "SELECT code \nFROM sets \nWHERE releaseDate = '2017-07-14';",
  "SELECT keyruneCode \nFROM sets \nWHERE code = 'PKHC';",
  "SELECT mcmId \nFROM sets \nWHERE code = 'SS2';",
  "SELECT mcmName \nFROM sets \nWHERE releaseDate = '2017-06-09';",
  "SELECT type \nFROM sets \nWHERE name = 'From the Vault: Lore';",
  "SELECT parentCode \nFROM sets \nWHERE name = 'Commander 2014 Oversized';",
  "SELECT rulings.text, cards.hasContentWarning \nFROM cards \nJOIN rulings \nON cards.uuid = rulings.uuid \nWHERE cards.artist = 'Jim Pavelec';",
  "SELECT T2.releaseDate \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.name = 'Evacuation';",
  "SELECT T2.baseSetSize \nFROM set_translations AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.translation = 'Rinascita di Alara';",
  "SELECT T2.type \nFROM set_translations AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.translation = 'Huitième édition';",
  "SELECT T1.translation \nFROM set_translations AS T1 \nJOIN cards AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.language = 'French' \nAND T2.name = 'Tendo Ice Bridge';",
  "SELECT COUNT(T2.translation) \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Tenth Edition' \nAND T2.translation IS NOT NULL;",
  "SELECT T2.translation \nFROM cards AS T1 \nJOIN set_translations AS T2 \nON T1.setCode = T2.setCode \nWHERE T1.name = 'Fellwar Stone' \nAND T2.language = 'Japanese';",
  "SELECT T1.name \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T2.name = 'Journey into Nyx Hero''s Path' \nORDER BY T1.convertedManaCost DESC \nLIMIT 1;",
  "SELECT T1.releaseDate \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.translation = 'Ola de frío';",
  "SELECT T2.type \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nWHERE T1.name = 'Samite Pilgrim';",
  "SELECT COUNT(*) \nFROM sets \nJOIN cards ON sets.code = cards.setCode \nWHERE sets.name = 'World Championship Decks 2004' \nAND cards.convertedManaCost = 3;",
  "SELECT T2.translation \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Mirrodin' \nAND T2.`language` = 'Chinese Simplified';",
  "SELECT CAST(SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T2.language = 'Japanese';",
  "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM set_translations AS T1\nJOIN sets AS T2\nON T1.setCode = T2.code\nWHERE T1.`language` = 'Portuguese (Brazil)';",
  "SELECT availability \nFROM cards \nWHERE artist = 'Aleksi Briclot' AND isTextless = 1;",
  "SELECT id \nFROM sets \nORDER BY baseSetSize DESC \nLIMIT 1;",
  "SELECT artist \nFROM cards \nWHERE side IS NULL \nORDER BY convertedManaCost DESC \nLIMIT 1;",
  "SELECT frameEffects \nFROM cards \nWHERE cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL \nGROUP BY frameEffects \nORDER BY COUNT(frameEffects) DESC \nLIMIT 1;",
  "SELECT COUNT(*) \nFROM cards \nWHERE (power IS NULL OR power = '*') \nAND hasFoil = 0 \nAND duelDeck = 'a';",
  "SELECT id \nFROM sets \nWHERE type = 'commander' \nORDER BY totalSetSize DESC \nLIMIT 1;",
  "SELECT c.name \nFROM cards c \nJOIN legalities l \nON c.uuid = l.uuid \nWHERE l.format = 'duel' \nORDER BY c.convertedManaCost DESC \nLIMIT 10;",
  "SELECT T1.originalReleaseDate, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.rarity = 'mythic' \nAND T2.status = 'Legal' \nORDER BY T1.originalReleaseDate ASC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE cards.artist = 'Volkan Baǵa' AND foreign_data.`language` = 'French';",
  "SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE cards.name = 'Abundance'\n  AND cards.rarity = 'rare'\n  AND cards.types = 'Enchantment'\n  AND legalities.status = 'Legal';",
  "SELECT l.format, c.name\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE l.status = 'Banned'\nGROUP BY l.format\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT T2.`language` \nFROM sets AS T1 \nJOIN set_translations AS T2 \nON T1.code = T2.setCode \nWHERE T1.name = 'Battlebond';",
  "SELECT T1.artist, T2.format\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nGROUP BY T1.artist\nORDER BY COUNT(T1.artist) ASC\nLIMIT 1;",
  "SELECT T2.status \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T1.artist = 'D. Alexander Gregory' \nAND T1.frameVersion = '1997' \nAND T2.format = 'legacy' \nAND T1.hasContentWarning = 1;",
  "SELECT T1.name, T2.format \nFROM cards AS T1 \nJOIN legalities AS T2 \nON T1.uuid = T2.uuid \nWHERE T2.status = 'Banned' \nAND T1.edhrecRank = 1;",
  "SELECT CAST(COUNT(T1.id) AS REAL) / 4, T2.`language`\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\nGROUP BY T2.`language`\nORDER BY COUNT(T2.`language`) DESC\nLIMIT 1;",
  "SELECT artist \nFROM cards \nWHERE borderColor = 'black' \nAND availability = 'arena';",
  "SELECT uuid \nFROM legalities \nWHERE format = 'oldschool' \n  AND (status = 'Banned' OR status = 'Restricted');",
  "SELECT count(*) \nFROM cards \nWHERE artist = 'Matthew D. Wilson' \nAND availability = 'paper';",
  "SELECT rulings.text \nFROM rulings \nJOIN cards \nON rulings.uuid = cards.uuid \nWHERE cards.artist = 'Kev Walker' \nORDER BY rulings.date DESC;",
  "SELECT T1.name, T3.format \nFROM cards AS T1 \nJOIN sets AS T2 \nON T1.setCode = T2.code \nJOIN legalities AS T3 \nON T1.uuid = T3.uuid \nWHERE T2.name = 'Hour of Devastation' \nAND T3.status = 'Legal';",
  "SELECT DISTINCT T1.name\nFROM sets AS T1\nJOIN set_translations AS T2\nON T1.code = T2.setCode\nWHERE T2.language = 'Korean'",
  "SELECT T1.frameVersion, T1.name, T2.status\nFROM cards AS T1\nJOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T1.artist = 'Allen Williams' AND T2.status = 'Banned';",
  "SELECT DisplayName\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nORDER BY Reputation DESC\nLIMIT 1;",
  "SELECT DisplayName \nFROM users \nWHERE STRFTIME('%Y', CreationDate) = '2011'",
  "SELECT count(*) \nFROM users \nWHERE LastAccessDate > '2014-09-01'",
  "SELECT DisplayName \nFROM users \nORDER BY Views DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM users \nWHERE UpVotes > 100 \nAND DownVotes > 1;",
  "SELECT COUNT(*) \nFROM users \nWHERE Views > 10 \nAND STRFTIME('%Y', CreationDate) > '2013';",
  "SELECT COUNT(*)\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'csgillespie';",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie';",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = \"Eliciting priors from experts\"",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = \"csgillespie\" \nORDER BY T1.ViewCount DESC \nLIMIT 1;",
  "SELECT OwnerDisplayName \nFROM posts \nORDER BY FavoriteCount DESC \nLIMIT 1;",
  "SELECT SUM(T1.CommentCount) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie';",
  "SELECT T1.AnswerCount \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie' \nORDER BY T1.AnswerCount DESC \nLIMIT 1;",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.LastEditorUserId = T2.Id \nWHERE T1.Title = 'Examples for teaching: Correlation does not mean causation';",
  "SELECT COUNT(*)\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;",
  "SELECT T1.DisplayName \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nWHERE T2.ClosedDate IS NOT NULL;",
  "SELECT COUNT(*)\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.Age > 65 AND posts.Score >= 20;",
  "SELECT T2.Location \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = 'Eliciting priors from experts';",
  "SELECT T2.Body \nFROM tags AS T1 \nJOIN posts AS T2 \nON T1.ExcerptPostId = T2.Id \nWHERE T1.TagName = 'bayesian';",
  "SELECT T2.Body \nFROM tags AS T1 \nJOIN posts AS T2 \nON T1.ExcerptPostId = T2.Id \nORDER BY T1.`Count` DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.DisplayName = 'csgillespie';",
  "SELECT T1.Name \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie'",
  "SELECT COUNT(*)\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.DisplayName = 'csgillespie'\nAND STRFTIME('%Y', badges.Date) = '2011'",
  "SELECT T1.DisplayName \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nGROUP BY T2.UserId \nORDER BY COUNT(T2.Id) DESC \nLIMIT 1;",
  "SELECT AVG(T1.Score) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'csgillespie';",
  "SELECT CAST(COUNT(b.Id) AS REAL) / COUNT(DISTINCT u.DisplayName) AS average_badges\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Views > 200;",
  "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Score > 5;",
  "SELECT COUNT(*) \nFROM votes \nWHERE UserId = 58 \nAND CreationDate = '2010-07-19'",
  "SELECT CreationDate \nFROM votes \nGROUP BY CreationDate \nORDER BY COUNT(Id) DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM badges \nWHERE Name = 'Revival'",
  "SELECT T2.Title \nFROM comments AS T1 \nJOIN posts AS T2 \nON T1.PostId = T2.Id \nORDER BY T1.Score DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.ViewCount = 1910;",
  "SELECT T1.FavoriteCount\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T2.UserId = 3025\nAND T2.CreationDate = '2014-04-23 20:29:39.0'",
  "SELECT T1.Text \nFROM comments AS T1 \nJOIN posts AS T2 \nON T1.PostId = T2.Id \nWHERE T2.ParentId = 107829 \nAND T2.CommentCount = 1;",
  "SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS is_well_finished\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'",
  "SELECT T2.Reputation \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Id = 65041;",
  "SELECT COUNT(*)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE users.DisplayName = 'Tiago Pasqualini';",
  "SELECT users.DisplayName \nFROM votes \nJOIN users \nON votes.UserId = users.Id \nWHERE votes.Id = 6347;",
  "SELECT COUNT(*) \nFROM votes \nJOIN posts ON votes.PostId = posts.Id \nWHERE posts.Title LIKE '%data visualization%'",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
  "SELECT CAST(COUNT(p.Id) AS REAL) / COUNT(v.Id) \nFROM posts p \nJOIN votes v ON p.Id = v.PostId \nWHERE p.OwnerUserId = 24;",
  "SELECT ViewCount \nFROM posts \nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
  "SELECT Text \nFROM comments \nWHERE Score = 17;",
  "SELECT DisplayName \nFROM users \nWHERE WebsiteUrl = 'http://stackoverflow.com';",
  "SELECT badges.Name \nFROM users \nJOIN badges \nON users.Id = badges.UserId \nWHERE users.DisplayName = 'SilentGhost';",
  "SELECT UserDisplayName \nFROM comments \nWHERE Text = 'thank you user93!';",
  "SELECT T1.Text \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.DisplayName = 'A Lion'",
  "SELECT T2.DisplayName, T2.Reputation\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.Title = 'Understanding what Dassault iSight is doing?'",
  "SELECT comments.Text\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'How does gentle boosting differ from AdaBoost?'",
  "SELECT T2.DisplayName \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Name = 'Necromancer' \nLIMIT 10;",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.LastEditorUserId = T2.Id \nWHERE T2.DisplayName = 'Vebjorn Ljosa'",
  "SELECT SUM(T1.Score), T2.WebsiteUrl \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.LastEditorUserId = T2.Id \nWHERE T2.DisplayName = 'Yevgeny';",
  "SELECT comments.Text\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
  "SELECT SUM(T2.BountyAmount) \nFROM posts AS T1 \nJOIN votes AS T2 \nON T1.Id = T2.PostId \nWHERE T1.Title LIKE '%data%'",
  "SELECT T1.DisplayName\nFROM users AS T1\nJOIN votes AS T2 ON T1.Id = T2.UserId\nJOIN posts AS T3 ON T2.PostId = T3.Id\nWHERE T2.BountyAmount = 50 AND T3.Title LIKE '%variance%'",
  "SELECT AVG(T1.ViewCount), T1.Title, T2.Text \nFROM posts AS T1 \nJOIN postHistory AS T2 \nON T1.Id = T2.PostId \nWHERE T1.Tags = '<humor>'",
  "SELECT count(*) \nFROM comments \nWHERE UserId = 13;",
  "SELECT Id \nFROM users \nORDER BY Reputation DESC \nLIMIT 1;",
  "SELECT Id \nFROM users \nORDER BY Views ASC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM badges\nWHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011'",
  "SELECT COUNT(*)\nFROM (\n  SELECT UserId\n  FROM badges\n  GROUP BY UserId\n  HAVING COUNT(Name) > 5\n)",
  "SELECT COUNT(*) \nFROM (\n    SELECT T1.Id \n    FROM users AS T1 \n    JOIN badges AS T2 \n    ON T1.Id = T2.UserId \n    WHERE T1.Location = 'New York' \n    AND T2.Name IN ('Teacher', 'Supporter')\n    GROUP BY T1.Id \n    HAVING COUNT(DISTINCT T2.Name) = 2\n) AS SubQuery",
  "SELECT T2.DisplayName, T2.Reputation\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.Id = 1;",
  "SELECT T1.UserId \nFROM postHistory AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.Views >= 1000 \nGROUP BY T1.PostId, T1.UserId \nHAVING COUNT(T1.Id) = 1;",
  "SELECT T2.Name \nFROM comments AS T1 \nJOIN badges AS T2 \nON T1.UserId = T2.UserId \nGROUP BY T1.UserId \nORDER BY COUNT(T1.Id) DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE users.Location = 'India' AND badges.Name = 'Teacher'",
  "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) -\n       CAST(SUM(CASE WHEN STRFTIME('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_difference\nFROM badges\nWHERE Name = 'Student';",
  "SELECT PostHistoryTypeId, COUNT(DISTINCT UserId) \nFROM postHistory \nWHERE PostId = 3720;",
  "SELECT T1.RelatedPostId, T2.ViewCount\nFROM postLinks AS T1\nJOIN posts AS T2\nON T1.RelatedPostId = T2.Id\nWHERE T1.PostId = 61217;",
  "SELECT T1.Score, T2.LinkTypeId\nFROM posts AS T1\nJOIN postLinks AS T2\nON T1.Id = T2.PostId\nWHERE T2.PostId = 395;",
  "SELECT Id, OwnerUserId\nFROM posts\nWHERE Score > 60",
  "SELECT SUM(FavoriteCount) \nFROM posts \nWHERE OwnerUserId = 686 \nAND STRFTIME('%Y', CreaionDate) = '2011';",
  "SELECT CAST(SUM(T1.UpVotes) AS REAL) / COUNT(T1.Id), CAST(SUM(T1.Age) AS REAL) / COUNT(T1.Id)\nFROM users AS T1\nJOIN (\n    SELECT OwnerUserId\n    FROM posts\n    GROUP BY OwnerUserId\n    HAVING COUNT(Id) > 10\n) AS T2\nON T1.Id = T2.OwnerUserId;",
  "SELECT COUNT(UserId) \nFROM badges \nWHERE Name = \"Announcer\";",
  "SELECT Name \nFROM badges \nWHERE Date = '2010-07-19 19:39:08.0'",
  "SELECT count(*) \nFROM comments \nWHERE Score > 60;",
  "SELECT Text \nFROM comments \nWHERE CreationDate = '2010-07-19 19:25:47.0'",
  "SELECT count(*) \nFROM posts \nWHERE Score = 10;",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nORDER BY T1.Reputation DESC \nLIMIT 1;",
  "SELECT T1.Reputation \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T2.Date = '2010-07-19 19:39:08.0'",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = \"Pierre\";",
  "SELECT badges.Date\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.Location = 'Rochester, NY'",
  "SELECT CAST(SUM(CASE WHEN Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(UserId) \nFROM badges;",
  "SELECT CAST(SUM(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Name = \"Organizer\";",
  "SELECT Score \nFROM comments \nWHERE CreationDate = '2010-07-19 19:19:56.0'",
  "SELECT Text \nFROM comments \nWHERE CreationDate = '2010-07-19 19:37:33.0'",
  "SELECT DISTINCT T1.Age \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.Location = 'Vienna, Austria'",
  "SELECT COUNT(*)\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'Supporter'\nAND users.Age BETWEEN 19 AND 65;",
  "SELECT T1.Views \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T2.`Date` = '2010-07-19 19:39:08.0'",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nORDER BY T1.Reputation ASC \nLIMIT 1;",
  "SELECT T2.Name \nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = \"Sharpie\";",
  "SELECT COUNT(*)\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE badges.Name = 'Supporter' AND users.Age > 65;",
  "SELECT DisplayName \nFROM users \nWHERE Id = 30;",
  "SELECT count(*) \nFROM users \nWHERE Location = 'New York'",
  "SELECT COUNT(*) \nFROM votes \nWHERE STRFTIME('%Y', CreationDate) = '2010';",
  "SELECT count(*) \nFROM users \nWHERE Age BETWEEN 19 AND 65;",
  "SELECT DisplayName \nFROM users \nWHERE Views = (SELECT MAX(Views) FROM users);",
  "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) \nFROM votes;",
  "SELECT DISTINCT T2.Tags \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nWHERE T1.DisplayName = 'John Salvatier';",
  "SELECT COUNT(*)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE users.DisplayName = 'Daniel Vassallo';",
  "SELECT COUNT(*) \nFROM votes \nJOIN users ON votes.UserId = users.Id \nWHERE users.DisplayName = 'Harlan';",
  "SELECT T1.Id \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'slashnick' \nORDER BY T1.AnswerCount DESC \nLIMIT 1;",
  "SELECT T2.DisplayName \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Harvey Motulsky' OR T2.DisplayName = 'Noah Snyder' \nGROUP BY T2.DisplayName \nORDER BY SUM(T1.ViewCount) DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nJOIN votes v ON p.Id = v.PostId\nWHERE u.DisplayName = 'Matt Parker' AND v.PostId > 4;",
  "SELECT COUNT(*)\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE comments.Score < 60\nAND users.DisplayName = 'Neil McGuigan';",
  "SELECT DISTINCT T1.Tags \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Mark Meckes' \nAND T1.CommentCount = 0;",
  "SELECT users.DisplayName \nFROM users \nJOIN badges \nON users.Id = badges.UserId \nWHERE badges.Name = 'Organizer';",
  "SELECT CAST(SUM(CASE WHEN p.Tags LIKE '%<r>%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts p \nJOIN users u ON p.OwnerUserId = u.Id \nWHERE u.DisplayName = 'Community';",
  "SELECT \n  SUM(CASE WHEN T2.DisplayName = 'Mornington' THEN T1.ViewCount ELSE 0 END) -\n  SUM(CASE WHEN T2.DisplayName = 'Amos' THEN T1.ViewCount ELSE 0 END) AS view_count_difference\nFROM \n  posts AS T1\nJOIN \n  users AS T2\nON \n  T1.OwnerUserId = T2.Id;",
  "SELECT COUNT(*) \nFROM badges \nWHERE Name = 'Commentator' \nAND STRFTIME('%Y', Date) = '2014';",
  "SELECT count(*) \nFROM posts \nWHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';",
  "SELECT DisplayName, Age \nFROM users \nORDER BY Views DESC \nLIMIT 1;",
  "SELECT LastEditDate, LastEditorUserId\nFROM posts\nWHERE Title = 'Detecting a given face in a database of facial images'",
  "SELECT count(*) \nFROM comments \nWHERE UserId = 13 \nAND Score < 60;",
  "SELECT T1.Title, T2.UserDisplayName\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T2.Score > 60;",
  "SELECT T1.Name \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.Location = 'North Pole' \nAND STRFTIME('%Y', T1.Date) = '2011'",
  "SELECT T1.OwnerDisplayName, T2.WebsiteUrl\nFROM posts AS T1\nJOIN users AS T2\nON T1.OwnerUserId = T2.Id\nWHERE T1.FavoriteCount > 150;",
  "SELECT COUNT(postHistory.Id), posts.LastEditDate\nFROM posts\nJOIN postHistory ON posts.Id = postHistory.PostId\nWHERE posts.Title = \"What is the best introductory Bayesian statistics textbook?\"",
  "SELECT users.LastAccessDate, users.Location\nFROM users\nJOIN badges ON users.Id = badges.UserId\nWHERE badges.Name = 'outliers'",
  "SELECT T3.Title \nFROM posts AS T1 \nJOIN postLinks AS T2 \nON T1.Id = T2.PostId \nJOIN posts AS T3 \nON T2.RelatedPostId = T3.Id \nWHERE T1.Title = \"How to tell if something happened in a data set which monitors a value over time\";",
  "SELECT T1.PostId, T3.Name \nFROM postHistory AS T1 \nJOIN badges AS T3 \nON T1.UserId = T3.UserId \nWHERE T1.UserDisplayName = 'Samuel' \nAND STRFTIME('%Y', T1.CreationDate) = '2013' \nAND STRFTIME('%Y', T3.`Date`) = '2013';",
  "SELECT OwnerDisplayName \nFROM posts \nORDER BY ViewCount DESC \nLIMIT 1;",
  "SELECT users.DisplayName, users.Location\nFROM tags\nJOIN posts ON tags.ExcerptPostId = posts.Id\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE tags.TagName = 'hypothesis-testing'",
  "SELECT T1.Title, T2.LinkTypeId\nFROM posts AS T1\nJOIN postLinks AS T2\nON T1.Id = T2.PostId\nWHERE T1.Title = 'What are principal component scores?'",
  "SELECT OwnerDisplayName \nFROM posts \nWHERE ParentId IS NOT NULL \nORDER BY Score DESC \nLIMIT 1;",
  "SELECT T1.DisplayName, T1.WebsiteUrl\nFROM users AS T1\nJOIN votes AS T2\nON T1.Id = T2.UserId\nWHERE T2.VoteTypeId = 8\nORDER BY T2.BountyAmount DESC\nLIMIT 1;",
  "SELECT Title \nFROM posts \nORDER BY ViewCount DESC \nLIMIT 5;",
  "SELECT COUNT(*) \nFROM tags \nWHERE `Count` BETWEEN 5000 AND 7000;",
  "SELECT OwnerUserId \nFROM posts \nORDER BY FavoriteCount DESC \nLIMIT 1;",
  "SELECT Age \nFROM users \nORDER BY Reputation DESC \nLIMIT 1;",
  "SELECT COUNT(*) \nFROM votes \nWHERE STRFTIME('%Y', CreationDate) = '2011' \nAND BountyAmount = 50;",
  "SELECT Id \nFROM users \nORDER BY Age ASC \nLIMIT 1;",
  "SELECT SUM(Score) \nFROM posts \nWHERE LasActivityDate LIKE '2010-07-19%';",
  "SELECT CAST(COUNT(*) AS REAL) / 12 \nFROM postLinks AS T1 \nJOIN posts AS T2 \nON T1.PostId = T2.Id \nWHERE strftime('%Y', T1.CreationDate) = '2010' \nAND T2.AnswerCount <= 2;",
  "SELECT posts.Id \nFROM posts \nJOIN votes ON posts.Id = votes.PostId \nWHERE votes.UserId = 1465 \nORDER BY posts.FavoriteCount DESC \nLIMIT 1;",
  "SELECT T1.Title \nFROM posts AS T1 \nJOIN postLinks AS T2 \nON T1.Id = T2.PostId \nORDER BY T2.CreationDate ASC \nLIMIT 1;",
  "SELECT T2.DisplayName\nFROM badges AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nGROUP BY T2.DisplayName\nORDER BY COUNT(T1.Name) DESC\nLIMIT 1;",
  "SELECT MIN(v.CreationDate) \nFROM votes v \nJOIN users u \nON v.UserId = u.Id \nWHERE u.DisplayName = 'chl';",
  "SELECT T2.CreaionDate \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nORDER BY T1.Age ASC \nLIMIT 1;",
  "SELECT T2.DisplayName \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Name = 'Autobiographer' \nORDER BY T1.Date \nLIMIT 1;",
  "SELECT COUNT(DISTINCT T1.Id) \nFROM users AS T1 \nJOIN posts AS T2 \nON T1.Id = T2.OwnerUserId \nWHERE T1.Location = 'United Kingdom' \nAND T2.FavoriteCount >= 4;",
  "SELECT AVG(T1.PostId) \nFROM votes AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.Age = (SELECT MAX(Age) FROM users);",
  "SELECT DisplayName \nFROM users \nORDER BY Reputation DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM users \nWHERE Reputation > 2000 AND Views > 1000;",
  "SELECT DisplayName \nFROM users \nWHERE Age BETWEEN 19 AND 65;",
  "SELECT COUNT(*)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE users.DisplayName = 'Jay Stevens'\nAND STRFTIME('%Y', posts.CreaionDate) = '2010';",
  "SELECT T1.Id, T1.Title \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Harvey Motulsky' \nORDER BY T1.ViewCount DESC \nLIMIT 1;",
  "SELECT Id, Title \nFROM posts \nORDER BY Score DESC \nLIMIT 1;",
  "SELECT AVG(T1.Score) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.DisplayName = 'Stephen Turner';",
  "SELECT DISTINCT T1.OwnerDisplayName\nFROM posts AS T1\nWHERE T1.ViewCount > 20000\nAND STRFTIME('%Y', T1.CreaionDate) = '2011'",
  "SELECT Id, OwnerDisplayName \nFROM posts \nWHERE STRFTIME('%Y', CreaionDate) = '2010' \nORDER BY FavoriteCount DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE STRFTIME('%Y', p.CreaionDate) = '2011';",
  "SELECT CAST(SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM users;",
  "SELECT T1.ViewCount, T2.UserDisplayName\nFROM posts AS T1\nJOIN postHistory AS T2\nON T1.Id = T2.PostId\nWHERE T2.Text = 'Computer Game Datasets'",
  "SELECT COUNT(*)\nFROM posts\nWHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)",
  "SELECT COUNT(*)\nFROM comments\nWHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)",
  "SELECT count(*) \nFROM posts \nWHERE ViewCount > 35000 \nAND CommentCount = 0;",
  "SELECT T2.DisplayName, T2.Location\nFROM posts AS T1\nJOIN users AS T2\nON T1.LastEditorUserId = T2.Id\nWHERE T1.Id = 183;",
  "SELECT T1.Name \nFROM badges AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.DisplayName = 'Emmett' \nORDER BY T1.`Date` DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM users \nWHERE Age BETWEEN 19 AND 65 \nAND UpVotes > 5000;",
  "SELECT JULIANDAY(T2.`Date`) - JULIANDAY(T1.CreationDate) AS Days\nFROM users AS T1 \nJOIN badges AS T2 \nON T1.Id = T2.UserId \nWHERE T1.DisplayName = 'Zolomon';",
  "SELECT COUNT(posts.Id) AS PostCount, COUNT(comments.Id) AS CommentCount\nFROM users\nLEFT JOIN posts ON users.Id = posts.OwnerUserId\nLEFT JOIN comments ON users.Id = comments.UserId\nWHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users);",
  "SELECT comments.Text, comments.UserDisplayName\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nWHERE posts.Title = 'Analysing wind data with R'\nORDER BY comments.CreationDate DESC\nLIMIT 10;",
  "SELECT COUNT(UserId) \nFROM badges \nWHERE Name = 'Citizen Patrol';",
  "SELECT COUNT(*)\nFROM posts\nJOIN tags ON posts.Tags LIKE '%' || tags.TagName || '%'\nWHERE tags.TagName = 'careers';",
  "SELECT Reputation, Views \nFROM users \nWHERE DisplayName = 'Jarrod Dixon'",
  "SELECT COUNT(*)\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nWHERE posts.Title = 'Clustering 1D data';",
  "SELECT CreationDate \nFROM users \nWHERE DisplayName = 'IrishStat';",
  "SELECT COUNT(*) \nFROM votes \nWHERE BountyAmount >= 30;",
  "SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM posts AS T1 \nJOIN users AS T2 \nON T1.OwnerUserId = T2.Id \nWHERE T2.Reputation = (SELECT MAX(Reputation) FROM users);",
  "SELECT count(*) \nFROM posts \nWHERE score < 20;",
  "SELECT count(*) \nFROM tags \nWHERE Id < 15 \nAND `Count` <= 20;",
  "SELECT ExcerptPostId, WikiPostId \nFROM tags \nWHERE TagName = 'sample';",
  "SELECT users.Reputation, users.UpVotes\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE comments.Text = 'fine, you win :)';",
  "SELECT comments.Text \nFROM comments \nJOIN posts ON comments.PostId = posts.Id \nWHERE posts.Title LIKE '%linear regression%'",
  "SELECT T2.Text\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T1.ViewCount BETWEEN 100 AND 150\nORDER BY T2.Score DESC\nLIMIT 1;",
  "SELECT users.CreationDate, users.Age\nFROM users\nJOIN comments ON users.Id = comments.UserId\nWHERE users.WebsiteUrl LIKE '%http://%'",
  "SELECT COUNT(*)\nFROM comments\nJOIN posts ON comments.PostId = posts.Id\nWHERE comments.Score = 0 AND posts.ViewCount < 5;",
  "SELECT COUNT(*)\nFROM posts AS T1\nJOIN comments AS T2\nON T1.Id = T2.PostId\nWHERE T1.CommentCount = 1\nAND T2.Score = 0;",
  "SELECT COUNT(*)\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE comments.Score = 0 AND users.Age = 40;",
  "SELECT posts.Id, comments.Text\nFROM posts\nJOIN comments ON posts.Id = comments.PostId\nWHERE posts.Title = 'Group differences on a five point Likert item'",
  "SELECT T2.UpVotes \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Text = \"R is also lazy evaluated.\";",
  "SELECT T1.Text \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T2.DisplayName = 'Harvey Motulsky'",
  "SELECT T2.DisplayName \nFROM comments AS T1 \nJOIN users AS T2 \nON T1.UserId = T2.Id \nWHERE T1.Score BETWEEN 1 AND 5 \nAND T2.DownVotes = 0;",
  "SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM comments AS T1\nJOIN users AS T2\nON T1.UserId = T2.Id\nWHERE T1.Score BETWEEN 5 AND 10;",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 \nON T1.power_id = T2.id \nJOIN superhero AS T3 \nON T1.hero_id = T3.id \nWHERE T3.superhero_name = '3-D Man';",
  "SELECT COUNT(*)\nFROM hero_power\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength';",
  "SELECT COUNT(*)\nFROM hero_power\nJOIN superpower ON hero_power.power_id = superpower.id\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
  "SELECT superhero.full_name \nFROM superhero \nJOIN hero_power \nON superhero.id = hero_power.hero_id \nGROUP BY superhero.full_name \nHAVING COUNT(hero_power.power_id) > 15;",
  "SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE colour.colour = 'Blue';",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.skin_colour_id = T2.id \nWHERE T1.superhero_name = 'Apocalypse';",
  "SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id \nJOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id \nWHERE eye_colour.colour = 'Blue' \nAND hair_colour.colour = 'Blond';",
  "SELECT COUNT(*)\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Marvel Comics';",
  "SELECT superhero_name \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher_name = 'Marvel Comics' \nORDER BY height_cm DESC;",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id = T2.id \nWHERE T1.superhero_name = 'Sauron';",
  "SELECT T2.colour\nFROM superhero AS T1\nJOIN colour AS T2 ON T1.eye_colour_id = T2.id\nJOIN publisher AS T3 ON T1.publisher_id = T3.id\nWHERE T3.publisher_name = 'Marvel Comics'\nGROUP BY T2.colour\nORDER BY COUNT(T1.id) DESC;",
  "SELECT AVG(height_cm) \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher.publisher_name = 'Marvel Comics';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE publisher.publisher_name = 'Marvel Comics' \nAND superpower.power_name = 'Super Strength';",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN publisher AS T2\nON T1.publisher_id = T2.id\nWHERE T2.publisher_name = 'DC Comics';",
  "SELECT T4.publisher_name \nFROM hero_attribute AS T1 \nJOIN attribute AS T2 \nON T1.attribute_id = T2.id \nJOIN superhero AS T3 \nON T1.hero_id = T3.id \nJOIN publisher AS T4 \nON T3.publisher_id = T4.id \nWHERE T2.attribute_name = 'Speed' \nORDER BY T1.attribute_value ASC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics'",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id = T2.id \nWHERE T1.superhero_name = 'Blue Beetle II';",
  "SELECT COUNT(*) \nFROM superhero \nJOIN colour \nON superhero.hair_colour_id = colour.id \nWHERE colour.colour = 'Blond';",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 ON T1.id = T2.hero_id \nJOIN attribute AS T3 ON T2.attribute_id = T3.id \nWHERE T3.attribute_name = 'Intelligence' \nORDER BY T2.attribute_value ASC \nLIMIT 1;",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.superhero_name = 'Copycat';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nWHERE attribute.attribute_name = 'Durability' \nAND hero_attribute.attribute_value < 50;",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power_name = 'Death Touch';",
  "SELECT COUNT(*)\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE gender.gender = 'Female'\nAND attribute.attribute_name = 'Strength'\nAND hero_attribute.attribute_value = 100;",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nGROUP BY T1.superhero_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE race.race = 'Vampire'",
  "SELECT CAST(SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), \n       SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS bad_count\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics';",
  "SELECT \n  SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference\nFROM \n  superhero AS T1\nJOIN \n  publisher AS T2 \nON \n  T1.publisher_id = T2.id;",
  "SELECT id \nFROM publisher \nWHERE publisher_name = 'Star Trek';",
  "SELECT AVG(attribute_value) FROM hero_attribute",
  "SELECT count(*) \nFROM superhero \nWHERE full_name IS NULL;",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nWHERE T1.id = 75;",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 ON T1.power_id = T2.id \nJOIN superhero AS T3 ON T1.hero_id = T3.id \nWHERE T3.superhero_name = 'Deathlok';",
  "SELECT AVG(T1.weight_kg) \nFROM superhero AS T1 \nJOIN gender AS T2 \nON T1.gender_id = T2.id \nWHERE T2.gender = 'Female';",
  "SELECT T1.power_name \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nJOIN superhero AS T3 \nON T2.hero_id = T3.id \nJOIN gender AS T4 \nON T3.gender_id = T4.id \nWHERE T4.gender = 'Male' \nLIMIT 5;",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE race.race = 'Alien';",
  "SELECT superhero_name \nFROM superhero \nJOIN colour ON superhero.eye_colour_id = colour.id \nWHERE height_cm BETWEEN 170 AND 190 \nAND colour.colour = 'No Colour';",
  "SELECT T1.power_name \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nWHERE T2.hero_id = 56;",
  "SELECT superhero.full_name \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE race.race = 'Demi-God' \nLIMIT 5;",
  "SELECT COUNT(*)\nFROM superhero AS T1\nJOIN alignment AS T2\nON T1.alignment_id = T2.id\nWHERE T2.alignment = 'Bad'",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.weight_kg = 169;",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.hair_colour_id = T2.id \nJOIN race AS T3 ON T1.race_id = T3.id \nWHERE T1.height_cm = 185 \nAND T3.race = 'Human';",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nORDER BY T1.weight_kg DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id = T2.id \nWHERE T1.height_cm BETWEEN 150 AND 180;",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN gender AS T2 \nON T1.gender_id = T2.id \nWHERE T2.gender = 'Male' \nAND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);",
  "SELECT T1.power_name \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nGROUP BY T1.power_name \nORDER BY COUNT(T1.power_name) DESC \nLIMIT 1;",
  "SELECT T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nWHERE T1.superhero_name = 'Abomination';",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 \nON T1.power_id = T2.id \nWHERE T1.hero_id = 1;",
  "SELECT COUNT(*)\nFROM superpower\nJOIN hero_power ON superpower.id = hero_power.power_id\nWHERE superpower.power_name = 'Stealth';",
  "SELECT T1.full_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T2.attribute_id = T3.id \nWHERE T3.attribute_name = 'Strength' \nORDER BY T2.attribute_value DESC \nLIMIT 1;",
  "SELECT CAST(COUNT(id) AS REAL) / SUM(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) \nFROM superhero;",
  "SELECT COUNT(*)\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Dark Horse Comics';",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T2.attribute_id = T3.id \nJOIN publisher AS T4 \nON T1.publisher_id = T4.id \nWHERE T3.attribute_name = 'Durability' \nAND T4.publisher_name = 'Dark Horse Comics' \nORDER BY T2.attribute_value DESC \nLIMIT 1;",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nWHERE T1.full_name = 'Abraham Sapien';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power_name = 'Flight';",
  "SELECT \n  superhero.eye_colour_id, \n  superhero.hair_colour_id, \n  superhero.skin_colour_id \nFROM \n  superhero \nJOIN \n  gender ON superhero.gender_id = gender.id \nJOIN \n  publisher ON superhero.publisher_id = publisher.id \nWHERE \n  gender.gender = 'Female' \nAND \n  publisher.publisher_name = 'Dark Horse Comics';",
  "SELECT superhero.superhero_name, publisher.publisher_name \nFROM superhero \nJOIN publisher \nON superhero.publisher_id = publisher.id \nWHERE superhero.eye_colour_id = superhero.hair_colour_id \nAND superhero.hair_colour_id = superhero.skin_colour_id;",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.superhero_name = 'A-Bomb';",
  "SELECT CAST(SUM(IIF(T2.colour = 'Blue', 1, 0)) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.skin_colour_id = T2.id \nJOIN gender AS T3 ON T1.gender_id = T3.id \nWHERE T3.gender = 'Female';",
  "SELECT superhero.superhero_name, race.race \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE superhero.full_name = 'Charles Chandler';",
  "SELECT T2.gender \nFROM superhero AS T1 \nJOIN gender AS T2 \nON T1.gender_id = T2.id \nWHERE T1.superhero_name = 'Agent 13';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power_name = 'Adaptation'",
  "SELECT COUNT(*) \nFROM superhero \nJOIN hero_power \nON superhero.id = hero_power.hero_id \nWHERE superhero.superhero_name = 'Amazo';",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.full_name = 'Hunter Zolomon';",
  "SELECT superhero.height_cm \nFROM superhero \nJOIN colour \nON superhero.eye_colour_id = colour.id \nWHERE colour.colour = 'Amber';",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN colour AS eye_color ON superhero.eye_colour_id = eye_color.id \nJOIN colour AS hair_color ON superhero.hair_colour_id = hair_color.id \nWHERE eye_color.colour = 'Black' \nAND hair_color.colour = 'Black';",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nJOIN colour AS T3 \nON T1.skin_colour_id = T3.id \nWHERE T3.colour = 'Gold';",
  "SELECT superhero.full_name \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE race.race = 'Vampire'",
  "SELECT superhero.superhero_name \nFROM superhero \nJOIN alignment \nON superhero.alignment_id = alignment.id \nWHERE alignment.alignment = 'Neutral'",
  "SELECT COUNT(*)\nFROM hero_attribute ha\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Strength' AND ha.attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute ha2\n    JOIN attribute a2 ON ha2.attribute_id = a2.id\n    WHERE a2.attribute_name = 'Strength'\n);",
  "SELECT race.race, alignment.alignment\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE superhero.superhero_name = 'Cameron Hicks';",
  "SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN gender AS T2 ON T1.gender_id = T2.id \nJOIN publisher AS T3 ON T1.publisher_id = T3.id \nWHERE T3.publisher_name = 'Marvel Comics';",
  "SELECT AVG(T1.weight_kg) \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T2.race = 'Alien';",
  "SELECT \n  SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - \n  SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) \n  AS weight_difference\nFROM \n  superhero;",
  "SELECT AVG(height_cm) FROM superhero;",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.superhero_name = 'Abomination';",
  "SELECT COUNT(*) \nFROM superhero \nWHERE race_id = 21 AND gender_id = 1;",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T2.attribute_id = T3.id \nWHERE T3.attribute_name = 'Speed' \nORDER BY T2.attribute_value DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM superhero \nWHERE alignment_id = 3;",
  "SELECT T3.attribute_name, T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T2.attribute_id = T3.id \nWHERE T1.superhero_name = '3-D Man'",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nJOIN colour AS T3 \nON T1.hair_colour_id = T3.id \nWHERE T2.colour = 'Blue' \nAND T3.colour = 'Brown';",
  "SELECT T2.publisher_name \nFROM superhero AS T1 \nJOIN publisher AS T2 \nON T1.publisher_id = T2.id \nWHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
  "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = 1;",
  "SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id;",
  "SELECT CAST(SUM(CASE WHEN T2.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS ratio\nFROM superhero AS T1\nJOIN gender AS T2\nON T1.gender_id = T2.id;",
  "SELECT superhero_name \nFROM superhero \nORDER BY height_cm DESC \nLIMIT 1;",
  "SELECT id \nFROM superpower \nWHERE power_name = 'Cryokinesis';",
  "SELECT superhero_name \nFROM superhero \nWHERE id = 294;",
  "SELECT full_name \nFROM superhero \nWHERE weight_kg = 0 OR weight_kg IS NULL;",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nWHERE T1.full_name = 'Karen Beecher-Duncan';",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.full_name = 'Helen Parr';",
  "SELECT T2.race \nFROM superhero AS T1 \nJOIN race AS T2 \nON T1.race_id = T2.id \nWHERE T1.weight_kg = 108 AND T1.height_cm = 188;",
  "SELECT publisher.publisher_name \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE superhero.id = 38;",
  "SELECT T3.race \nFROM hero_attribute AS T1 \nJOIN superhero AS T2 \nON T1.hero_id = T2.id \nJOIN race AS T3 \nON T2.race_id = T3.id \nORDER BY T1.attribute_value DESC \nLIMIT 1;",
  "SELECT T2.alignment, T4.power_name \nFROM superhero AS T1 \nJOIN alignment AS T2 ON T1.alignment_id = T2.id \nJOIN hero_power AS T3 ON T1.id = T3.hero_id \nJOIN superpower AS T4 ON T3.power_id = T4.id \nWHERE T1.superhero_name = 'Atom IV';",
  "SELECT superhero.full_name \nFROM superhero \nJOIN colour \nON superhero.eye_colour_id = colour.id \nWHERE colour.colour = 'Blue' \nLIMIT 5;",
  "SELECT AVG(T1.attribute_value) \nFROM hero_attribute AS T1 \nJOIN superhero AS T2 \nON T1.hero_id = T2.id \nWHERE T2.alignment_id = 3;",
  "SELECT T1.colour \nFROM colour AS T1 \nJOIN superhero AS T2 \nON T1.id = T2.skin_colour_id \nJOIN hero_attribute AS T3 \nON T2.id = T3.hero_id \nWHERE T3.attribute_value = 100;",
  "SELECT COUNT(*)\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nJOIN gender ON superhero.gender_id = gender.id\nWHERE alignment.id = 1 AND gender.id = 2;",
  "SELECT superhero_name \nFROM superhero \nJOIN hero_attribute \nON superhero.id = hero_attribute.hero_id \nWHERE attribute_value BETWEEN 75 AND 80;",
  "SELECT T4.race \nFROM superhero AS T1 \nJOIN colour AS T2 ON T1.hair_colour_id = T2.id \nJOIN gender AS T3 ON T1.gender_id = T3.id \nJOIN race AS T4 ON T1.race_id = T4.id \nWHERE T2.colour = 'Blue' AND T3.gender = 'Male';",
  "SELECT CAST(SUM(CASE WHEN T2.id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN gender AS T2 \nON T1.gender_id = T2.id \nWHERE T1.alignment_id = 2;",
  "SELECT \n  SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference\nFROM \n  superhero AS T1\nJOIN \n  colour AS T2\nON \n  T1.eye_colour_id = T2.id\nWHERE \n  T1.weight_kg = 0 OR T1.weight_kg IS NULL;",
  "SELECT T3.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T3 ON T1.id = T3.hero_id \nJOIN attribute AS T2 ON T3.attribute_id = T2.id \nWHERE T1.superhero_name = 'Hulk' AND T2.attribute_name = 'Strength';",
  "SELECT T2.power_name \nFROM hero_power AS T1 \nJOIN superpower AS T2 ON T1.power_id = T2.id \nJOIN superhero AS T3 ON T1.hero_id = T3.id \nWHERE T3.superhero_name = 'Ajax';",
  "SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.skin_colour_id = colour.id\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE colour.colour = 'Green'\nAND alignment.alignment = 'Bad';",
  "SELECT COUNT(*)\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';",
  "SELECT T1.superhero_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 ON T1.id = T2.hero_id \nJOIN superpower AS T3 ON T2.power_id = T3.id \nWHERE T3.power_name = 'Wind Control' \nORDER BY T1.superhero_name;",
  "SELECT T4.gender \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nJOIN superhero AS T3 \nON T2.hero_id = T3.id \nJOIN gender AS T4 \nON T3.gender_id = T4.id \nWHERE T1.power_name = 'Phoenix Force';",
  "SELECT superhero_name \nFROM superhero \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE publisher_name = 'DC Comics' \nORDER BY weight_kg DESC \nLIMIT 1;",
  "SELECT AVG(height_cm) \nFROM superhero \nJOIN race ON superhero.race_id = race.id \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE race.race <> 'Human' \nAND publisher.publisher_name = 'Dark Horse Comics';",
  "SELECT COUNT(*)\nFROM hero_attribute AS T1\nJOIN attribute AS T2 ON T1.attribute_id = T2.id\nWHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100;",
  "SELECT SUM(IIF(T2.publisher_name = 'DC Comics', 1, 0)) - SUM(IIF(T2.publisher_name = 'Marvel Comics', 1, 0)) AS difference\nFROM superhero AS T1\nJOIN publisher AS T2\nON T1.publisher_id = T2.id;",
  "SELECT T3.attribute_name \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nJOIN attribute AS T3 \nON T3.id = T2.attribute_id \nWHERE T1.superhero_name = 'Black Panther' \nORDER BY T2.attribute_value ASC \nLIMIT 1;",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nWHERE T1.superhero_name = 'Abomination';",
  "SELECT superhero_name \nFROM superhero \nORDER BY height_cm DESC \nLIMIT 1;",
  "SELECT superhero_name \nFROM superhero \nWHERE full_name = 'Charles Chandler';",
  "SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN gender AS T2 ON T1.gender_id = T2.id \nJOIN publisher AS T3 ON T1.publisher_id = T3.id \nWHERE T3.publisher_name = 'George Lucas';",
  "SELECT CAST(SUM(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM superhero AS T1 \nJOIN alignment AS T2 ON T1.alignment_id = T2.id \nJOIN publisher AS T3 ON T1.publisher_id = T3.id \nWHERE T3.publisher_name = 'Marvel Comics';",
  "SELECT count(*) \nFROM superhero \nWHERE full_name LIKE 'John%';",
  "SELECT hero_id \nFROM hero_attribute \nORDER BY attribute_value ASC \nLIMIT 1;",
  "SELECT full_name \nFROM superhero \nWHERE superhero_name = 'Alien';",
  "SELECT superhero.full_name \nFROM superhero \nJOIN colour ON superhero.eye_colour_id = colour.id \nWHERE superhero.weight_kg < 100 \nAND colour.colour = 'Brown';",
  "SELECT T2.attribute_value \nFROM superhero AS T1 \nJOIN hero_attribute AS T2 \nON T1.id = T2.hero_id \nWHERE T1.superhero_name = 'Aquababy';",
  "SELECT superhero.weight_kg, race.race \nFROM superhero \nJOIN race \nON superhero.race_id = race.id \nWHERE superhero.id = 40;",
  "SELECT AVG(height_cm) \nFROM superhero \nJOIN alignment \nON superhero.alignment_id = alignment.id \nWHERE alignment.alignment = 'Neutral';",
  "SELECT T2.hero_id \nFROM superpower AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.power_id \nWHERE T1.power_name = 'Intelligence';",
  "SELECT T2.colour \nFROM superhero AS T1 \nJOIN colour AS T2 \nON T1.eye_colour_id = T2.id \nWHERE T1.superhero_name = 'Blackwulf';",
  "SELECT T3.power_name \nFROM superhero AS T1 \nJOIN hero_power AS T2 \nON T1.id = T2.hero_id \nJOIN superpower AS T3 \nON T2.power_id = T3.id \nWHERE T1.height_cm > (SELECT AVG(height_cm) FROM superhero) * 0.8;",
  "SELECT T2.driverRef \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 20 \nORDER BY T1.q1 DESC \nLIMIT 5;",
  "SELECT T2.surname \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverid = T2.driverid \nWHERE T1.raceid = 19 \nORDER BY T1.q2 \nLIMIT 1;",
  "SELECT races.year \nFROM circuits \nJOIN races \nON circuits.circuitId = races.circuitId \nWHERE circuits.location = 'Shanghai';",
  "SELECT races.url \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.name = \"Circuit de Barcelona-Catalunya\";",
  "SELECT races.name \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.country = 'Germany';",
  "SELECT T2.position \nFROM constructors AS T1 \nJOIN constructorstandings AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T1.name = \"Renault\";",
  "SELECT COUNT(*)\nFROM races\nJOIN circuits ON races.circuitid = circuits.circuitid\nWHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');",
  "SELECT races.name \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.country = 'Spain';",
  "SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitid = races.circuitid\nWHERE races.name = 'Australian Grand Prix';",
  "SELECT races.url \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.name = 'Sepang International Circuit';",
  "SELECT T1.time \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.name = 'Sepang International Circuit';",
  "SELECT circuits.lat, circuits.lng \nFROM circuits \nJOIN races \nON circuits.circuitid = races.circuitid \nWHERE races.name = 'Abu Dhabi Grand Prix';",
  "SELECT T1.nationality \nFROM constructors AS T1 \nJOIN constructorResults AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T2.raceId = 24 AND T2.points = 1;",
  "SELECT q1 \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 354 \nAND T2.forename = \"Bruno\" \nAND T2.surname = \"Senna\";",
  "SELECT DISTINCT T1.nationality\nFROM drivers AS T1\nJOIN qualifying AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 355 AND T2.q2 = '0:01:40';",
  "SELECT number \nFROM qualifying \nWHERE raceId = 903 AND q3 = '0:01:54';",
  "SELECT COUNT(*) \nFROM races \nJOIN results \nON races.raceId = results.raceId \nWHERE races.name = 'Bahrain Grand Prix' \nAND races.year = 2007 \nAND results.time IS NULL;",
  "SELECT seasons.url \nFROM races \nJOIN seasons \nON races.year = seasons.year \nWHERE races.raceId = 901;",
  "SELECT COUNT(*)\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.date = '2015-11-29' AND results.time IS NOT NULL;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 592 AND T2.time IS NOT NULL\nORDER BY T1.dob ASC\nLIMIT 1;",
  "SELECT DISTINCT T1.url \nFROM drivers AS T1 \nJOIN lapTimes AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.time = '0:01:27' \nAND T2.raceId = 161;",
  "SELECT T1.nationality \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.raceId = 933 \nORDER BY T2.fastestLapSpeed DESC \nLIMIT 1;",
  "SELECT circuits.lat, circuits.lng \nFROM circuits \nJOIN races \nON circuits.circuitId = races.circuitId \nWHERE races.name = 'Malaysian Grand Prix';",
  "SELECT constructors.url \nFROM constructors \nJOIN constructorResults \nON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.raceId = 9 \nORDER BY constructorResults.points DESC \nLIMIT 1;",
  "SELECT q1 \nFROM qualifying AS q\nJOIN drivers AS d\nON q.driverId = d.driverId\nWHERE d.forename = \"Lucas\" \nAND d.surname = \"di Grassi\" \nAND q.raceId = 345;",
  "SELECT T1.nationality \nFROM drivers AS T1 \nJOIN qualifying AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.raceId = 347 \nAND T2.q2 = '0:01:15';",
  "SELECT T2.code \nFROM qualifying AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.raceId = 45 \nAND T1.q3 = '0:01:33';",
  "SELECT results.time \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nWHERE drivers.forename = \"Bruce\" \nAND drivers.surname = \"McLaren\" \nAND results.raceId = 743;",
  "SELECT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T3.name = \"San Marino Grand Prix\" \nAND T3.year = 2006 \nAND T2.position = 2;",
  "SELECT seasons.url \nFROM races \nJOIN seasons ON races.year = seasons.year \nWHERE races.raceId = 901;",
  "SELECT COUNT(*)\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nWHERE r.date = '2015-11-29' AND res.`time` IS NULL;",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 872 AND r.time IS NOT NULL\nORDER BY d.dob DESC\nLIMIT 1;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN lapTimes AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 348\nORDER BY T2.time\nLIMIT 1;",
  "SELECT T1.nationality \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nORDER BY T2.fastestLapSpeed DESC \nLIMIT 1;",
  "SELECT CAST((T2.fastestlapspeed - (SELECT fastestlapspeed FROM results WHERE raceId = 854 AND driverId = T1.driverId)) AS REAL) * 100 / T2.fastestlapspeed AS percentage\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverid = T2.driverid\nWHERE T1.forename = 'Paul' AND T1.surname = 'di Resta' AND T2.raceId = 853;",
  "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.date = '1983-07-16';",
  "SELECT `year`\nFROM races\nWHERE name = \"Singapore Grand Prix\"\nORDER BY `year` ASC\nLIMIT 1;",
  "SELECT name \nFROM races \nWHERE year = 2005 \nORDER BY name DESC;",
  "SELECT name \nFROM races \nWHERE STRFTIME('%Y-%m', `date`) = (\n    SELECT STRFTIME('%Y-%m', `date`) \n    FROM races \n    ORDER BY `date` \n    LIMIT 1\n)",
  "SELECT name, date\nFROM races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1;",
  "SELECT `year`\nFROM races\nGROUP BY `year`\nORDER BY MAX(round) DESC\nLIMIT 1;",
  "SELECT name \nFROM races \nWHERE YEAR = 2017 \nAND name NOT IN (SELECT name FROM races WHERE YEAR = 2000);",
  "SELECT \n  circuits.country, \n  circuits.name, \n  circuits.location \nFROM \n  circuits \nJOIN \n  races \nON \n  circuits.circuitid = races.circuitid \nWHERE \n  races.name = \"European Grand Prix\" \nORDER BY \n  races.year \nLIMIT \n  1;",
  "SELECT r.year \nFROM races r \nJOIN circuits c ON r.circuitid = c.circuitid \nWHERE r.name = 'British Grand Prix' \nAND c.name = 'Brands Hatch' \nORDER BY r.year DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM circuits AS T1\nJOIN races AS T2\nON T1.circuitid = T2.circuitid\nWHERE T1.name = \"Silverstone Circuit\" AND T1.country = \"United Kingdom\";",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = \"Singapore Grand Prix\" AND ra.year = 2010\nORDER BY r.position;",
  "SELECT T1.forename, T1.surname, T2.points \nFROM drivers AS T1 \nJOIN driverStandings AS T2 \nON T1.driverId = T2.driverId \nORDER BY T2.points DESC \nLIMIT 1;",
  "SELECT \n  drivers.forename, \n  drivers.surname, \n  results.points \nFROM \n  results \n  JOIN drivers ON results.driverId = drivers.driverId \n  JOIN races ON results.raceId = races.raceId \nWHERE \n  races.name = 'Chinese Grand Prix' \n  AND races.year = 2017 \nORDER BY \n  results.points DESC \nLIMIT 3;",
  "SELECT laptimes.milliseconds, drivers.forename, drivers.surname, races.name \nFROM laptimes \nJOIN drivers ON laptimes.driverId = drivers.driverId \nJOIN races ON laptimes.raceId = races.raceId \nORDER BY laptimes.milliseconds ASC \nLIMIT 1;",
  "SELECT AVG(laptimes.milliseconds)\nFROM laptimes\nJOIN drivers ON laptimes.driverId = drivers.driverId\nJOIN races ON laptimes.raceId = races.raceId\nWHERE drivers.forename = 'Lewis'\nAND drivers.surname = 'Hamilton'\nAND races.name = 'Malaysian Grand Prix'\nAND races.year = 2009;",
  "SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverid = T2.driverid \nJOIN races AS T3 ON T2.raceid = T3.raceid \nWHERE T1.surname = 'Hamilton' AND T3.year >= 2010;",
  "SELECT T1.forename, T1.surname, T1.nationality, T2.points \nFROM drivers AS T1 \nJOIN driverStandings AS T2 \nON T1.driverId = T2.driverId \nORDER BY T2.wins DESC \nLIMIT 1;",
  "SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', dob) AS age, forename, surname \nFROM drivers \nWHERE nationality = 'Japanese' \nORDER BY age ASC \nLIMIT 1;",
  "SELECT T1.name \nFROM circuits AS T1 \nJOIN races AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.year BETWEEN 1990 AND 2000 \nGROUP BY T1.name \nHAVING COUNT(T2.raceid) = 4;",
  "SELECT circuits.name, circuits.location, races.name\nFROM circuits\nJOIN races ON circuits.circuitid = races.circuitid\nWHERE circuits.country = 'USA' AND races.year = 2006;",
  "SELECT r.name, c.name, c.location\nFROM races r\nJOIN circuits c ON r.circuitid = c.circuitid\nWHERE STRFTIME('%m', r.date) = '09' AND STRFTIME('%Y', r.date) = '2005'",
  "SELECT DISTINCT races.name \nFROM races \nJOIN qualifying \nON races.raceId = qualifying.raceId \nJOIN drivers \nON qualifying.driverId = drivers.driverId \nWHERE drivers.forename = 'Alex' \nAND drivers.surname = 'Yoong' \nAND qualifying.position < 20;",
  "SELECT COUNT(*)\nFROM results AS T1\nJOIN races AS T2 ON T1.raceid = T2.raceid\nJOIN circuits AS T3 ON T2.circuitid = T3.circuitid\nJOIN drivers AS T4 ON T1.driverid = T4.driverid\nWHERE T4.forename = \"Michael\"\nAND T4.surname = \"Schumacher\"\nAND T3.name = \"Sepang International Circuit\"\nAND T1.points = (\n    SELECT MAX(T1.points)\n    FROM results AS T1\n    JOIN races AS T2 ON T1.raceid = T2.raceid\n    JOIN circuits AS T3 ON T2.circuitid = T3.circuitid\n    JOIN drivers AS T4 ON T1.driverid = T4.driverid\n    WHERE T4.forename = \"Michael\"\n    AND T4.surname = \"Schumacher\"\n    AND T3.name = \"Sepang International Circuit\"\n)",
  "SELECT races.name, races.year \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nJOIN races ON results.raceId = races.raceId \nWHERE drivers.forename = \"Michael\" AND drivers.surname = \"Schumacher\" \nORDER BY results.milliseconds ASC \nLIMIT 1;",
  "SELECT AVG(T2.points)\nFROM drivers AS T1\nJOIN driverStandings AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000;",
  "SELECT \n    races.name, \n    results.points \nFROM \n    drivers \n    JOIN results ON drivers.driverId = results.driverId \n    JOIN races ON results.raceId = races.raceId \nWHERE \n    drivers.forename = 'Lewis' \n    AND drivers.surname = 'Hamilton' \nORDER BY \n    races.year ASC \nLIMIT 1;",
  "SELECT races.name, circuits.country \nFROM races \nJOIN circuits ON races.circuitid = circuits.circuitid \nWHERE races.year = 2017 \nORDER BY races.date;",
  "SELECT \n  races.name, \n  races.year, \n  circuits.location \nFROM \n  races \n  JOIN results ON races.raceid = results.raceid \n  JOIN circuits ON races.circuitid = circuits.circuitid \nORDER BY \n  results.laps DESC \nLIMIT \n  1;",
  "SELECT CAST(SUM(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM races \nJOIN circuits ON races.circuitid = circuits.circuitid \nWHERE races.name = 'European Grand Prix';",
  "SELECT lat, lng \nFROM circuits \nWHERE name = 'Silverstone Circuit';",
  "SELECT name \nFROM circuits \nWHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') \nORDER BY lat DESC \nLIMIT 1;",
  "SELECT circuitRef \nFROM circuits \nWHERE name = 'Marina Bay Street Circuit';",
  "SELECT country \nFROM circuits \nORDER BY alt DESC \nLIMIT 1;",
  "SELECT count(*)\nFROM drivers\nWHERE code IS NULL;",
  "SELECT nationality \nFROM drivers \nORDER BY dob ASC \nLIMIT 1;",
  "SELECT surname \nFROM drivers \nWHERE nationality = 'Italian';",
  "SELECT url \nFROM drivers \nWHERE forename = 'Anthony' \nAND surname = 'Davidson';",
  "SELECT driverRef \nFROM drivers \nWHERE forename = 'Lewis' AND surname = 'Hamilton';",
  "SELECT T2.name \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T1.name = \"Spanish Grand Prix\" AND T1.year = 2009;",
  "SELECT DISTINCT T1.year \nFROM races AS T1 \nJOIN circuits AS T2 \nON T1.circuitid = T2.circuitid \nWHERE T2.name = \"Silverstone Circuit\";",
  "SELECT circuits.url \nFROM circuits \nJOIN races \nON circuits.circuitid = races.circuitid \nWHERE circuits.name = 'Silverstone Circuit';",
  "SELECT races.time \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.name = \"Abu Dhabi International Circuit\" \nAND races.year = 2010;",
  "SELECT count(*) \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.country = 'Italy';",
  "SELECT races.date \nFROM races \nJOIN circuits \nON races.circuitid = circuits.circuitid \nWHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
  "SELECT circuits.url \nFROM circuits \nJOIN races \nON circuits.circuitid = races.circuitid \nWHERE races.name = \"Spanish Grand Prix\" \nAND races.year = 2009;",
  "SELECT MIN(results.fastestLapTime) \nFROM results \nJOIN drivers \nON results.driverId = drivers.driverId \nWHERE drivers.forename = \"Lewis\" \nAND drivers.surname = \"Hamilton\";",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nORDER BY T2.fastestLapSpeed DESC\nLIMIT 1;",
  "SELECT T1.driverRef\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T2.position = 1",
  "SELECT DISTINCT races.name\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
  "SELECT races.name \nFROM drivers \nJOIN results ON drivers.driverid = results.driverid \nJOIN races ON results.raceid = races.raceid \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' \nORDER BY results.rank \nLIMIT 1;",
  "SELECT MAX(T2.fastestLapSpeed) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = 'Spanish Grand Prix' \nAND T1.year = 2009;",
  "SELECT DISTINCT T3.year \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\";",
  "SELECT results.positionOrder \nFROM results \nJOIN drivers ON results.driverId = drivers.driverId \nJOIN races ON results.raceId = races.raceId \nWHERE drivers.forename = 'Lewis' \nAND drivers.surname = 'Hamilton' \nAND races.name = 'Chinese Grand Prix' \nAND races.year = 2008;",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Australian Grand Prix' AND ra.year = 1989 AND r.grid = 4;",
  "SELECT COUNT(*)\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.name = \"Australian Grand Prix\" AND T1.year = 2008 AND T2.time IS NOT NULL;",
  "SELECT results.fastestLapTime \nFROM results \nJOIN races ON results.raceId = races.raceId \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE races.name = 'Australian Grand Prix' \nAND races.year = 2008 \nAND drivers.forename = 'Lewis' \nAND drivers.surname = 'Hamilton';",
  "SELECT results.time \nFROM races \nJOIN results ON races.raceId = results.raceId \nWHERE races.name = 'Chinese Grand Prix' \nAND races.year = 2008 \nAND results.rank = 2;",
  "SELECT T1.forename, T1.surname, T1.url \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.time LIKE '%:%:%.%'",
  "SELECT COUNT(*)\nFROM drivers AS T1\nJOIN results AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T2.raceId = T3.raceId\nWHERE T1.nationality = 'British' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008;",
  "SELECT COUNT(T2.driverId) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.year = 2008 \nAND T1.name = \"Chinese Grand Prix\" \nAND T2.time IS NOT NULL;",
  "SELECT SUM(T2.points) \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.forename = \"Lewis\" \nAND T1.surname = \"Hamilton\";",
  "SELECT AVG(\n    CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS REAL) * 60 + \n    CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1, 2) AS REAL) + \n    CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, '.') + 1, 3) AS REAL) / 1000\n) AS average_fastest_lap_time_seconds\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nWHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';",
  "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = 'Australian Grand Prix' \nAND T1.year = 2008;",
  "SELECT CAST((MAX(T2.time) - MIN(T2.time)) AS REAL) * 100 / MAX(T2.time) AS percentage\nFROM races AS T1\nJOIN results AS T2\nON T1.raceId = T2.raceId\nWHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL;",
  "SELECT count(*) \nFROM circuits \nWHERE country = \"Australia\" \nAND location = \"Adelaide\";",
  "SELECT lat, lng \nFROM circuits \nWHERE country = 'USA';",
  "SELECT count(*) \nFROM drivers \nWHERE nationality = 'British' \nAND STRFTIME('%Y', dob) > '1980';",
  "SELECT max(T2.points) \nFROM constructors AS T1 \nJOIN constructorStandings AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T1.nationality = 'British';",
  "SELECT T1.name \nFROM constructors AS T1 \nJOIN constructorStandings AS T2 \nON T1.constructorId = T2.constructorId \nGROUP BY T1.name \nORDER BY SUM(T2.points) DESC \nLIMIT 1;",
  "SELECT T1.name \nFROM constructors AS T1 \nJOIN constructorStandings AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T2.raceId = 291 AND T2.points = 0;",
  "SELECT COUNT(*)\nFROM (\n    SELECT T1.constructorid\n    FROM constructors AS T1\n    JOIN constructorresults AS T2\n    ON T1.constructorid = T2.constructorid\n    WHERE T1.nationality = \"Japanese\" AND T2.points = 0\n    GROUP BY T1.constructorid\n    HAVING COUNT(T2.raceid) = 2\n);",
  "SELECT DISTINCT T1.name \nFROM constructors AS T1 \nJOIN results AS T2 \nON T1.constructorId = T2.constructorId \nWHERE T2.rank = 1;",
  "SELECT COUNT(*)\nFROM constructors AS T1\nJOIN results AS T2\nON T1.constructorId = T2.constructorId\nWHERE T1.nationality = \"French\" AND T2.laps > 50;",
  "SELECT CAST(SUM(CASE WHEN res.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM drivers AS dri\nJOIN results AS res ON dri.driverid = res.driverid\nJOIN races AS rac ON res.raceid = rac.raceid\nWHERE dri.nationality = 'Japanese' AND rac.year BETWEEN 2007 AND 2009;",
  "SELECT r.year, AVG(res.time) AS average_time\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nWHERE r.year < 1975 AND res.time IS NOT NULL\nGROUP BY r.year;",
  "SELECT DISTINCT T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.dob > '1975-12-31' AND T2.rank = 2;",
  "SELECT COUNT(*)\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
  "SELECT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN results AS T2\nON T1.driverId = T2.driverId\nORDER BY T2.fastestLapTime ASC\nLIMIT 1;",
  "SELECT T2.fastestLapTime \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.year = 2009 \nORDER BY T2.fastestLapTime ASC \nLIMIT 1;",
  "SELECT AVG(T2.fastestLapSpeed) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = 'Spanish Grand Prix' \nAND T1.year = 2009;",
  "SELECT T1.name, T1.year \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T2.milliseconds IS NOT NULL \nORDER BY T2.milliseconds ASC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN d.dob < '1985-01-01' AND res.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM drivers d\nJOIN results res ON d.driverid = res.driverid\nJOIN races r ON res.raceid = r.raceid\nWHERE r.year BETWEEN 2000 AND 2005;",
  "SELECT COUNT(*)\nFROM drivers\nJOIN laptimes ON drivers.driverId = laptimes.driverId\nWHERE drivers.nationality = 'French' AND laptimes.milliseconds < 120000;",
  "SELECT code \nFROM drivers \nWHERE nationality = 'American';",
  "SELECT raceId \nFROM races \nWHERE `year` = 2009;",
  "SELECT count(driverId) \nFROM results \nWHERE raceId = 18;",
  "SELECT code, \n       SUM(CASE WHEN nationality = 'Dutch' THEN 1 ELSE 0 END) AS netherlandic_count \nFROM (\n    SELECT code, \n           nationality \n    FROM drivers \n    ORDER BY dob DESC \n    LIMIT 3\n) AS Top3Drivers;",
  "SELECT driverRef \nFROM drivers \nWHERE forename = \"Robert\" \nAND surname = \"Kubica\";",
  "SELECT count(*) \nFROM drivers \nWHERE STRFTIME('%Y', dob) = '1980' \nAND nationality = 'British';",
  "SELECT DISTINCT d.forename, d.surname\nFROM drivers d\nJOIN lapTimes l ON d.driverId = l.driverId\nWHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31'\nORDER BY l.time\nLIMIT 3;",
  "SELECT driverRef \nFROM drivers \nWHERE nationality = 'German' \nORDER BY dob ASC \nLIMIT 1;",
  "SELECT DISTINCT T1.driverId, T1.code \nFROM drivers AS T1 \nJOIN results AS T2 \nON T1.driverId = T2.driverId \nWHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL;",
  "SELECT DISTINCT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN laptimes AS T2\nON T1.driverid = T2.driverid\nWHERE T1.nationality = \"Spanish\" \nAND T1.dob < '1982-01-01'\nORDER BY T2.time DESC\nLIMIT 10;",
  "SELECT DISTINCT T1.year \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T2.fastestLapTime IS NOT NULL;",
  "SELECT T1.year \nFROM races AS T1 \nJOIN laptimes AS T2 \nON T1.raceId = T2.raceId \nORDER BY T2.time ASC \nLIMIT 1;",
  "SELECT driverId \nFROM lapTimes \nWHERE lap = 1 \nORDER BY time ASC \nLIMIT 5;",
  "SELECT COUNT(*) \nFROM results \nWHERE time IS NOT NULL \nAND statusId = 2 \nAND raceId > 50 \nAND raceId < 100;",
  "SELECT location, lat, lng \nFROM circuits \nWHERE country = 'Austria';",
  "SELECT raceId \nFROM results \nWHERE time IS NOT NULL \nGROUP BY raceId \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T1.driverRef, T1.nationality, T1.dob\nFROM drivers AS T1\nJOIN qualifying AS T2\nON T1.driverId = T2.driverId\nWHERE T2.raceId = 23 AND T2.q2 IS NOT NULL;",
  "SELECT races.year, races.name, races.date, races.time\nFROM races\nJOIN qualifying ON races.raceId = qualifying.raceId\nJOIN drivers ON qualifying.driverId = drivers.driverId\nORDER BY drivers.dob DESC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN status ON results.statusId = status.statusId\nWHERE drivers.nationality = 'American' AND status.status = 'Puncture';",
  "SELECT constructors.url \nFROM constructors \nJOIN constructorStandings \nON constructors.constructorId = constructorStandings.constructorId \nWHERE constructors.nationality = 'Italian' \nORDER BY constructorStandings.points DESC \nLIMIT 1;",
  "SELECT constructors.url\nFROM constructors\nJOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId\nGROUP BY constructors.constructorId\nORDER BY SUM(constructorStandings.wins) DESC\nLIMIT 1;",
  "SELECT T2.forename, T2.surname\nFROM laptimes AS T1\nJOIN drivers AS T2 ON T1.driverId = T2.driverId\nJOIN races AS T3 ON T1.raceId = T3.raceId\nWHERE T3.name = \"French Grand Prix\" AND T1.lap = 3\nORDER BY T1.time DESC\nLIMIT 1;",
  "SELECT raceId, milliseconds\nFROM lapTimes\nWHERE lap = 1\nORDER BY milliseconds\nLIMIT 1;",
  "SELECT AVG(T2.fastestLapTime) \nFROM races AS T1 \nJOIN results AS T2 \nON T1.raceId = T2.raceId \nWHERE T1.name = \"United States Grand Prix\" \nAND T1.year = 2006 \nAND T2.rank < 11;",
  "SELECT d.forename, d.surname\nFROM drivers d\nJOIN pitStops p ON d.driverId = p.driverId\nWHERE d.nationality = 'German'\nAND d.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY d.forename, d.surname\nORDER BY AVG(p.duration) ASC\nLIMIT 3;",
  "SELECT T3.forename, T3.surname, T2.time \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nJOIN drivers AS T3 ON T2.driverId = T3.driverId \nWHERE T1.year = 2008 AND T1.name = \"Canadian Grand Prix\" AND T2.position = 1;",
  "SELECT constructors.constructorRef, constructors.url\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN constructors ON results.constructorId = constructors.constructorId\nWHERE races.name = 'Singapore Grand Prix' AND races.year = 2009\nORDER BY results.time ASC\nLIMIT 1;",
  "SELECT forename, surname, dob \nFROM drivers \nWHERE nationality = 'Austrian' \nAND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991';",
  "SELECT forename, surname, url, dob \nFROM drivers \nWHERE nationality = 'German' \nAND dob BETWEEN '1971-01-01' AND '1985-12-31' \nORDER BY dob DESC;",
  "SELECT location, country, lat, lng \nFROM circuits \nWHERE name = \"Hungaroring\";",
  "SELECT cr.points, c.name, c.nationality\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nJOIN races r ON cr.raceId = r.raceId\nWHERE r.name = \"Monaco Grand Prix\" AND r.year BETWEEN 1980 AND 2010\nORDER BY cr.points DESC\nLIMIT 1;",
  "SELECT AVG(T3.points) \nFROM drivers AS T1 \nJOIN results AS T3 ON T1.driverId = T3.driverId \nJOIN races AS T2 ON T3.raceId = T2.raceId \nWHERE T1.forename = \"Lewis\" \nAND T1.surname = \"Hamilton\" \nAND T2.name = \"Turkish Grand Prix\";",
  "SELECT CAST(COUNT(*) AS REAL) / 11 \nFROM races \nWHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
  "SELECT nationality \nFROM drivers \nGROUP BY nationality \nORDER BY COUNT(nationality) DESC \nLIMIT 1;",
  "SELECT wins \nFROM driverStandings \nORDER BY points DESC \nLIMIT 90, 1;",
  "SELECT races.name\nFROM races\nJOIN results ON races.raceId = results.raceId\nORDER BY results.fastestLapTime ASC\nLIMIT 1;",
  "SELECT T2.location, T2.country\nFROM races AS T1\nJOIN circuits AS T2\nON T1.circuitid = T2.circuitid\nORDER BY T1.date DESC\nLIMIT 1;",
  "SELECT T4.forename, T4.surname \nFROM qualifying AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nJOIN circuits AS T3 ON T2.circuitId = T3.circuitId \nJOIN drivers AS T4 ON T1.driverId = T4.driverId \nWHERE T3.name = \"Marina Bay Street Circuit\" AND T2.year = 2008 \nORDER BY T1.q3 ASC \nLIMIT 1;",
  "SELECT d.forename, d.surname, d.nationality, r.name\nFROM drivers AS d\nJOIN results AS res ON d.driverId = res.driverId\nJOIN races AS r ON res.raceId = r.raceId\nORDER BY d.dob DESC\nLIMIT 1;",
  "SELECT COUNT(*) \nFROM results AS T1 \nJOIN races AS T2 \nON T1.raceId = T2.raceId \nWHERE T2.name = 'Canadian Grand Prix' \nAND T1.statusId = 3 \nGROUP BY T1.driverId \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T2.wins, T1.forename, T1.surname \nFROM drivers AS T1 \nJOIN driverStandings AS T2 \nON T1.driverId = T2.driverId \nORDER BY T1.dob ASC \nLIMIT 1;",
  "SELECT MAX(duration) FROM pitStops;",
  "SELECT time \nFROM lapTimes \nORDER BY time \nLIMIT 1;",
  "SELECT MAX(T1.duration) \nFROM pitStops AS T1 \nJOIN drivers AS T2 \nON T1.driverId = T2.driverId \nWHERE T2.forename = \"Lewis\" \nAND T2.surname = \"Hamilton\";",
  "SELECT pitStops.lap\nFROM pitStops\nJOIN races ON pitStops.raceId = races.raceId\nJOIN drivers ON pitStops.driverId = drivers.driverId\nWHERE races.name = 'Australian Grand Prix'\nAND races.year = 2011\nAND drivers.forename = 'Lewis'\nAND drivers.surname = 'Hamilton';",
  "SELECT pitStops.duration \nFROM pitStops \nJOIN races \nON pitStops.raceId = races.raceId \nWHERE races.name = \"Australian Grand Prix\" \nAND races.year = 2011;",
  "SELECT MIN(T2.time) \nFROM drivers AS T1 \nJOIN laptimes AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\";",
  "SELECT DISTINCT T1.forename, T1.surname\nFROM drivers AS T1\nJOIN laptimes AS T2\nON T1.driverId = T2.driverId\nORDER BY T2.time\nLIMIT 20;",
  "SELECT T2.`position` \nFROM drivers AS T1 \nJOIN laptimes AS T2 \nON T1.driverid = T2.driverid \nWHERE T1.forename = \"Lewis\" \nAND T1.surname = \"Hamilton\" \nORDER BY T2.time \nLIMIT 1;",
  "SELECT MIN(T3.time) \nFROM circuits AS T1 \nJOIN races AS T2 \nON T1.circuitid = T2.circuitid \nJOIN laptimes AS T3 \nON T2.raceid = T3.raceid \nWHERE T1.name = \"Austrian Grand Prix\"",
  "SELECT laptimes.time \nFROM laptimes \nJOIN races ON laptimes.raceId = races.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.country = 'Italy';",
  "SELECT races.name \nFROM races \nJOIN circuits ON races.circuitid = circuits.circuitid \nJOIN laptimes ON races.raceid = laptimes.raceid \nWHERE circuits.name = \"Austrian Grand Prix\" \nORDER BY laptimes.time \nLIMIT 1;",
  "SELECT T1.duration \nFROM pitStops AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nJOIN lapTimes AS T3 ON T1.raceId = T3.raceId \nWHERE T2.name = 'Austrian Grand Prix' \nORDER BY T3.time \nLIMIT 1;",
  "SELECT DISTINCT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nWHERE lapTimes.time = '1:29.488'",
  "SELECT AVG(T2.milliseconds) \nFROM drivers AS T1 \nJOIN pitStops AS T2 \nON T1.driverId = T2.driverId \nWHERE T1.forename = 'Lewis' \nAND T1.surname = 'Hamilton';",
  "SELECT AVG(lapTimes.milliseconds) \nFROM circuits \nJOIN races ON circuits.circuitId = races.circuitId \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE circuits.country = 'Italy';",
  "SELECT player_api_id \nFROM Player_Attributes \nORDER BY overall_rating DESC \nLIMIT 1;",
  "SELECT height, player_name \nFROM Player \nORDER BY height DESC \nLIMIT 1;",
  "SELECT preferred_foot \nFROM Player_Attributes \nORDER BY potential \nLIMIT 1;",
  "SELECT count(*) \nFROM Player_Attributes \nWHERE overall_rating >= 60 \n  AND overall_rating <= 65 \n  AND defensive_work_rate = 'low';",
  "SELECT player_api_id \nFROM Player_Attributes \nORDER BY crossing DESC \nLIMIT 5;",
  "SELECT T2.name \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T1.season = '2015/2016' \nGROUP BY T2.name \nORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC \nLIMIT 1;",
  "SELECT T2.team_long_name \nFROM `Match` AS T1 \nJOIN Team AS T2 \nON T1.home_team_api_id = T2.team_api_id \nWHERE T1.season = '2015/2016' \nAND T1.home_team_goal - T1.away_team_goal < 0 \nGROUP BY T2.team_long_name \nORDER BY COUNT(*) ASC \nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.penalties DESC \nLIMIT 10;",
  "SELECT T1.team_long_name\nFROM Team AS T1\nJOIN `Match` AS T2 ON T1.team_api_id = T2.away_team_api_id\nJOIN League AS T3 ON T3.id = T2.league_id\nWHERE T3.name = 'Scotland Premier League' \nAND T2.season = '2009/2010' \nAND T2.away_team_goal > T2.home_team_goal\nGROUP BY T1.team_long_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
  "SELECT buildUpPlaySpeed \nFROM Team_Attributes \nORDER BY buildUpPlaySpeed DESC \nLIMIT 4;",
  "SELECT T2.name \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T1.season = '2015/2016' \nAND T1.home_team_goal = T1.away_team_goal \nGROUP BY T2.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT CAST((STRFTIME('%Y', 'now') - STRFTIME('%Y', Player.birthday)) AS INTEGER) AS age\nFROM Player \nJOIN Player_Attributes \nON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player_Attributes.sprint_speed >= 97 \nAND STRFTIME('%Y', Player_Attributes.`date`) BETWEEN '2013' AND '2015';",
  "SELECT T2.name, COUNT(T1.league_id) as match_count \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nGROUP BY T2.name \nORDER BY match_count DESC \nLIMIT 1;",
  "SELECT AVG(height) \nFROM Player \nWHERE birthday >= '1990-01-01 00:00:00' \nAND birthday < '1996-01-01 00:00:00';",
  "SELECT player_api_id \nFROM Player_Attributes \nWHERE overall_rating > (SELECT AVG(overall_rating) \n                       FROM Player_Attributes \n                       WHERE SUBSTR(`date`, 1, 4) = '2010') \n  AND SUBSTR(`date`, 1, 4) = '2010' \nORDER BY overall_rating DESC \nLIMIT 1;",
  "SELECT team_fifa_api_id \nFROM Team_Attributes \nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
  "SELECT DISTINCT T1.team_long_name\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T2.buildUpPlayPassing > (\n    SELECT CAST(SUM(T2.buildUpPlayPassing) AS REAL) / COUNT(*)\n    FROM Team_Attributes AS T2\n    WHERE strftime('%Y', T2.`date`) = '2012' AND T2.buildUpPlayPassing IS NOT NULL\n)\nAND strftime('%Y', T2.`date`) = '2012' AND T2.buildUpPlayPassing IS NOT NULL;",
  "SELECT CAST(SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE SUBSTR(T1.birthday, 1, 4) BETWEEN '1987' AND '1992';",
  "SELECT L.name \nFROM `Match` AS M \nJOIN League AS L \nON M.league_id = L.id \nGROUP BY L.name \nORDER BY SUM(M.home_team_goal + M.away_team_goal) ASC \nLIMIT 5;",
  "SELECT AVG(T2.long_shots) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Ahmed Samir Farag';",
  "SELECT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.height > 180\nGROUP BY T1.player_name\nORDER BY AVG(T2.heading_accuracy) DESC\nLIMIT 10;",
  "SELECT T1.team_long_name\nFROM Team AS T1\nJOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE T2.buildUpPlayDribblingClass = 'Normal'\nAND T2.date >= '2014-01-01 00:00:00'\nAND T2.date <= '2014-01-31 00:00:00'\nAND T2.chanceCreationPassing < (\n    SELECT AVG(chanceCreationPassing)\n    FROM Team_Attributes\n    WHERE date >= '2014-01-01 00:00:00'\n    AND date <= '2014-01-31 00:00:00'\n)\nORDER BY T2.chanceCreationPassing DESC;",
  "SELECT L.name \nFROM `Match` AS M \nJOIN League AS L \nON M.league_id = L.id \nWHERE M.season = '2009/2010' \nGROUP BY L.name \nHAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)",
  "SELECT team_short_name \nFROM Team \nWHERE team_long_name = 'Queens Park Rangers';",
  "SELECT player_name \nFROM Player \nWHERE SUBSTR(birthday, 1, 4) = '1970' \nAND SUBSTR(birthday, 6, 2) = '10';",
  "SELECT T2.attacking_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Franco Zennaro';",
  "SELECT T2.buildUpPlayPositioningClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'ADO Den Haag';",
  "SELECT T2.heading_accuracy \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = \"Francois Affolter\" \nAND T2.date = \"2014-09-18 00:00:00\";",
  "SELECT T2.overall_rating \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Gabriel Tamas' \nAND strftime('%Y', T2.date) = '2011';",
  "SELECT count(*)\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nWHERE T1.season = '2015/2016' AND T2.name = 'Scotland Premier League'",
  "SELECT T2.preferred_foot \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T1.birthday DESC \nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes);",
  "SELECT COUNT(*)\nFROM Player \nJOIN Player_Attributes \nON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player.weight < 130 \nAND Player_Attributes.preferred_foot = 'left'",
  "SELECT DISTINCT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.chanceCreationPassingClass = 'Risky'",
  "SELECT T2.defensive_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'David Wilson'",
  "SELECT T1.birthday \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1;",
  "SELECT League.name \nFROM League \nJOIN Country \nON League.country_id = Country.id \nWHERE Country.name = 'Netherlands';",
  "SELECT AVG(T1.home_team_goal) \nFROM `Match` AS T1 \nJOIN Country AS T2 \nON T1.country_id = T2.id \nWHERE T2.name = 'Poland' \nAND T1.season = '2010/2011';",
  "SELECT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nWHERE T1.height >= (SELECT MIN(height) FROM Player)\nAND T1.height <= (SELECT MAX(height) FROM Player)\nGROUP BY T1.player_name\nORDER BY AVG(T2.finishing) DESC\nLIMIT 1;",
  "SELECT player_name \nFROM Player \nWHERE height > 180;",
  "SELECT count(*) \nFROM Player \nWHERE strftime('%Y', birthday) > '1990';",
  "SELECT count(*) \nFROM Player \nWHERE player_name LIKE 'Adam%' \nAND weight > 170;",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.overall_rating > 80 \nAND strftime('%Y', T2.`date`) BETWEEN '2008' AND '2010';",
  "SELECT T2.potential \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Doran';",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.preferred_foot = 'left'",
  "SELECT T1.team_long_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlaySpeedClass = 'Fast';",
  "SELECT T2.buildUpPlayPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_short_name = 'CLB';",
  "SELECT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlayPassing > 70;",
  "SELECT AVG(t2.overall_rating) \nFROM Player AS t1 \nJOIN Player_Attributes AS t2 \nON t1.player_api_id = t2.player_api_id \nWHERE strftime('%Y', t2.`date`) BETWEEN '2010' AND '2015' \nAND t1.height > 170;",
  "SELECT player_name \nFROM Player \nORDER BY height \nLIMIT 1;",
  "SELECT T1.name \nFROM Country AS T1 \nJOIN League AS T2 \nON T1.id = T2.country_id \nWHERE T2.name = 'Italy Serie A';",
  "SELECT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlaySpeed = 31 \nAND T2.buildUpPlayDribbling = 53 \nAND T2.buildUpPlayPassing = 32;",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Doran';",
  "SELECT count(*) \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T2.name = 'Germany 1. Bundesliga' \nAND strftime('%Y-%m', T1.`date`) BETWEEN '2008-08' AND '2008-10';",
  "SELECT DISTINCT T1.team_short_name \nFROM Team AS T1 \nJOIN `Match` AS T2 \nON T1.team_api_id = T2.home_team_api_id \nWHERE T2.home_team_goal = 10;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.potential = 61 \nORDER BY T2.balance DESC \nLIMIT 1;",
  "SELECT \n  CAST(SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) AS REAL) / \n  COUNT(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T1.id ELSE NULL END) -\n  CAST(SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) AS REAL) / \n  COUNT(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T1.id ELSE NULL END) AS difference\nFROM \n  Player AS T1 \nJOIN \n  Player_Attributes AS T2 \nON \n  T1.player_api_id = T2.player_api_id;",
  "SELECT team_long_name \nFROM Team \nWHERE team_short_name = 'GEN';",
  "SELECT player_name \nFROM Player \nWHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' \nORDER BY birthday \nLIMIT 1;",
  "SELECT player_name \nFROM Player \nORDER BY height DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM Player_Attributes \nWHERE preferred_foot = 'left' \nAND attacking_work_rate = 'low';",
  "SELECT Country.name \nFROM League \nJOIN Country \nON League.country_id = Country.id \nWHERE League.name = 'Belgium Jupiler League';",
  "SELECT League.name \nFROM League \nJOIN Country \nON League.country_id = Country.id \nWHERE Country.name = 'Germany'",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1;",
  "SELECT COUNT(DISTINCT T1.player_api_id) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE strftime('%Y', T1.birthday) < '1986' \nAND T2.defensive_work_rate = 'high';",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') \nORDER BY T2.crossing DESC \nLIMIT 1;",
  "SELECT T2.heading_accuracy \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Ariel Borysiuk';",
  "SELECT COUNT(*)\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player.height > 180 AND Player_Attributes.volleys > 70;",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.volleys > 70 AND T2.dribbling > 70",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN Country AS T2\nON T1.country_id = T2.id\nWHERE T1.season = '2008/2009' AND T2.name = 'Belgium'",
  "SELECT T2.long_passing \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T1.birthday \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nWHERE T2.name = 'Belgium Jupiler League' AND SUBSTR(T1.`date`, 1, 7) = '2009-04';",
  "SELECT T2.name \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T1.season = '2008/2009' \nGROUP BY T2.name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE strftime('%Y', T1.birthday) < '1986';",
  "SELECT CAST((A.overall_rating - B.overall_rating) AS REAL) * 100 / B.overall_rating \nFROM Player_Attributes A \nJOIN Player P1 ON A.player_api_id = P1.player_api_id \nJOIN Player_Attributes B \nJOIN Player P2 ON B.player_api_id = P2.player_api_id \nWHERE P1.player_name = 'Ariel Borysiuk' AND P2.player_name = 'Paulin Puel';",
  "SELECT AVG(T2.buildUpPlaySpeed) \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Heart of Midlothian';",
  "SELECT AVG(T1.overall_rating) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Pietro Marino';",
  "SELECT SUM(T1.crossing) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Aaron Lennox';",
  "SELECT T2.chanceCreationPassing, T2.chanceCreationPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Ajax' \nORDER BY T2.chanceCreationPassing DESC \nLIMIT 1;",
  "SELECT T2.preferred_foot \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Abdou Diallo'",
  "SELECT MAX(T1.overall_rating) \nFROM Player_Attributes AS T1 \nJOIN Player AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Dorlan Pabon';",
  "SELECT AVG(T2.away_team_goal) \nFROM Team AS T1 \nJOIN `Match` AS T2 \nON T1.team_api_id = T2.away_team_api_id \nJOIN Country AS T3 \nON T3.id = T2.country_id \nWHERE T1.team_long_name = 'Parma' \nAND T3.name = 'Italy';",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.date LIKE '2016-06-23%' \nAND T2.overall_rating = 77 \nORDER BY T1.birthday \nLIMIT 1;",
  "SELECT T2.overall_rating \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Aaron Mooy' \nAND T2.`date` LIKE '2016-02-04%'",
  "SELECT T2.potential \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Francesco Parravicini' \nAND T2.`date` = '2010-08-30 00:00:00'",
  "SELECT T2.attacking_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Francesco Migliore' \nAND T2.date LIKE '2015-05-01%';",
  "SELECT T2.defensive_work_rate \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Kevin Berigaud' \nAND T2.date = '2013-02-22 00:00:00';",
  "SELECT T2.`date` \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Kevin Constant' \nORDER BY T2.crossing DESC \nLIMIT 1;",
  "SELECT T2.buildUpPlaySpeedClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Willem II' \nAND T2.`date` = '2012-02-22';",
  "SELECT T2.buildUpPlayDribblingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_short_name = 'LEI' \nAND T2.`date` = '2015-09-10 00:00:00'",
  "SELECT T2.buildUpPlayPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'FC Lorient' \nAND T2.`date` LIKE '2010-02-22%'",
  "SELECT T2.chanceCreationPassingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'PEC Zwolle' \nAND T2.date = '2013-09-20 00:00:00'",
  "SELECT T2.chanceCreationCrossingClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Hull City' \nAND T2.date = '2010-02-22 00:00:00';",
  "SELECT T2.defenceAggressionClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'Hannover 96' \nAND T2.date LIKE '2015-09-10%';",
  "SELECT AVG(T2.overall_rating) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Marko Arnautovic' \nAND SUBSTR(T2.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';",
  "SELECT CAST((donaldon_overall - bowery_overall) AS REAL) * 100 / donaldon_overall AS percentage\nFROM (\n    SELECT \n        MAX(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating END) AS donaldon_overall,\n        MAX(CASE WHEN T1.player_name = 'Jordan Bowery' THEN T2.overall_rating END) AS bowery_overall\n    FROM \n        Player AS T1 \n    JOIN \n        Player_Attributes AS T2 \n    ON \n        T1.player_api_id = T2.player_api_id\n    WHERE \n        T1.player_name IN ('Landon Donovan', 'Jordan Bowery') \n        AND \n        T2.date = '2013-07-12'\n) AS subquery;",
  "SELECT player_name \nFROM Player \nORDER BY height DESC \nLIMIT 1;",
  "SELECT player_api_id \nFROM Player \nORDER BY weight DESC \nLIMIT 10;",
  "SELECT player_name \nFROM Player \nWHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday) >= 35;",
  "SELECT SUM(T2.home_team_goal) \nFROM Player AS T1 \nJOIN `Match` AS T2 \nON T1.player_api_id = T2.home_player_1 \nOR T1.player_api_id = T2.home_player_2 \nOR T1.player_api_id = T2.home_player_3 \nOR T1.player_api_id = T2.home_player_4 \nOR T1.player_api_id = T2.home_player_5 \nOR T1.player_api_id = T2.home_player_6 \nOR T1.player_api_id = T2.home_player_7 \nOR T1.player_api_id = T2.home_player_8 \nOR T1.player_api_id = T2.home_player_9 \nOR T1.player_api_id = T2.home_player_10 \nOR T1.player_api_id = T2.home_player_11 \nWHERE T1.player_name = 'Aaron Lennon';",
  "SELECT SUM(T2.away_team_goal) \nFROM Player AS T1 \nJOIN `Match` AS T2 \nON T1.player_api_id = T2.away_player_1 \nOR T1.player_api_id = T2.away_player_2 \nOR T1.player_api_id = T2.away_player_3 \nOR T1.player_api_id = T2.away_player_4 \nOR T1.player_api_id = T2.away_player_5 \nOR T1.player_api_id = T2.away_player_6 \nOR T1.player_api_id = T2.away_player_7 \nOR T1.player_api_id = T2.away_player_8 \nOR T1.player_api_id = T2.away_player_9 \nOR T1.player_api_id = T2.away_player_10 \nOR T1.player_api_id = T2.away_player_11 \nWHERE T1.player_name = 'Daan Smith' \nOR T1.player_name = 'Filipe Ferreira';",
  "SELECT SUM(T1.home_team_goal) \nFROM `Match` AS T1 \nJOIN Player AS T2 \nON T1.home_player_1 = T2.player_api_id \nWHERE (strftime('%Y', 'now') - strftime('%Y', T2.birthday)) <= 30",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.potential DESC \nLIMIT 1;",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.attacking_work_rate = 'high';",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T2.finishing = 1 \nORDER BY T1.birthday ASC \nLIMIT 1;",
  "SELECT DISTINCT T1.player_name \nFROM Player AS T1 \nJOIN `Match` AS T2 \nON T1.player_api_id = T2.home_player_1 \nOR T1.player_api_id = T2.home_player_2 \nOR T1.player_api_id = T2.home_player_3 \nOR T1.player_api_id = T2.home_player_4 \nOR T1.player_api_id = T2.home_player_5 \nOR T1.player_api_id = T2.home_player_6 \nOR T1.player_api_id = T2.home_player_7 \nOR T1.player_api_id = T2.home_player_8 \nOR T1.player_api_id = T2.home_player_9 \nOR T1.player_api_id = T2.home_player_10 \nOR T1.player_api_id = T2.home_player_11 \nOR T1.player_api_id = T2.away_player_1 \nOR T1.player_api_id = T2.away_player_2 \nOR T1.player_api_id = T2.away_player_3 \nOR T1.player_api_id = T2.away_player_4 \nOR T1.player_api_id = T2.away_player_5 \nOR T1.player_api_id = T2.away_player_6 \nOR T1.player_api_id = T2.away_player_7 \nOR T1.player_api_id = T2.away_player_8 \nOR T1.player_api_id = T2.away_player_9 \nOR T1.player_api_id = T2.away_player_10 \nOR T1.player_api_id = T2.away_player_11 \nJOIN League AS T3 \nON T2.league_id = T3.id \nJOIN Country AS T4 \nON T3.country_id = T4.id \nWHERE T4.name = 'Belgium';",
  "SELECT DISTINCT T1.player_name\nFROM Player AS T1\nJOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id\nWHERE T2.vision > 89",
  "SELECT C.name \nFROM Player P \nJOIN `Match` M \nON P.player_api_id = M.home_player_1 OR P.player_api_id = M.home_player_2 OR P.player_api_id = M.home_player_3 OR P.player_api_id = M.home_player_4 OR P.player_api_id = M.home_player_5 OR P.player_api_id = M.home_player_6 OR P.player_api_id = M.home_player_7 OR P.player_api_id = M.home_player_8 OR P.player_api_id = M.home_player_9 OR P.player_api_id = M.home_player_10 OR P.player_api_id = M.home_player_11 OR \n   P.player_api_id = M.away_player_1 OR P.player_api_id = M.away_player_2 OR P.player_api_id = M.away_player_3 OR P.player_api_id = M.away_player_4 OR P.player_api_id = M.away_player_5 OR P.player_api_id = M.away_player_6 OR P.player_api_id = M.away_player_7 OR P.player_api_id = M.away_player_8 OR P.player_api_id = M.away_player_9 OR P.player_api_id = M.away_player_10 OR P.player_api_id = M.away_player_11\nJOIN Country C \nON M.country_id = C.id \nGROUP BY C.name \nORDER BY AVG(P.weight) DESC \nLIMIT 1;",
  "SELECT T1.team_long_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.buildUpPlaySpeedClass = 'Slow';",
  "SELECT DISTINCT T1.team_short_name \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T2.chanceCreationPassingClass = 'Safe'",
  "SELECT AVG(T1.height) \nFROM Player AS T1 \nJOIN `Match` AS T5 \nON T1.player_api_id = T5.home_player_1 OR T1.player_api_id = T5.home_player_2 OR T1.player_api_id = T5.home_player_3 OR T1.player_api_id = T5.home_player_4 OR T1.player_api_id = T5.home_player_5 OR T1.player_api_id = T5.home_player_6 OR T1.player_api_id = T5.home_player_7 OR T1.player_api_id = T5.home_player_8 OR T1.player_api_id = T5.home_player_9 OR T1.player_api_id = T5.home_player_10 OR T1.player_api_id = T5.home_player_11 OR T1.player_api_id = T5.away_player_1 OR T1.player_api_id = T5.away_player_2 OR T1.player_api_id = T5.away_player_3 OR T1.player_api_id = T5.away_player_4 OR T1.player_api_id = T5.away_player_5 OR T1.player_api_id = T5.away_player_6 OR T1.player_api_id = T5.away_player_7 OR T1.player_api_id = T5.away_player_8 OR T1.player_api_id = T5.away_player_9 OR T1.player_api_id = T5.away_player_10 OR T1.player_api_id = T5.away_player_11 \nJOIN Team AS T2 \nON T5.home_team_api_id = T2.team_api_id OR T5.away_team_api_id = T2.team_api_id \nJOIN League AS T3 \nON T2.team_fifa_api_id = T3.country_id \nJOIN Country AS T4 \nON T3.country_id = T4.id \nWHERE T4.name = 'Italy'",
  "SELECT player_name \nFROM Player \nWHERE height > 180 \nORDER BY player_name \nLIMIT 3;",
  "SELECT count(*) \nFROM Player \nWHERE player_name LIKE 'Aaron%' \nAND birthday > '1990%'",
  "SELECT \n  (SELECT jumping FROM Player_Attributes WHERE id = 6) - \n  (SELECT jumping FROM Player_Attributes WHERE id = 23) \nAS difference;",
  "SELECT player_api_id \nFROM Player_Attributes \nWHERE preferred_foot = 'right' \nORDER BY potential ASC \nLIMIT 5;",
  "SELECT COUNT(*) \nFROM Player_Attributes \nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) \n  AND preferred_foot = 'left';",
  "SELECT CAST(SUM(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Player_Attributes;",
  "SELECT T2.name \nFROM League AS T1 \nJOIN Country AS T2 \nON T1.country_id = T2.id \nWHERE T1.name = 'Poland Ekstraklasa';",
  "SELECT T1.home_team_goal, T1.away_team_goal \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T1.`date` LIKE '2008-09-24%' \nAND T2.name = 'Belgium Jupiler League';",
  "SELECT T2.sprint_speed, T2.agility, T2.acceleration \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nWHERE T1.player_name = 'Alexis Blin'",
  "SELECT T2.buildUpPlaySpeedClass \nFROM Team AS T1 \nJOIN Team_Attributes AS T2 \nON T1.team_api_id = T2.team_api_id \nWHERE T1.team_long_name = 'KSV Cercle Brugge';",
  "SELECT COUNT(*)\nFROM `Match` AS T1\nJOIN League AS T2\nON T1.league_id = T2.id\nWHERE T1.season = '2015/2016' AND T2.name = 'Italian Serie A'",
  "SELECT MAX(T1.home_team_goal) \nFROM `Match` AS T1 \nJOIN League AS T2 \nON T1.league_id = T2.id \nWHERE T2.name = 'Netherlands Eredivisie'",
  "SELECT T2.finishing, T2.curve\nFROM Player AS T1\nJOIN Player_Attributes AS T2\nON T1.player_api_id = T2.player_api_id\nORDER BY T1.weight DESC\nLIMIT 1;",
  "SELECT L.name \nFROM `Match` M \nJOIN League L \nON M.league_id = L.id \nWHERE M.season = '2015/2016' \nGROUP BY L.name \nORDER BY COUNT(M.id) DESC \nLIMIT 4;",
  "SELECT T2.team_long_name \nFROM `Match` AS T1 \nJOIN Team AS T2 \nON T1.away_team_api_id = T2.team_api_id \nORDER BY T1.away_team_goal DESC \nLIMIT 1;",
  "SELECT T1.player_name \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id \nORDER BY T2.overall_rating DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Player AS T1 \nJOIN Player_Attributes AS T2 \nON T1.player_api_id = T2.player_api_id;",
  "SELECT \n  IIF(SUM(IIF(Admission = '+', 1, 0)) > SUM(IIF(Admission = '-', 1, 0)), 'in-patient', 'out-patient') AS more_patients,\n  CAST(SUM(IIF(Admission = '+', 1, 0)) AS REAL) * 100 / SUM(IIF(Admission = '-', 1, 0)) AS percentage_deviation\nFROM \n  Patient\nWHERE \n  SEX = 'M';",
  "SELECT CAST(SUM(CASE WHEN strftime('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE SEX = 'F';",
  "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';",
  "SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS outpatient_to_inpatient_ratio\nFROM Patient\nWHERE Diagnosis = 'SLE';",
  "SELECT Patient.Diagnosis, Laboratory.`Date`\nFROM Patient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE Patient.ID = 30609;",
  "SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.ID = '163109'",
  "SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.LDH > 500;",
  "SELECT \n    Patient.ID, \n    STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) AS Age\nFROM \n    Patient \nJOIN \n    Examination \nON \n    Patient.ID = Examination.ID \nWHERE \n    Examination.RVVT = '+';",
  "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis \nFROM Patient \nJOIN Examination \nON Patient.ID = Examination.ID \nWHERE Examination.Thrombosis = 2;",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
  "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.ALB < 3.5;",
  "SELECT CAST(SUM(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient AS P \nJOIN Laboratory AS L \nON P.ID = L.ID \nWHERE P.SEX = 'F';",
  "SELECT AVG(T2.`aCL IgG`) \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.Admission = '+' \nAND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) >= 50;",
  "SELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'F' \nAND STRFTIME('%Y', Description) = '1997' \nAND Admission = '-';",
  "SELECT STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday) AS Age \nFROM Patient \nORDER BY Age ASC \nLIMIT 1;",
  "SELECT COUNT(*) \nFROM Patient \nJOIN Examination \nON Patient.ID = Examination.ID \nWHERE Patient.SEX = 'F' \nAND Examination.Thrombosis = 1 \nAND Examination.`Examination Date` LIKE '1997-%'",
  "SELECT \n    MAX(strftime('%Y', T1.Birthday)) - MIN(strftime('%Y', T1.Birthday)) AS AgeGap\nFROM \n    Patient AS T1 \nJOIN \n    Laboratory AS T2 \nON \n    T1.ID = T2.ID\nWHERE \n    T2.TG >= 200;",
  "SELECT T2.Symptoms, T2.Diagnosis \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T2.Symptoms IS NOT NULL \nORDER BY T1.Birthday DESC \nLIMIT 1;",
  "SELECT CAST(COUNT(*) AS REAL) / 12 \nFROM Patient \nJOIN Laboratory \nON Patient.ID = Laboratory.ID \nWHERE Patient.SEX = 'M' \nAND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31';",
  "SELECT L.`Date`, strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) AS Age\nFROM Patient P\nJOIN Laboratory L\nON P.ID = L.ID\nWHERE P.Diagnosis = 'SJS'\nORDER BY P.Birthday ASC\nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) /\n       SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS ratio\nFROM Patient P\nJOIN Laboratory L\nON P.ID = L.ID;",
  "SELECT COUNT(*)\nFROM Patient \nJOIN Examination \nON Patient.ID = Examination.ID\nWHERE CAST(STRFTIME('%Y', Examination.`Examination Date`) AS INTEGER) - CAST(STRFTIME('%Y', Patient.`First Date`) AS INTEGER) >= 1;",
  "SELECT COUNT(*)\nFROM Patient \nJOIN Examination \nON Patient.ID = Examination.ID \nWHERE (strftime('%Y', `Examination Date`) - strftime('%Y', Birthday)) < 18 \nAND strftime('%Y', `Examination Date`) BETWEEN '1990' AND '1993';",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` >= 2.0;",
  "SELECT Diagnosis \nFROM Examination \nWHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' \nGROUP BY Diagnosis \nORDER BY COUNT(Diagnosis) DESC \nLIMIT 1;",
  "SELECT AVG(1999 - CAST(SUBSTR(P.Birthday, 1, 4) AS INTEGER)) AS Average_Age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.Date BETWEEN '1991-10-01' AND '1991-10-31';",
  "SELECT STRFTIME('%Y', L.`Date`) - STRFTIME('%Y', P.Birthday) AS Age, P.Diagnosis \nFROM Patient P \nJOIN Laboratory L \nON P.ID = L.ID \nORDER BY L.HGB DESC \nLIMIT 1;",
  "SELECT ANA \nFROM Examination \nWHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
  "SELECT CASE WHEN `T-CHO` < 250 THEN 'Yes' ELSE 'No' END AS Normal_Level\nFROM Laboratory\nWHERE ID = 2927464 AND `Date` = '1995-09-04';",
  "SELECT SEX \nFROM Patient \nWHERE Diagnosis = 'AORTITIS' \nORDER BY Description \nLIMIT 1;",
  "SELECT T2.`aCL IgM`\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'SLE' \nAND T1.Description = '1994-02-19' \nAND T2.`Examination Date` = '1993-11-12';",
  "SELECT T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.GPT = 9 \nAND T2.`Date` = '1992-06-12'",
  "SELECT STRFTIME('%Y', Laboratory.`Date`) - STRFTIME('%Y', Patient.Birthday) AS Age\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.`Date` = '1991-10-21' AND Laboratory.UA = 8.4",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.`First Date` = '1991-06-13'\nAND Patient.Diagnosis = 'SJS'\nAND Laboratory.`Date` LIKE '1995%'",
  "SELECT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T2.Diagnosis = 'SLE' \nAND T2.`Examination Date` = '1997-01-27';",
  "SELECT T2.Symptoms \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.Birthday = '1959-03-01' \nAND T2.`Examination Date` = '1993-09-27';",
  "SELECT \n    SUM(CASE WHEN L.`Date` LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) - \n    SUM(CASE WHEN L.`Date` LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END) AS decrease_rate\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.Birthday = '1959-02-18';",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.Diagnosis = 'BEHCET'\nAND T1.Description >= '1997-01-01'\nAND T1.Description <= '1997-12-31';",
  "SELECT ID \nFROM Laboratory \nWHERE `Date` BETWEEN '1987-07-06' AND '1996-01-31' \nAND GPT > 30 \nAND ALB < 4;",
  "SELECT ID \nFROM Patient \nWHERE SEX = 'F' \nAND STRFTIME('%Y', Birthday) = '1964' \nAND Admission = '+';",
  "SELECT COUNT(*) \nFROM Examination \nWHERE Thrombosis = 2 \n  AND `ANA Pattern` = 'S' \n  AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 \n                   FROM Examination \n                   WHERE Thrombosis = 2 \n                     AND `ANA Pattern` = 'S')",
  "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM Laboratory\nWHERE `U-PRO` > 0 AND `U-PRO` < 30;",
  "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE SEX = 'M' \nAND STRFTIME('%Y', `First Date`) = '1981';",
  "SELECT DISTINCT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Admission = '-'\nAND T2.`Date` LIKE '1991-10%'\nAND T2.`T-BIL` < 2.0;",
  "SELECT COUNT(*)\nFROM Patient AS P\nJOIN Examination AS E\nON P.ID = E.ID\nWHERE P.SEX = 'F' \nAND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'\nAND E.`ANA Pattern` != 'P'",
  "SELECT T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'PSS' \nAND T2.CRP > 2 \nAND T2.CRE = 1 \nAND T2.LDH = 123;",
  "SELECT AVG(T2.ALB) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'F' \nAND T2.PLT > 400 \nAND T1.Diagnosis = 'SLE';",
  "SELECT Symptoms \nFROM Examination \nWHERE Diagnosis = 'SLE' \nGROUP BY Symptoms \nORDER BY COUNT(Symptoms) DESC \nLIMIT 1;",
  "SELECT T1.Description, T1.Diagnosis \nFROM Patient AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.ID = 48473;",
  "SELECT count(*) \nFROM Patient \nWHERE SEX = 'F' \nAND Diagnosis = 'APS';",
  "SELECT COUNT(*) \nFROM Laboratory \nWHERE STRFTIME('%Y', `Date`) = '1997' \nAND (`TP` <= 6 OR `TP` >= 8.5);",
  "SELECT CAST(SUM(CASE WHEN T2.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM Examination AS T2\nWHERE T2.Symptoms = 'thrombocytopenia';",
  "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient \nWHERE SUBSTR(Birthday, 1, 4) = '1980' \nAND Diagnosis = 'RA';",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'M'\nAND Examination.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'\nAND Examination.Diagnosis = 'Behcet'\nAND Patient.Admission = '-';",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5",
  "SELECT julianday(T2.`Examination Date`) - julianday(T1.`First Date`) AS days_difference\nFROM Patient AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.ID = 821298;",
  "SELECT CASE \n         WHEN T2.UA > 8.0 AND T1.SEX = 'M' THEN 'YES' \n         WHEN T2.UA > 6.5 AND T1.SEX = 'F' THEN 'YES' \n         ELSE 'NO' \n       END AS result\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.ID = 57266;",
  "SELECT `Date`\nFROM Laboratory\nWHERE ID = 48473 AND GOT >= 60",
  "SELECT DISTINCT T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T2.`Date`) = '1994' AND T2.GOT < 60;",
  "SELECT DISTINCT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \nAND T2.GPT >= 60;",
  "SELECT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.GPT > 60 \nORDER BY T1.Birthday ASC;",
  "SELECT AVG(LDH) \nFROM Laboratory \nWHERE LDH < 500;",
  "SELECT \n  Patient.ID, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) AS Age\nFROM \n  Patient \nJOIN \n  Laboratory \nON \n  Patient.ID = Laboratory.ID\nWHERE \n  Laboratory.LDH BETWEEN 600 AND 800;",
  "SELECT DISTINCT T1.Admission \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.ALP < 300;",
  "SELECT T1.ID, T2.ALP < 300 AS 'ALP_within_normal_range'\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Birthday = '1982-04-01';",
  "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.TP < 6.0",
  "SELECT T2.TP - 8.5 \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'F' \nAND T2.TP > 8.5;",
  "SELECT T1.ID\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5)\nORDER BY T1.Birthday DESC",
  "SELECT CASE \n         WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Yes' \n         ELSE 'No' \n       END AS Albumin_Within_Normal_Range\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Birthday) = '1982';",
  "SELECT CAST(SUM(CASE WHEN L.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\nFROM Patient AS P\nJOIN Laboratory AS L\nON P.ID = L.ID\nWHERE P.SEX = 'F'",
  "SELECT AVG(T2.UA)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE (T1.SEX = 'M' AND T2.UA < 8.0) OR (T1.SEX = 'F' AND T2.UA < 6.5)\nAND T2.Date = (\n    SELECT MAX(T3.Date)\n    FROM Laboratory AS T3\n    WHERE T3.ID = T1.ID\n)",
  "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.UN = 29;",
  "SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN < 30 AND Patient.Diagnosis = 'RA'",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.CRE >= 1.5;",
  "SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) >\n       SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS result\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.CRE >= 1.5;",
  "SELECT T1.ID, T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nORDER BY T2.`T-BIL` DESC\nLIMIT 1;",
  "SELECT GROUP_CONCAT(DISTINCT T1.ID), T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.`T-BIL` >= 2.0 \nGROUP BY T1.SEX;",
  "SELECT T1.ID, T2.`T-CHO`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nORDER BY T1.Birthday ASC, T2.`T-CHO` DESC\nLIMIT 1;",
  "SELECT CAST(SUM(STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) AS REAL) / COUNT(*) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \nAND T2.`T-CHO` >= 250;",
  "SELECT DISTINCT T1.ID, T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.TG > 300;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.TG >= 200 \nAND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) > 50;",
  "SELECT DISTINCT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Admission = '-' \nAND T2.CPK < 250;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \nAND T2.CPK >= 250 \nAND CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) BETWEEN 1936 AND 1956;",
  "SELECT \n  Patient.ID, \n  Patient.SEX, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) AS Age \nFROM \n  Patient \nJOIN \n  Laboratory \nON \n  Patient.ID = Laboratory.ID \nWHERE \n  Laboratory.GLU >= 180 \n  AND Laboratory.`T-CHO` < 250;",
  "SELECT T1.ID, T2.GLU\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Description) = '1991' AND T2.GLU < 180",
  "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0\nORDER BY T1.SEX, T1.Birthday DESC;",
  "SELECT \n  Patient.Diagnosis, \n  Patient.ID, \n  strftime('%Y', 'now') - strftime('%Y', Patient.Birthday) AS Age\nFROM \n  Patient \nJOIN \n  Laboratory \nON \n  Patient.ID = Laboratory.ID\nWHERE \n  Laboratory.RBC < 3.5;",
  "SELECT DISTINCT T1.Admission\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.SEX = 'F' \nAND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) >= 50\nAND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)",
  "SELECT DISTINCT T1.ID, T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Admission = '-' \nAND T2.HGB < 10;",
  "SELECT T1.ID, T1.SEX \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'SLE' \nAND T2.HGB > 10 \nAND T2.HGB < 17 \nORDER BY T1.Birthday ASC \nLIMIT 1;",
  "SELECT \n  T1.ID, \n  STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) AS Age\nFROM \n  Patient AS T1 \nJOIN \n  Laboratory AS T2 \nON \n  T1.ID = T2.ID \nWHERE \n  T2.HCT >= 52 \nGROUP BY \n  T1.ID \nHAVING \n  COUNT(T1.ID) >= 2;",
  "SELECT AVG(HCT) \nFROM Laboratory \nWHERE Date LIKE '1991%' \nAND HCT < 29;",
  "SELECT SUM(IIF(PLT < 100, 1, 0)) - SUM(IIF(PLT > 400, 1, 0)) AS difference\nFROM Laboratory\nWHERE PLT <= 100 OR PLT >= 400;",
  "SELECT DISTINCT T2.ID \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE strftime('%Y', T1.`Date`) = '1984' \nAND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) < 50 \nAND T1.PLT BETWEEN 100 AND 400;",
  "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 55 \nAND T2.PT >= 14;",
  "SELECT DISTINCT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE STRFTIME('%Y', T1.`First Date`) > '1992' \nAND T2.PT < 14;",
  "SELECT COUNT(*)\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.`Examination Date` > '1997-01-01' AND T2.APTT < 45",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.APTT > 45 \nAND T2.Thrombosis = 0;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \nAND T2.WBC > 3.5 \nAND T2.WBC < 9.0 \nAND (T2.FG <= 150 OR T2.FG >= 450);",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Birthday > '1980-01-01' \nAND (T2.FG < 150 OR T2.FG > 450);",
  "SELECT DISTINCT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.`U-PRO` >= 30;",
  "SELECT DISTINCT T1.ID \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.`U-PRO` > 0 \nAND T1.`U-PRO` < 30 \nAND T2.Diagnosis = 'SLE'",
  "SELECT COUNT(DISTINCT ID) \nFROM Laboratory \nWHERE IGG >= 2000;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Examination.Symptoms IS NOT NULL",
  "SELECT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.IGA BETWEEN 80 AND 500 \nORDER BY T2.IGA DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.IGA > 80\nAND Laboratory.IGA < 500\nAND Patient.`First Date` >= '1990-01-01';",
  "SELECT T2.Diagnosis \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.IGM <= 40 OR T1.IGM >= 400 \nGROUP BY T2.Diagnosis \nORDER BY COUNT(T2.Diagnosis) DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Patient AS T2\nON T1.ID = T2.ID\nWHERE T1.CRP = '+' AND T2.Description IS NULL",
  "SELECT COUNT(*) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.CRE >= 1.5 \nAND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) < 70;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.RA = '-' \nAND T2.KCT = '+';",
  "SELECT DISTINCT T1.Diagnosis\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE STRFTIME('%Y', T1.Birthday) >= '1985' AND T2.RA IN ('-', '+-');",
  "SELECT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.RF < 20 \nAND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 60;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.C3 > 35 \nAND T2.`ANA Pattern` = 'P'",
  "SELECT T1.ID \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.HCT <= 29 OR T1.HCT >= 52 \nORDER BY T2.`aCL IgA` DESC \nLIMIT 1;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Examination AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.Diagnosis = 'APS' \nAND T1.Thrombosis = 1 \nAND T2.C4 > 10;",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T1.Admission = '+'\nAND (T2.RNP = '-' OR T2.RNP = '+-');",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.RNP NOT IN ('-', '+-') \nORDER BY T1.Birthday DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Laboratory.SM IN ('negative', '0') AND Examination.Thrombosis = 0;",
  "SELECT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.SM NOT IN ('negative', '0') \nORDER BY T1.Birthday DESC \nLIMIT 3;",
  "SELECT DISTINCT T1.ID \nFROM Examination AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.`Examination Date` > '1997-01-01' \nAND T2.SC170 IN ('negative', '0');",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2 ON T1.ID = T2.ID\nJOIN Examination AS T3 ON T1.ID = T3.ID\nWHERE T2.SC170 IN ('negative', '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL;",
  "SELECT COUNT(DISTINCT T1.ID)\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.SSA IN ('-', '+-') AND STRFTIME('%Y', T1.`First Date`) < '2000'",
  "SELECT T1.ID \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.SSA NOT IN ('negative', '0') \nORDER BY T1.`First Date` ASC \nLIMIT 1;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE (T1.SSB = 'negative' OR T1.SSB = '0') \nAND T2.Diagnosis = 'SLE';",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.SSB IN ('negative', '0') \nAND T2.Symptoms IS NOT NULL;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.CENTROMEA IN ('-', '+-') \nAND T2.SSB IN ('-', '+-') \nAND T1.SEX = 'M';",
  "SELECT DISTINCT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.DNA >= 8;",
  "SELECT COUNT(DISTINCT T1.ID) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.DNA < 8 \nAND T2.Description IS NULL;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE Laboratory.IGG BETWEEN 901 AND 1999\nAND Patient.Admission = '+';",
  "SELECT CAST(SUM(CASE WHEN T2.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.GOT >= 60;",
  "SELECT COUNT(*)\nFROM Patient \nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M' AND Laboratory.GOT < 60;",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.GOT >= 60 \nORDER BY T1.Birthday DESC \nLIMIT 1;",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.GPT < 60 \nORDER BY T2.GPT DESC \nLIMIT 3;",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.GPT < 60\nAND Patient.SEX = 'M';",
  "SELECT T1.`First Date`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.LDH < 500\nORDER BY T2.LDH DESC\nLIMIT 1;",
  "SELECT T2.`Date`\nFROM Patient AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE T2.LDH >= 500\nORDER BY T1.`First Date` DESC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE Laboratory.ALP >= 300 AND Patient.Admission = '+'",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '-' AND Laboratory.ALP < 300;",
  "SELECT DISTINCT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.TP < 6.0;",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Diagnosis = 'SJS'\nAND Laboratory.TP > 6.0\nAND Laboratory.TP < 8.5;",
  "SELECT `Date`\nFROM Laboratory\nWHERE ALB > 3.5 AND ALB < 5.5\nORDER BY ALB DESC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'M'\nAND Laboratory.ALB > 3.5\nAND Laboratory.ALB < 5.5\nAND Laboratory.TP BETWEEN 6.0 AND 8.5;",
  "SELECT T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA`\nFROM Laboratory AS T1\nJOIN Patient AS T3 ON T1.ID = T3.ID\nJOIN Examination AS T2 ON T1.ID = T2.ID\nWHERE T3.SEX = 'F' AND T1.UA > 6.50\nORDER BY T1.UA DESC\nLIMIT 1;",
  "SELECT MAX(T2.ANA) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.CRE < 1.5;",
  "SELECT T1.ID\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.CRE < 1.5\nORDER BY T2.`aCL IgA` DESC\nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE `T-BIL` >= 2.0 AND `ANA Pattern` LIKE '%P%'",
  "SELECT T2.ANA \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.`T-BIL` < 2.0 \nORDER BY T1.`T-BIL` DESC \nLIMIT 1;",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.`T-CHO` >= 250 AND T2.KCT = '-';",
  "SELECT COUNT(*)\nFROM Laboratory\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Laboratory.`T-CHO` < 250\nAND Examination.`ANA Pattern` = 'P'",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL;",
  "SELECT T1.Diagnosis \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.TG < 200 \nORDER BY T2.TG DESC \nLIMIT 1;",
  "SELECT DISTINCT T1.ID\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T2.Thrombosis = 0 AND T1.CPK < 250;",
  "SELECT COUNT(*) \nFROM Laboratory AS T1 \nJOIN Examination AS T2 \nON T1.ID = T2.ID \nWHERE T1.CPK < 250 \nAND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+');",
  "SELECT T1.Birthday \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T2.GLU > 180 \nORDER BY T1.Birthday \nLIMIT 1;",
  "SELECT count(*) \nFROM Laboratory \nJOIN Examination \nON Laboratory.ID = Examination.ID \nWHERE Laboratory.GLU < 180 \nAND Examination.Thrombosis = 0;",
  "SELECT COUNT(*)\nFROM Patient \nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '+' \nAND Laboratory.WBC BETWEEN 3.5 AND 9.0;",
  "SELECT COUNT(*)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0",
  "SELECT DISTINCT T1.ID \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE (T1.RBC <= 3.5 OR T1.RBC >= 6.0) \nAND T2.Admission = '-';",
  "SELECT COUNT(*)\nFROM Laboratory AS T1\nJOIN Examination AS T2\nON T1.ID = T2.ID\nWHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis IS NOT NULL;",
  "SELECT T1.PLT \nFROM Laboratory AS T1 \nJOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T2.Diagnosis = 'MCTD' \nAND T1.PLT > 100 \nAND T1.PLT < 400;",
  "SELECT AVG(T2.PT) \nFROM Patient AS T1 \nJOIN Laboratory AS T2 \nON T1.ID = T2.ID \nWHERE T1.SEX = 'M' \nAND T2.PT < 14;",
  "SELECT COUNT(*)\nFROM Examination AS T1\nJOIN Laboratory AS T2\nON T1.ID = T2.ID\nWHERE (T1.Thrombosis = 2 OR T1.Thrombosis = 1)\nAND T2.PT < 14;",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Angela\" \nAND T1.last_name = \"Sanders\";",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.college = 'College of Engineering';",
  "SELECT T1.first_name, T1.last_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.department = \"Art and Design Department\";",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = \"Women's Soccer\";",
  "SELECT T3.phone \nFROM event AS T1 \nJOIN attendance AS T2 \nON T1.event_id = T2.link_to_event \nJOIN member AS T3 \nON T2.link_to_member = T3.member_id \nWHERE T1.event_name = \"Women's Soccer\";",
  "SELECT COUNT(*)\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN attendance AS T2 \nON T1.event_id = T2.link_to_event \nGROUP BY T1.event_name \nORDER BY COUNT(T2.link_to_event) DESC \nLIMIT 1;",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'Vice President';",
  "SELECT event.event_name \nFROM event \nJOIN attendance ON event.event_id = attendance.link_to_event \nJOIN member ON attendance.link_to_member = member.member_id \nWHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
  "SELECT COUNT(*)\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE member.first_name = 'Sacha' \nAND member.last_name = 'Harrison' \nAND SUBSTR(event.event_date, 1, 4) = '2019';",
  "SELECT COUNT(*)\nFROM (\n    SELECT T1.event_id\n    FROM event AS T1\n    JOIN attendance AS T2\n    ON T1.event_id = T2.link_to_event\n    WHERE T1.type = 'Meeting'\n    GROUP BY T1.event_id\n    HAVING COUNT(T2.link_to_member) > 10\n);",
  "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.event_id NOT IN (\n    SELECT b.link_to_event\n    FROM budget b\n    WHERE b.category = 'Fundraising'\n)\nGROUP BY e.event_name\nHAVING COUNT(a.link_to_member) > 20;",
  "SELECT CAST(COUNT(a.link_to_member) AS REAL) / COUNT(DISTINCT e.event_name) AS average_attendance\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.type = 'Meeting' AND e.event_date LIKE '2020-%'",
  "SELECT expense_description \nFROM expense \nORDER BY cost DESC \nLIMIT 1;",
  "SELECT COUNT(*) \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Environmental Engineering';",
  "SELECT member.first_name, member.last_name \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nJOIN event ON attendance.link_to_event = event.event_id \nWHERE event.event_name = 'Laugh Out Loud';",
  "SELECT T1.last_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Law and Constitutional Studies';",
  "SELECT T2.county \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Sherri\" \nAND T1.last_name = \"Ramsey\";",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Tyler\" \nAND T1.last_name = \"Hewitt\";",
  "SELECT T1.amount \nFROM income AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position = 'Vice President';",
  "SELECT SUM(T1.spent) \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T1.category = 'Food' \nAND T2.event_name = 'September Meeting';",
  "SELECT T2.city, T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.position = 'President';",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T1.position = 'Member' AND T2.state = 'Illinois';",
  "SELECT budget.spent \nFROM budget \nJOIN event \nON budget.link_to_event = event.event_id \nWHERE event.event_name = 'September Meeting' \nAND budget.category = 'Advertisement';",
  "SELECT T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Pierce\" \nAND T1.last_name = \"Guidi\";",
  "SELECT SUM(T1.amount) \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T2.event_name = 'October Speaker';",
  "SELECT expense.approved \nFROM expense \nJOIN budget ON expense.link_to_budget = budget.budget_id \nJOIN event ON budget.link_to_event = event.event_id \nWHERE event.event_name = 'October Meeting' AND event.event_date LIKE '2019-10-08%'",
  "SELECT AVG(T1.cost) \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.first_name = \"Elijah\" \nAND T2.last_name = \"Allen\" \nAND (SUBSTR(T1.expense_date, 6, 2) = \"09\" OR SUBSTR(T1.expense_date, 6, 2) = \"10\");",
  "SELECT \n  SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) -\n  SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS difference\nFROM \n  event AS T1\nJOIN \n  budget AS T2\nON \n  T1.event_id = T2.link_to_event;",
  "SELECT location \nFROM event \nWHERE event_name = 'Spring Budget Review';",
  "SELECT cost \nFROM expense \nWHERE expense_description = 'Posters' \n  AND expense_date = '2019-09-04';",
  "SELECT remaining \nFROM budget \nWHERE category = 'Food' \nORDER BY amount DESC \nLIMIT 1;",
  "SELECT notes \nFROM income \nWHERE source = 'Fundraising' \nAND date_received = '2019-09-14';",
  "SELECT count(*) \nFROM major \nWHERE college = \"College of Humanities and Social Sciences\";",
  "SELECT phone \nFROM member \nWHERE first_name = \"Carlo\" AND last_name = \"Jacobs\";",
  "SELECT T2.county \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Adela\" AND T1.last_name = \"O'Gallagher\";",
  "SELECT COUNT(*)\nFROM budget AS T1\nJOIN event AS T2\nON T1.link_to_event = T2.event_id\nWHERE T2.event_name = 'November Meeting' AND T1.remaining < 0;",
  "SELECT sum(T2.amount) \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.event_name = \"September Speaker\";",
  "SELECT T2.event_status \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nWHERE T1.expense_description = 'Post Cards, Posters' \nAND T1.expense_date = '2019-08-20';",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Brent\" AND T1.last_name = \"Thomason\";",
  "SELECT COUNT(*)\nFROM member\nJOIN major\nON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business'\nAND member.t_shirt_size = 'Medium'",
  "SELECT T2.type \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Christof\" \nAND T1.last_name = \"Nielson\";",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'Vice President';",
  "SELECT T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Sacha\" AND T1.last_name = \"Harrison\";",
  "SELECT T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'President';",
  "SELECT T2.date_received \nFROM member AS T1 \nJOIN income AS T2 \nON T1.member_id = T2.link_to_member \nWHERE T1.first_name = 'Connor' \nAND T1.last_name = 'Hilton' \nAND T2.source = 'Dues';",
  "SELECT T2.first_name, T2.last_name \nFROM income AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T1.source = 'Dues' \nORDER BY T1.date_received ASC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) AS ratio\nFROM budget AS T1\nJOIN event AS T2\nON T1.link_to_event = T2.event_id\nWHERE T1.category = 'Advertisement';",
  "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T2.event_name = 'November Speaker';",
  "SELECT sum(cost) \nFROM expense \nWHERE expense_description = 'Pizza';",
  "SELECT count(city) \nFROM zip_code \nWHERE county = 'Orange County' AND state = 'Virginia';",
  "SELECT department \nFROM major \nWHERE college = \"College of Humanities and Social Sciences\";",
  "SELECT T2.city, T2.county, T2.state \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Amy\" AND T1.last_name = \"Firth\";",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nORDER BY T2.remaining ASC \nLIMIT 1;",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'October Meeting';",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nGROUP BY T2.college \nORDER BY COUNT(*) DESC \nLIMIT 1;",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.phone = \"809-555-3360\";",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nORDER BY T2.amount DESC \nLIMIT 1;",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position = 'Vice President';",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = \"Women's Soccer\";",
  "SELECT T2.date_received \nFROM member AS T1 \nJOIN income AS T2 \nON T1.member_id = T2.link_to_member \nWHERE T1.first_name = 'Casey' \nAND T1.last_name = 'Mason';",
  "SELECT COUNT(*)\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T2.state = 'Maryland'",
  "SELECT COUNT(*)\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE member.phone = '954-555-6240';",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.department = \"School of Applied Sciences, Technology and Education\"",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T2.event_status = 'Closed' \nORDER BY T2.spent / T2.amount DESC \nLIMIT 1;",
  "SELECT count(*) \nFROM member \nWHERE position = 'President';",
  "SELECT MAX(spent) FROM budget;",
  "SELECT COUNT(*)\nFROM event\nWHERE type = 'Meeting' AND event_date LIKE '2020-%'",
  "SELECT SUM(spent) \nFROM budget \nWHERE category = 'Food';",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN attendance AS T2\nON T1.member_id = T2.link_to_member\nGROUP BY T1.first_name, T1.last_name\nHAVING COUNT(T2.link_to_event) > 7;",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN `event` ON attendance.link_to_event = `event`.event_id\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Interior Design' AND `event`.event_name = 'Community Theater';",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN zip_code AS T2\nON T1.zip = T2.zip_code\nWHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina';",
  "SELECT SUM(t1.amount) \nFROM income AS t1 \nJOIN member AS t2 \nON t1.link_to_member = t2.member_id \nWHERE t2.first_name = \"Grant\" \nAND t2.last_name = \"Gilmour\";",
  "SELECT member.first_name, member.last_name \nFROM member \nJOIN income \nON member.member_id = income.link_to_member \nWHERE income.amount > 40;",
  "SELECT SUM(T1.cost) \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id \nWHERE T3.event_name = 'Yearly Kickoff';",
  "SELECT T4.first_name, T4.last_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nJOIN expense AS T3 \nON T2.budget_id = T3.link_to_budget \nJOIN member AS T4 \nON T3.link_to_member = T4.member_id \nWHERE T1.event_name = 'Yearly Kickoff';",
  "SELECT T1.first_name, T1.last_name, T2.source \nFROM member AS T1 \nJOIN income AS T2 \nON T1.member_id = T2.link_to_member \nORDER BY T2.amount DESC \nLIMIT 1;",
  "SELECT T2.event_name \nFROM expense AS T1 \nJOIN budget AS T3 ON T1.link_to_budget = T3.budget_id \nJOIN event AS T2 ON T3.link_to_event = T2.event_id \nORDER BY T1.cost ASC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN T3.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) AS REAL) * 100 / SUM(T1.cost) \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id;",
  "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / \n       SUM(CASE WHEN T2.major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id;",
  "SELECT source \nFROM income \nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' \nORDER BY amount DESC \nLIMIT 1;",
  "SELECT first_name, last_name, email \nFROM member \nWHERE position = 'Secretary';",
  "SELECT COUNT(*)\nFROM member\nJOIN major\nON member.link_to_major = major.major_id\nWHERE major.major_name = 'Physics Teaching';",
  "SELECT COUNT(*)\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE event.event_name = 'Community Theater' \nAND event.event_date LIKE '2019%'",
  "SELECT COUNT(*), T3.major_name \nFROM attendance AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nJOIN major AS T3 \nON T2.link_to_major = T3.major_id \nWHERE T2.first_name = \"Luisa\" \nAND T2.last_name = \"Guidi\";",
  "SELECT AVG(spent) \nFROM budget \nWHERE category = 'Food' \nAND event_status = 'Closed';",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T2.category = 'Advertisement' \nORDER BY T2.spent DESC \nLIMIT 1;",
  "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS attended\nFROM attendance AS T1\nJOIN member AS T2 ON T1.link_to_member = T2.member_id\nJOIN event AS T3 ON T1.link_to_event = T3.event_id\nWHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
  "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) \nFROM event \nWHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';",
  "SELECT T1.cost \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id \nWHERE T1.expense_description = 'Posters' \nAND T3.event_name = 'September Speaker';",
  "SELECT t_shirt_size\nFROM member\nGROUP BY t_shirt_size\nORDER BY COUNT(t_shirt_size) DESC\nLIMIT 1;",
  "SELECT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.status = 'Closed' \nORDER BY T2.remaining \nLIMIT 1;",
  "SELECT T1.expense_description, SUM(T1.cost) \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id \nWHERE T3.event_name = 'October Meeting' AND T1.approved = 'true'\nGROUP BY T1.expense_description;",
  "SELECT SUM(T2.amount), T2.category \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.event_name = 'April Speaker' \nORDER BY T2.amount ASC",
  "SELECT MAX(amount) \nFROM budget \nWHERE category = 'Food';",
  "SELECT amount \nFROM budget \nWHERE category = 'Advertisement' \nORDER BY amount DESC \nLIMIT 3;",
  "SELECT sum(cost) \nFROM expense \nWHERE expense_description = 'Parking';",
  "SELECT SUM(cost) \nFROM expense \nWHERE expense_date = '2019-08-20';",
  "SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost\nFROM member\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE member.member_id = 'rec4BLdZHS2Blfp4v'",
  "SELECT expense.expense_description \nFROM expense \nJOIN member \nON expense.link_to_member = member.member_id \nWHERE member.first_name = \"Sacha\" \nAND member.last_name = \"Harrison\";",
  "SELECT T1.expense_description \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.t_shirt_size = 'X-Large';",
  "SELECT T2.zip \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T1.cost < 50;",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Phillip\" \nAND T1.last_name = \"Cullen\";",
  "SELECT T1.position \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Business';",
  "SELECT COUNT(*)\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
  "SELECT event.type \nFROM budget \nJOIN event \nON budget.link_to_event = event.event_id \nWHERE budget.remaining > 30;",
  "SELECT T2.category \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.location = 'MU 215';",
  "SELECT T2.category \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.event_date = '2020-03-24T12:00:00'",
  "SELECT T2.major_name \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'Vice President';",
  "SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id;",
  "SELECT T1.category \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T2.location = 'MU 215';",
  "SELECT count(*) \nFROM income \nWHERE amount = 50;",
  "SELECT count(*) \nFROM member \nWHERE position = 'Member' \nAND t_shirt_size = 'X-Large';",
  "SELECT count(*)\nFROM major\nWHERE college = 'College of Agriculture and Applied Sciences' \nAND department = 'School of Applied Sciences, Technology and Education';",
  "SELECT T1.last_name, T2.department, T2.college\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Environmental Engineering'",
  "SELECT T1.category \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T2.location = 'MU 215' \nAND T2.type = 'Guest Speaker' \nAND T1.spent = 0;",
  "SELECT T3.city, T3.state\nFROM member AS T1\nJOIN major AS T2 ON T1.link_to_major = T2.major_id\nJOIN zip_code AS T3 ON T1.zip = T3.zip_code\nWHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member';",
  "SELECT DISTINCT T1.event_name \nFROM event AS T1 \nJOIN attendance AS T2 \nON T1.event_id = T2.link_to_event \nJOIN member AS T3 \nON T2.link_to_member = T3.member_id \nWHERE T1.type = 'Social' \nAND T3.position = 'Vice President' \nAND T1.location = '900 E. Washington St.'",
  "SELECT T2.last_name, T2.position\nFROM expense AS T1\nJOIN member AS T2\nON T1.link_to_member = T2.member_id\nWHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'",
  "SELECT member.last_name \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member \nJOIN event ON attendance.link_to_event = event.event_id \nWHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member';",
  "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM member AS T1 \nJOIN income AS T2 \nON T1.member_id = T2.link_to_member \nWHERE T1.t_shirt_size = 'Medium' \nAND T1.position = 'Member';",
  "SELECT county \nFROM zip_code \nWHERE type = 'PO Box'",
  "SELECT zip_code \nFROM zip_code \nWHERE type = 'PO Box' \nAND county = 'San Juan Municipio' \nAND state = 'Puerto Rico';",
  "SELECT event_name \nFROM event \nWHERE type = 'Game' \nAND status = 'Closed' \nAND event_date BETWEEN '2019-03-15' AND '2020-03-20';",
  "SELECT link_to_budget \nFROM expense \nWHERE cost > 50;",
  "SELECT member.first_name, member.last_name, expense.link_to_member\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE expense.approved = 'true'\nAND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
  "SELECT T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Katy\" \nAND T1.link_to_major = \"rec1N0upiVLy5esTO\";",
  "SELECT T1.phone \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T2.major_name = 'Business' \nAND T2.college = 'College of Agriculture and Applied Sciences';",
  "SELECT T2.email \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19' \nAND T1.cost > 20;",
  "SELECT COUNT(*)\nFROM member\nJOIN major\nON member.link_to_major = major.major_id\nWHERE major.college = 'College of Education & Human Services'\nAND major.major_name = 'Education'\nAND member.position = 'Member';",
  "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM budget;",
  "SELECT event_id, location, status\nFROM event\nWHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'",
  "SELECT expense_description \nFROM expense \nGROUP BY expense_description \nHAVING AVG(cost) > 50;",
  "SELECT first_name, last_name \nFROM member \nWHERE t_shirt_size = 'X-Large';",
  "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) \nFROM zip_code;",
  "SELECT event.event_name, event.location\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nWHERE budget.remaining > 0;",
  "SELECT event.event_name, event.event_date\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nJOIN expense ON budget.budget_id = expense.link_to_budget\nWHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;",
  "SELECT member.first_name, member.last_name, major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE expense.cost > 100;",
  "SELECT DISTINCT T2.city, T2.county\nFROM income AS T1\nJOIN member AS T3 ON T1.link_to_member = T3.member_id\nJOIN zip_code AS T2 ON T3.zip = T2.zip_code\nWHERE T1.amount > 40;",
  "SELECT T1.first_name, T1.last_name\nFROM member AS T1\nJOIN expense AS T2\nON T1.member_id = T2.link_to_member\nGROUP BY T1.first_name, T1.last_name\nHAVING COUNT(T2.expense_id) > 1\nORDER BY SUM(T2.cost) DESC\nLIMIT 1;",
  "SELECT AVG(T1.cost) \nFROM expense AS T1 \nJOIN member AS T2 \nON T1.link_to_member = T2.member_id \nWHERE T2.position != 'Member';",
  "SELECT DISTINCT T1.event_name \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nJOIN expense AS T3 \nON T2.budget_id = T3.link_to_budget \nWHERE T2.category = 'Parking' \nAND T3.cost < (\n    SELECT AVG(T3.cost) \n    FROM budget AS T2 \n    JOIN expense AS T3 \n    ON T2.budget_id = T3.link_to_budget \n    WHERE T2.category = 'Parking'\n);",
  "SELECT CAST(SUM(T1.cost) AS REAL) * 100 / COUNT(T3.event_id) \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nJOIN event AS T3 \nON T2.link_to_event = T3.event_id \nWHERE T3.type = 'Meeting';",
  "SELECT link_to_budget \nFROM expense \nWHERE expense_description = 'Water, chips, cookies' \nORDER BY cost DESC \nLIMIT 1;",
  "SELECT member.first_name, member.last_name\nFROM member\nJOIN expense ON member.member_id = expense.link_to_member\nGROUP BY member.first_name, member.last_name\nORDER BY SUM(expense.cost) DESC\nLIMIT 5;",
  "SELECT DISTINCT T1.first_name, T1.last_name, T1.phone\nFROM member AS T1\nJOIN expense AS T2\nON T1.member_id = T2.link_to_member\nWHERE T2.cost > (SELECT AVG(cost) FROM expense);",
  "SELECT CAST(SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \n     - CAST(SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.position = 'Member';",
  "SELECT T2.major_name, T2.department \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.first_name = \"Garrett\" AND T1.last_name = \"Gerke\";",
  "SELECT member.first_name, member.last_name, expense.cost\nFROM member\nJOIN expense ON member.member_id = expense.link_to_member\nWHERE expense.expense_description = 'Water, Veggie tray, supplies'",
  "SELECT T1.last_name, T1.phone\nFROM member AS T1\nJOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Elementary Education'",
  "SELECT T2.category, T2.amount \nFROM event AS T1 \nJOIN budget AS T2 \nON T1.event_id = T2.link_to_event \nWHERE T1.event_name = 'January Speaker';",
  "SELECT T2.event_name \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T1.category = 'Food';",
  "SELECT member.first_name, member.last_name, income.amount\nFROM member\nJOIN income\nON member.member_id = income.link_to_member\nWHERE income.date_received = '2019-09-09';",
  "SELECT T2.category \nFROM expense AS T1 \nJOIN budget AS T2 \nON T1.link_to_budget = T2.budget_id \nWHERE T1.expense_description = 'Posters'",
  "SELECT T1.first_name, T1.last_name, T2.college \nFROM member AS T1 \nJOIN major AS T2 \nON T1.link_to_major = T2.major_id \nWHERE T1.position = 'Secretary';",
  "SELECT SUM(T1.spent), T2.event_name \nFROM budget AS T1 \nJOIN event AS T2 \nON T1.link_to_event = T2.event_id \nWHERE T1.category = 'Speaker Gifts';",
  "SELECT T2.city \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T1.first_name = \"Garrett\" \nAND T1.last_name = \"Gerke\";",
  "SELECT T1.first_name, T1.last_name, T1.position \nFROM member AS T1 \nJOIN zip_code AS T2 \nON T1.zip = T2.zip_code \nWHERE T2.city = 'Lincolnton' \nAND T2.state = 'North Carolina' \nAND T1.zip = 28092;",
  "SELECT count(*) \nFROM gasstations \nWHERE Country = 'CZE' \nAND Segment = 'Premium'",
  "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio\nFROM customers;",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'LAM' \nAND T2.`Date` BETWEEN '201201' AND '201212' \nORDER BY T2.Consumption ASC \nLIMIT 1;",
  "SELECT AVG(T2.Consumption) \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'SME' \nAND T2.Date BETWEEN '201301' AND '201312';",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Currency = 'CZK' \nAND T2.Date BETWEEN '201101' AND '201112' \nORDER BY T2.Consumption DESC \nLIMIT 1;",
  "SELECT count(*)\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE customers.Segment = 'KAM'\nAND yearmonth.`Date` BETWEEN '201201' AND '201212'\nAND yearmonth.Consumption < 30000;",
  "SELECT \n  SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Consumption ELSE 0 END) - \n  SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Consumption ELSE 0 END) AS Difference \nFROM \n  customers AS T1 \nJOIN \n  yearmonth AS T2 \nON \n  T1.CustomerID = T2.CustomerID \nWHERE \n  T2.Date BETWEEN '201201' AND '201212';",
  "SELECT SUBSTR(T1.`Date`, 1, 4) AS Year\nFROM yearmonth AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Currency = 'EUR'\nGROUP BY SUBSTR(T1.`Date`, 1, 4)\nORDER BY SUM(T1.Consumption) DESC\nLIMIT 1;",
  "SELECT T1.Segment \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nGROUP BY T1.Segment \nORDER BY SUM(T2.Consumption) ASC \nLIMIT 1;",
  "SELECT SUBSTR(T1.`Date`, 1, 4)\nFROM yearmonth AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T2.Currency = 'CZK'\nGROUP BY SUBSTR(T1.`Date`, 1, 4)\nORDER BY SUM(T1.Consumption) DESC\nLIMIT 1;",
  "SELECT T2.`Date`\nFROM customers AS T1\nJOIN yearmonth AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.Segment = 'SME' AND T2.`Date` BETWEEN '201301' AND '201312'\nORDER BY T2.Consumption DESC\nLIMIT 1;",
  "WITH RankedConsumption AS (\n    SELECT \n        T1.Segment, \n        T2.Consumption,\n        ROW_NUMBER() OVER (PARTITION BY T1.Segment ORDER BY T2.Consumption ASC) as rn\n    FROM \n        customers AS T1 \n    JOIN \n        yearmonth AS T2 \n    ON \n        T1.CustomerID = T2.CustomerID\n    WHERE \n        T2.Date BETWEEN '201301' AND '201312' \n        AND T1.Currency = 'CZK'\n)\nSELECT \n    CAST(SUM(CASE WHEN Segment = 'SME' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'SME' THEN Consumption END) -\n    CAST(SUM(CASE WHEN Segment = 'LAM' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'LAM' THEN Consumption END) AS SME_LAM,\n    \n    CAST(SUM(CASE WHEN Segment = 'LAM' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'LAM' THEN Consumption END) -\n    CAST(SUM(CASE WHEN Segment = 'KAM' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'KAM' THEN Consumption END) AS LAM_KAM,\n    \n    CAST(SUM(CASE WHEN Segment = 'KAM' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'KAM' THEN Consumption END) -\n    CAST(SUM(CASE WHEN Segment = 'SME' THEN Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN Segment = 'SME' THEN Consumption END) AS KAM_SME\nFROM \n    RankedConsumption\nWHERE \n    rn = 1;",
  "SELECT \n  c.Segment \nFROM \n  customers c \nJOIN \n  yearmonth y \nON \n  c.CustomerID = y.CustomerID \nWHERE \n  c.Currency = 'EUR' \n  AND c.Segment IN ('SME', 'LAM', 'KAM') \n  AND (y.`Date` LIKE '2012%' OR y.`Date` LIKE '2013%')\nGROUP BY \n  c.Segment \nORDER BY \n  (SUM(CASE WHEN y.`Date` LIKE '2013%' THEN y.Consumption ELSE 0 END) - \n   SUM(CASE WHEN y.`Date` LIKE '2012%' THEN y.Consumption ELSE 0 END)) * 1.0 / \n   SUM(CASE WHEN y.`Date` LIKE '2013%' THEN y.Consumption ELSE 0 END) DESC;",
  "SELECT sum(Consumption) \nFROM yearmonth \nWHERE CustomerID = 6 \nAND Date BETWEEN '201308' AND '201311';",
  "SELECT \n  SUM(IIF(Country = 'CZE' AND Segment = 'Discount', 1, 0)) - \n  SUM(IIF(Country = 'SVK' AND Segment = 'Discount', 1, 0)) AS Difference\nFROM \n  gasstations;",
  "SELECT \n  (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND `Date` = '201304') - \n  (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND `Date` = '201304') \n  AS ConsumptionDifference;",
  "SELECT \n  SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Amount ELSE 0 END) - \n  SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Amount ELSE 0 END) AS Amount_of_more_SMEs\nFROM \n  customers AS T1 \nJOIN \n  transactions_1k AS T2 \nON \n  T1.CustomerID = T2.CustomerID \nWHERE \n  T1.Segment = 'SME';",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'LAM' \nAND T1.Currency = 'EUR' \nAND T2.`Date` = '201310' \nORDER BY T2.Consumption DESC \nLIMIT 1;",
  "SELECT T1.CustomerID, T2.Consumption \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'KAM' \nORDER BY T2.Consumption DESC \nLIMIT 1;",
  "SELECT sum(T2.Consumption) \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'KAM' \nAND T2.Date = '201305'",
  "SELECT CAST(SUM(CASE WHEN y.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers c \nJOIN yearmonth y \nON c.CustomerID = y.CustomerID \nWHERE c.Segment = 'LAM'",
  "SELECT Country, COUNT(*) \nFROM gasstations \nWHERE Segment = \"Value for money\" \nGROUP BY Country;",
  "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers \nWHERE Segment = 'KAM';",
  "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM yearmonth \nWHERE `Date` = '201202';",
  "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM gasstations \nWHERE Country = 'SVK';",
  "SELECT CustomerID \nFROM yearmonth \nWHERE `Date` = '201309' \nORDER BY Consumption DESC \nLIMIT 1;",
  "SELECT T1.Segment \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Date = '201309' \nGROUP BY T1.Segment \nORDER BY SUM(T2.Consumption) ASC \nLIMIT 1;",
  "SELECT T1.CustomerID \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Segment = 'SME' \nAND T2.Date = '201206' \nORDER BY T2.Consumption ASC \nLIMIT 1;",
  "SELECT Consumption \nFROM yearmonth \nWHERE Date LIKE '2012%' \nORDER BY Consumption DESC \nLIMIT 1;",
  "SELECT MAX(T2.Consumption) \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Currency = 'EUR'",
  "SELECT DISTINCT products.Description \nFROM products \nJOIN transactions_1k \nON products.ProductID = transactions_1k.ProductID \nJOIN yearmonth \nON transactions_1k.CustomerID = yearmonth.CustomerID \nWHERE SUBSTR(yearmonth.`Date`, 1, 6) = '201309'",
  "SELECT DISTINCT gasstations.Country \nFROM gasstations \nJOIN transactions_1k \nON gasstations.GasStationID = transactions_1k.GasStationID \nJOIN yearmonth \nON transactions_1k.CustomerID = yearmonth.CustomerID \nWHERE SUBSTR(yearmonth.`Date`, 1, 4) = '2013' AND SUBSTR(yearmonth.`Date`, 5, 2) = '06'",
  "SELECT DISTINCT T3.ChainID \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nJOIN gasstations AS T3 \nON T1.GasStationID = T3.GasStationID \nWHERE T2.Currency = 'EUR';",
  "SELECT DISTINCT T1.Description \nFROM products AS T1 \nJOIN transactions_1k AS T2 \nON T1.ProductID = T2.ProductID \nJOIN customers AS T3 \nON T2.CustomerID = T3.CustomerID \nWHERE T3.Currency = 'EUR'",
  "SELECT AVG(Amount * Price) \nFROM transactions_1k \nWHERE Date LIKE '2012-01%'",
  "SELECT count(*)\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000;",
  "SELECT DISTINCT products.Description\nFROM products\nJOIN transactions_1k ON products.ProductID = transactions_1k.ProductID\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE';",
  "SELECT DISTINCT T1.`Time`\nFROM `transactions_1k` AS T1\nJOIN gasstations AS T2\nON T1.GasStationID = T2.GasStationID\nWHERE T2.ChainID = 11;",
  "SELECT COUNT(*)\nFROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;",
  "SELECT count(*) \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T2.Country = 'CZE' AND T1.`Date` > '2012-01-01'",
  "SELECT AVG(T1.Price) \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T2.Country = 'CZE';",
  "SELECT AVG(T1.Price) \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Currency = 'EUR'",
  "SELECT CustomerID \nFROM transactions_1k \nWHERE `Date` = '2012-08-25' \nORDER BY Amount * Price DESC \nLIMIT 1;",
  "SELECT T2.Country \nFROM `transactions_1k` AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.`Date` = '2012-08-25' \nORDER BY T1.`Time` ASC \nLIMIT 1;",
  "SELECT T2.Currency \nFROM transactions_1k AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.`Date` = '2012-08-24' \nAND T1.`Time` = '16:25:00';",
  "SELECT T1.Segment \nFROM customers AS T1 \nJOIN transactions_1k AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.`Date` = '2012-08-23' \nAND T2.`Time` = '21:20:00';",
  "SELECT COUNT(*)\nFROM transactions_1k AS T1\nJOIN customers AS T2\nON T1.CustomerID = T2.CustomerID\nWHERE T1.`Date` = '2012-08-26'\nAND T1.`Time` < '13:00:00'\nAND T2.Currency = 'CZK';",
  "SELECT Segment \nFROM customers \nORDER BY CustomerID ASC \nLIMIT 1;",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.`Date` = '2012-08-24' AND T1.`Time` = '12:42:00'",
  "SELECT ProductID \nFROM transactions_1k \nWHERE `Date` = '2012-08-23' AND `Time` = '21:20:00'",
  "SELECT T2.Date, T2.Consumption \nFROM transactions_1k AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.Date = '2012-08-24' \nAND T1.Price = 124.05 \nAND T2.Date = '201201';",
  "SELECT COUNT(*)\nFROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE transactions_1k.`Date` = '2012-08-26'\nAND transactions_1k.`Time` BETWEEN '08:00:00' AND '09:00:00'\nAND gasstations.Country = 'CZE';",
  "SELECT T1.Currency \nFROM customers AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.`Date` = '201306' \nAND T2.Consumption = 214582.17;",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.CardID = 667467;",
  "SELECT T2.Currency \nFROM `transactions_1k` AS T1 \nJOIN customers AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T1.`Date` = '2012-08-24' \nAND T1.Price = 548.4;",
  "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM customers AS T1 \nJOIN transactions_1k AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.`Date` = '2012-08-25';",
  "SELECT CAST((y2012.Consumption - y2013.Consumption) AS REAL) / y2012.Consumption AS DecreaseRate\nFROM yearmonth y2012\nJOIN yearmonth y2013 ON y2012.CustomerID = y2013.CustomerID\nJOIN transactions_1k t ON y2012.CustomerID = t.CustomerID\nWHERE y2012.`Date` LIKE '2012%' \n  AND y2013.`Date` LIKE '2013%' \n  AND t.`Date` = '2012-08-25' \n  AND t.Price = 634.8;",
  "SELECT GasStationID \nFROM transactions_1k \nGROUP BY GasStationID \nORDER BY SUM(Amount * Price) DESC \nLIMIT 1;",
  "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM gasstations \nWHERE Country = 'SVK';",
  "SELECT SUM(t1.Amount) \nFROM transactions_1k AS t1 \nJOIN yearmonth AS t2 \nON t1.CustomerID = t2.CustomerID \nWHERE t1.CustomerID = 38508 \nAND t2.Date = '201201';",
  "SELECT T1.Description \nFROM products AS T1 \nJOIN transactions_1k AS T2 \nON T1.ProductID = T2.ProductID \nGROUP BY T1.Description \nORDER BY SUM(T2.Amount) DESC \nLIMIT 5;",
  "SELECT T1.CustomerID, SUM(T2.Price) / SUM(T2.Amount) AS Average_Price, T1.Currency\nFROM customers AS T1\nJOIN transactions_1k AS T2\nON T1.CustomerID = T2.CustomerID\nGROUP BY T1.CustomerID\nORDER BY SUM(T2.Price) DESC\nLIMIT 1;",
  "SELECT T2.Country \nFROM transactions_1k AS T1 \nJOIN gasstations AS T2 \nON T1.GasStationID = T2.GasStationID \nWHERE T1.ProductID = 2 \nORDER BY T1.Price DESC \nLIMIT 1;",
  "SELECT T2.Consumption \nFROM transactions_1k AS T1 \nJOIN yearmonth AS T2 \nON T1.CustomerID = T2.CustomerID \nWHERE T2.Date = '201208' \nAND T1.ProductID = 5 \nAND T1.Price / T1.Amount > 29.00;"
]